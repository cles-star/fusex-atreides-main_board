
SPI_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b48c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009bc  0800b630  0800b630  0001b630  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bfec  0800bfec  000201f4  2**0
                  CONTENTS
  4 .ARM          00000008  0800bfec  0800bfec  0001bfec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bff4  0800bff4  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bff4  0800bff4  0001bff4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bff8  0800bff8  0001bff8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  0800bffc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003c0  200001f4  0800c1f0  000201f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005b4  0800c1f0  000205b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010da9  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b52  00000000  00000000  00030fcd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000dc8  00000000  00000000  00033b20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c70  00000000  00000000  000348e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000191c2  00000000  00000000  00035558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001494b  00000000  00000000  0004e71a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b04b  00000000  00000000  00063065  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ee0b0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000048e8  00000000  00000000  000ee100  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f4 	.word	0x200001f4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800b614 	.word	0x0800b614

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001f8 	.word	0x200001f8
 80001dc:	0800b614 	.word	0x0800b614

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_ldivmod>:
 8000bb8:	b97b      	cbnz	r3, 8000bda <__aeabi_ldivmod+0x22>
 8000bba:	b972      	cbnz	r2, 8000bda <__aeabi_ldivmod+0x22>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bfbe      	ittt	lt
 8000bc0:	2000      	movlt	r0, #0
 8000bc2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000bc6:	e006      	blt.n	8000bd6 <__aeabi_ldivmod+0x1e>
 8000bc8:	bf08      	it	eq
 8000bca:	2800      	cmpeq	r0, #0
 8000bcc:	bf1c      	itt	ne
 8000bce:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000bd2:	f04f 30ff 	movne.w	r0, #4294967295
 8000bd6:	f000 b9bf 	b.w	8000f58 <__aeabi_idiv0>
 8000bda:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bde:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be2:	2900      	cmp	r1, #0
 8000be4:	db09      	blt.n	8000bfa <__aeabi_ldivmod+0x42>
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	db1a      	blt.n	8000c20 <__aeabi_ldivmod+0x68>
 8000bea:	f000 f84d 	bl	8000c88 <__udivmoddi4>
 8000bee:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf6:	b004      	add	sp, #16
 8000bf8:	4770      	bx	lr
 8000bfa:	4240      	negs	r0, r0
 8000bfc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	db1b      	blt.n	8000c3c <__aeabi_ldivmod+0x84>
 8000c04:	f000 f840 	bl	8000c88 <__udivmoddi4>
 8000c08:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c10:	b004      	add	sp, #16
 8000c12:	4240      	negs	r0, r0
 8000c14:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c18:	4252      	negs	r2, r2
 8000c1a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c1e:	4770      	bx	lr
 8000c20:	4252      	negs	r2, r2
 8000c22:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c26:	f000 f82f 	bl	8000c88 <__udivmoddi4>
 8000c2a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c2e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c32:	b004      	add	sp, #16
 8000c34:	4240      	negs	r0, r0
 8000c36:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3a:	4770      	bx	lr
 8000c3c:	4252      	negs	r2, r2
 8000c3e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c42:	f000 f821 	bl	8000c88 <__udivmoddi4>
 8000c46:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c4a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c4e:	b004      	add	sp, #16
 8000c50:	4252      	negs	r2, r2
 8000c52:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c56:	4770      	bx	lr

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b974 	b.w	8000f58 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	468e      	mov	lr, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d14d      	bne.n	8000d32 <__udivmoddi4+0xaa>
 8000c96:	428a      	cmp	r2, r1
 8000c98:	4694      	mov	ip, r2
 8000c9a:	d969      	bls.n	8000d70 <__udivmoddi4+0xe8>
 8000c9c:	fab2 f282 	clz	r2, r2
 8000ca0:	b152      	cbz	r2, 8000cb8 <__udivmoddi4+0x30>
 8000ca2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ca6:	f1c2 0120 	rsb	r1, r2, #32
 8000caa:	fa20 f101 	lsr.w	r1, r0, r1
 8000cae:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cb6:	4094      	lsls	r4, r2
 8000cb8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cbc:	0c21      	lsrs	r1, r4, #16
 8000cbe:	fbbe f6f8 	udiv	r6, lr, r8
 8000cc2:	fa1f f78c 	uxth.w	r7, ip
 8000cc6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cca:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cce:	fb06 f107 	mul.w	r1, r6, r7
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	d90a      	bls.n	8000cec <__udivmoddi4+0x64>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cde:	f080 811f 	bcs.w	8000f20 <__udivmoddi4+0x298>
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	f240 811c 	bls.w	8000f20 <__udivmoddi4+0x298>
 8000ce8:	3e02      	subs	r6, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1a5b      	subs	r3, r3, r1
 8000cee:	b2a4      	uxth	r4, r4
 8000cf0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cfc:	fb00 f707 	mul.w	r7, r0, r7
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	d90a      	bls.n	8000d1a <__udivmoddi4+0x92>
 8000d04:	eb1c 0404 	adds.w	r4, ip, r4
 8000d08:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d0c:	f080 810a 	bcs.w	8000f24 <__udivmoddi4+0x29c>
 8000d10:	42a7      	cmp	r7, r4
 8000d12:	f240 8107 	bls.w	8000f24 <__udivmoddi4+0x29c>
 8000d16:	4464      	add	r4, ip
 8000d18:	3802      	subs	r0, #2
 8000d1a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d1e:	1be4      	subs	r4, r4, r7
 8000d20:	2600      	movs	r6, #0
 8000d22:	b11d      	cbz	r5, 8000d2c <__udivmoddi4+0xa4>
 8000d24:	40d4      	lsrs	r4, r2
 8000d26:	2300      	movs	r3, #0
 8000d28:	e9c5 4300 	strd	r4, r3, [r5]
 8000d2c:	4631      	mov	r1, r6
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d909      	bls.n	8000d4a <__udivmoddi4+0xc2>
 8000d36:	2d00      	cmp	r5, #0
 8000d38:	f000 80ef 	beq.w	8000f1a <__udivmoddi4+0x292>
 8000d3c:	2600      	movs	r6, #0
 8000d3e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d42:	4630      	mov	r0, r6
 8000d44:	4631      	mov	r1, r6
 8000d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4a:	fab3 f683 	clz	r6, r3
 8000d4e:	2e00      	cmp	r6, #0
 8000d50:	d14a      	bne.n	8000de8 <__udivmoddi4+0x160>
 8000d52:	428b      	cmp	r3, r1
 8000d54:	d302      	bcc.n	8000d5c <__udivmoddi4+0xd4>
 8000d56:	4282      	cmp	r2, r0
 8000d58:	f200 80f9 	bhi.w	8000f4e <__udivmoddi4+0x2c6>
 8000d5c:	1a84      	subs	r4, r0, r2
 8000d5e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d62:	2001      	movs	r0, #1
 8000d64:	469e      	mov	lr, r3
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	d0e0      	beq.n	8000d2c <__udivmoddi4+0xa4>
 8000d6a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d6e:	e7dd      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000d70:	b902      	cbnz	r2, 8000d74 <__udivmoddi4+0xec>
 8000d72:	deff      	udf	#255	; 0xff
 8000d74:	fab2 f282 	clz	r2, r2
 8000d78:	2a00      	cmp	r2, #0
 8000d7a:	f040 8092 	bne.w	8000ea2 <__udivmoddi4+0x21a>
 8000d7e:	eba1 010c 	sub.w	r1, r1, ip
 8000d82:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d86:	fa1f fe8c 	uxth.w	lr, ip
 8000d8a:	2601      	movs	r6, #1
 8000d8c:	0c20      	lsrs	r0, r4, #16
 8000d8e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d92:	fb07 1113 	mls	r1, r7, r3, r1
 8000d96:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d9a:	fb0e f003 	mul.w	r0, lr, r3
 8000d9e:	4288      	cmp	r0, r1
 8000da0:	d908      	bls.n	8000db4 <__udivmoddi4+0x12c>
 8000da2:	eb1c 0101 	adds.w	r1, ip, r1
 8000da6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000daa:	d202      	bcs.n	8000db2 <__udivmoddi4+0x12a>
 8000dac:	4288      	cmp	r0, r1
 8000dae:	f200 80cb 	bhi.w	8000f48 <__udivmoddi4+0x2c0>
 8000db2:	4643      	mov	r3, r8
 8000db4:	1a09      	subs	r1, r1, r0
 8000db6:	b2a4      	uxth	r4, r4
 8000db8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dbc:	fb07 1110 	mls	r1, r7, r0, r1
 8000dc0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000dc4:	fb0e fe00 	mul.w	lr, lr, r0
 8000dc8:	45a6      	cmp	lr, r4
 8000dca:	d908      	bls.n	8000dde <__udivmoddi4+0x156>
 8000dcc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dd4:	d202      	bcs.n	8000ddc <__udivmoddi4+0x154>
 8000dd6:	45a6      	cmp	lr, r4
 8000dd8:	f200 80bb 	bhi.w	8000f52 <__udivmoddi4+0x2ca>
 8000ddc:	4608      	mov	r0, r1
 8000dde:	eba4 040e 	sub.w	r4, r4, lr
 8000de2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000de6:	e79c      	b.n	8000d22 <__udivmoddi4+0x9a>
 8000de8:	f1c6 0720 	rsb	r7, r6, #32
 8000dec:	40b3      	lsls	r3, r6
 8000dee:	fa22 fc07 	lsr.w	ip, r2, r7
 8000df2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000df6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dfa:	fa01 f306 	lsl.w	r3, r1, r6
 8000dfe:	431c      	orrs	r4, r3
 8000e00:	40f9      	lsrs	r1, r7
 8000e02:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e06:	fa00 f306 	lsl.w	r3, r0, r6
 8000e0a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e0e:	0c20      	lsrs	r0, r4, #16
 8000e10:	fa1f fe8c 	uxth.w	lr, ip
 8000e14:	fb09 1118 	mls	r1, r9, r8, r1
 8000e18:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e1c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e20:	4288      	cmp	r0, r1
 8000e22:	fa02 f206 	lsl.w	r2, r2, r6
 8000e26:	d90b      	bls.n	8000e40 <__udivmoddi4+0x1b8>
 8000e28:	eb1c 0101 	adds.w	r1, ip, r1
 8000e2c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e30:	f080 8088 	bcs.w	8000f44 <__udivmoddi4+0x2bc>
 8000e34:	4288      	cmp	r0, r1
 8000e36:	f240 8085 	bls.w	8000f44 <__udivmoddi4+0x2bc>
 8000e3a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e3e:	4461      	add	r1, ip
 8000e40:	1a09      	subs	r1, r1, r0
 8000e42:	b2a4      	uxth	r4, r4
 8000e44:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e48:	fb09 1110 	mls	r1, r9, r0, r1
 8000e4c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e50:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e54:	458e      	cmp	lr, r1
 8000e56:	d908      	bls.n	8000e6a <__udivmoddi4+0x1e2>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e60:	d26c      	bcs.n	8000f3c <__udivmoddi4+0x2b4>
 8000e62:	458e      	cmp	lr, r1
 8000e64:	d96a      	bls.n	8000f3c <__udivmoddi4+0x2b4>
 8000e66:	3802      	subs	r0, #2
 8000e68:	4461      	add	r1, ip
 8000e6a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e6e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e72:	eba1 010e 	sub.w	r1, r1, lr
 8000e76:	42a1      	cmp	r1, r4
 8000e78:	46c8      	mov	r8, r9
 8000e7a:	46a6      	mov	lr, r4
 8000e7c:	d356      	bcc.n	8000f2c <__udivmoddi4+0x2a4>
 8000e7e:	d053      	beq.n	8000f28 <__udivmoddi4+0x2a0>
 8000e80:	b15d      	cbz	r5, 8000e9a <__udivmoddi4+0x212>
 8000e82:	ebb3 0208 	subs.w	r2, r3, r8
 8000e86:	eb61 010e 	sbc.w	r1, r1, lr
 8000e8a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e8e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e92:	40f1      	lsrs	r1, r6
 8000e94:	431f      	orrs	r7, r3
 8000e96:	e9c5 7100 	strd	r7, r1, [r5]
 8000e9a:	2600      	movs	r6, #0
 8000e9c:	4631      	mov	r1, r6
 8000e9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ea2:	f1c2 0320 	rsb	r3, r2, #32
 8000ea6:	40d8      	lsrs	r0, r3
 8000ea8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eac:	fa21 f303 	lsr.w	r3, r1, r3
 8000eb0:	4091      	lsls	r1, r2
 8000eb2:	4301      	orrs	r1, r0
 8000eb4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eb8:	fa1f fe8c 	uxth.w	lr, ip
 8000ebc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ec0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ec4:	0c0b      	lsrs	r3, r1, #16
 8000ec6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eca:	fb00 f60e 	mul.w	r6, r0, lr
 8000ece:	429e      	cmp	r6, r3
 8000ed0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ed4:	d908      	bls.n	8000ee8 <__udivmoddi4+0x260>
 8000ed6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eda:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ede:	d22f      	bcs.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee0:	429e      	cmp	r6, r3
 8000ee2:	d92d      	bls.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4463      	add	r3, ip
 8000ee8:	1b9b      	subs	r3, r3, r6
 8000eea:	b289      	uxth	r1, r1
 8000eec:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ef0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ef4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef8:	fb06 f30e 	mul.w	r3, r6, lr
 8000efc:	428b      	cmp	r3, r1
 8000efe:	d908      	bls.n	8000f12 <__udivmoddi4+0x28a>
 8000f00:	eb1c 0101 	adds.w	r1, ip, r1
 8000f04:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f08:	d216      	bcs.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0a:	428b      	cmp	r3, r1
 8000f0c:	d914      	bls.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0e:	3e02      	subs	r6, #2
 8000f10:	4461      	add	r1, ip
 8000f12:	1ac9      	subs	r1, r1, r3
 8000f14:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f18:	e738      	b.n	8000d8c <__udivmoddi4+0x104>
 8000f1a:	462e      	mov	r6, r5
 8000f1c:	4628      	mov	r0, r5
 8000f1e:	e705      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000f20:	4606      	mov	r6, r0
 8000f22:	e6e3      	b.n	8000cec <__udivmoddi4+0x64>
 8000f24:	4618      	mov	r0, r3
 8000f26:	e6f8      	b.n	8000d1a <__udivmoddi4+0x92>
 8000f28:	454b      	cmp	r3, r9
 8000f2a:	d2a9      	bcs.n	8000e80 <__udivmoddi4+0x1f8>
 8000f2c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f30:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f34:	3801      	subs	r0, #1
 8000f36:	e7a3      	b.n	8000e80 <__udivmoddi4+0x1f8>
 8000f38:	4646      	mov	r6, r8
 8000f3a:	e7ea      	b.n	8000f12 <__udivmoddi4+0x28a>
 8000f3c:	4620      	mov	r0, r4
 8000f3e:	e794      	b.n	8000e6a <__udivmoddi4+0x1e2>
 8000f40:	4640      	mov	r0, r8
 8000f42:	e7d1      	b.n	8000ee8 <__udivmoddi4+0x260>
 8000f44:	46d0      	mov	r8, sl
 8000f46:	e77b      	b.n	8000e40 <__udivmoddi4+0x1b8>
 8000f48:	3b02      	subs	r3, #2
 8000f4a:	4461      	add	r1, ip
 8000f4c:	e732      	b.n	8000db4 <__udivmoddi4+0x12c>
 8000f4e:	4630      	mov	r0, r6
 8000f50:	e709      	b.n	8000d66 <__udivmoddi4+0xde>
 8000f52:	4464      	add	r4, ip
 8000f54:	3802      	subs	r0, #2
 8000f56:	e742      	b.n	8000dde <__udivmoddi4+0x156>

08000f58 <__aeabi_idiv0>:
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop

08000f5c <BMP280_CS_LOW>:
#include "bmp280.h"
#include <stdint.h>
#include <stdbool.h>
#include <stdio.h>

void BMP280_CS_LOW(){
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BMP280_CS_PORT, BMP280_CS_PIN, GPIO_PIN_RESET);
 8000f60:	2200      	movs	r2, #0
 8000f62:	2101      	movs	r1, #1
 8000f64:	4802      	ldr	r0, [pc, #8]	; (8000f70 <BMP280_CS_LOW+0x14>)
 8000f66:	f002 fb87 	bl	8003678 <HAL_GPIO_WritePin>
}
 8000f6a:	bf00      	nop
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	40020400 	.word	0x40020400

08000f74 <BMP280_CS_HIGH>:
void BMP280_CS_HIGH(){
 8000f74:	b580      	push	{r7, lr}
 8000f76:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BMP280_CS_PORT, BMP280_CS_PIN, GPIO_PIN_SET);
 8000f78:	2201      	movs	r2, #1
 8000f7a:	2101      	movs	r1, #1
 8000f7c:	4802      	ldr	r0, [pc, #8]	; (8000f88 <BMP280_CS_HIGH+0x14>)
 8000f7e:	f002 fb7b 	bl	8003678 <HAL_GPIO_WritePin>
}
 8000f82:	bf00      	nop
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	40020400 	.word	0x40020400

08000f8c <bmp280_read_register>:

uint8_t bmp280_read_register(BMP280 *bmp, uint8_t reg) {
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b084      	sub	sp, #16
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
 8000f94:	460b      	mov	r3, r1
 8000f96:	70fb      	strb	r3, [r7, #3]
	uint8_t tx = reg | BMP280_SPI_READ;
 8000f98:	78fb      	ldrb	r3, [r7, #3]
 8000f9a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000f9e:	b2db      	uxtb	r3, r3
 8000fa0:	73fb      	strb	r3, [r7, #15]
	uint8_t rx;

    BMP280_CS_LOW();
 8000fa2:	f7ff ffdb 	bl	8000f5c <BMP280_CS_LOW>
    HAL_SPI_Transmit(bmp->hspi, &tx, 1, HAL_MAX_DELAY);
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	6818      	ldr	r0, [r3, #0]
 8000faa:	f107 010f 	add.w	r1, r7, #15
 8000fae:	f04f 33ff 	mov.w	r3, #4294967295
 8000fb2:	2201      	movs	r2, #1
 8000fb4:	f003 f85b 	bl	800406e <HAL_SPI_Transmit>
    HAL_SPI_Receive(bmp->hspi, &rx, 1, HAL_MAX_DELAY);
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	6818      	ldr	r0, [r3, #0]
 8000fbc:	f107 010e 	add.w	r1, r7, #14
 8000fc0:	f04f 33ff 	mov.w	r3, #4294967295
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	f003 f98e 	bl	80042e6 <HAL_SPI_Receive>
    BMP280_CS_HIGH();
 8000fca:	f7ff ffd3 	bl	8000f74 <BMP280_CS_HIGH>

    return rx;
 8000fce:	7bbb      	ldrb	r3, [r7, #14]
}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	3710      	adds	r7, #16
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}

08000fd8 <bmp280_read_registers>:

void bmp280_read_registers(BMP280 *bmp, uint8_t reg, uint8_t *data, uint8_t length) {
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b086      	sub	sp, #24
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	60f8      	str	r0, [r7, #12]
 8000fe0:	607a      	str	r2, [r7, #4]
 8000fe2:	461a      	mov	r2, r3
 8000fe4:	460b      	mov	r3, r1
 8000fe6:	72fb      	strb	r3, [r7, #11]
 8000fe8:	4613      	mov	r3, r2
 8000fea:	72bb      	strb	r3, [r7, #10]

	uint8_t tx = reg | BMP280_SPI_READ;
 8000fec:	7afb      	ldrb	r3, [r7, #11]
 8000fee:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000ff2:	b2db      	uxtb	r3, r3
 8000ff4:	75fb      	strb	r3, [r7, #23]

    BMP280_CS_LOW();
 8000ff6:	f7ff ffb1 	bl	8000f5c <BMP280_CS_LOW>
    HAL_SPI_Transmit(bmp->hspi, &tx, 1, HAL_MAX_DELAY);
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	6818      	ldr	r0, [r3, #0]
 8000ffe:	f107 0117 	add.w	r1, r7, #23
 8001002:	f04f 33ff 	mov.w	r3, #4294967295
 8001006:	2201      	movs	r2, #1
 8001008:	f003 f831 	bl	800406e <HAL_SPI_Transmit>
    HAL_SPI_Receive(bmp->hspi, data, length, HAL_MAX_DELAY);
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	6818      	ldr	r0, [r3, #0]
 8001010:	7abb      	ldrb	r3, [r7, #10]
 8001012:	b29a      	uxth	r2, r3
 8001014:	f04f 33ff 	mov.w	r3, #4294967295
 8001018:	6879      	ldr	r1, [r7, #4]
 800101a:	f003 f964 	bl	80042e6 <HAL_SPI_Receive>
    BMP280_CS_HIGH();
 800101e:	f7ff ffa9 	bl	8000f74 <BMP280_CS_HIGH>

}
 8001022:	bf00      	nop
 8001024:	3718      	adds	r7, #24
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}

0800102a <bmp280_read_calibration_data>:

void bmp280_read_calibration_data(BMP280 *bmp) {
 800102a:	b580      	push	{r7, lr}
 800102c:	b088      	sub	sp, #32
 800102e:	af00      	add	r7, sp, #0
 8001030:	6078      	str	r0, [r7, #4]
    uint8_t calib[24];
    bmp280_read_registers(bmp, BMP280_DIG_T1_LSB, calib, 24);
 8001032:	f107 0208 	add.w	r2, r7, #8
 8001036:	2318      	movs	r3, #24
 8001038:	2188      	movs	r1, #136	; 0x88
 800103a:	6878      	ldr	r0, [r7, #4]
 800103c:	f7ff ffcc 	bl	8000fd8 <bmp280_read_registers>

    bmp->calib.dig_T1 = (uint16_t)(calib[1] << 8 | calib[0]);
 8001040:	7a7b      	ldrb	r3, [r7, #9]
 8001042:	021b      	lsls	r3, r3, #8
 8001044:	b21a      	sxth	r2, r3
 8001046:	7a3b      	ldrb	r3, [r7, #8]
 8001048:	b21b      	sxth	r3, r3
 800104a:	4313      	orrs	r3, r2
 800104c:	b21b      	sxth	r3, r3
 800104e:	b29a      	uxth	r2, r3
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	809a      	strh	r2, [r3, #4]
    bmp->calib.dig_T2 = (int16_t)(calib[3] << 8 | calib[2]);
 8001054:	7afb      	ldrb	r3, [r7, #11]
 8001056:	021b      	lsls	r3, r3, #8
 8001058:	b21a      	sxth	r2, r3
 800105a:	7abb      	ldrb	r3, [r7, #10]
 800105c:	b21b      	sxth	r3, r3
 800105e:	4313      	orrs	r3, r2
 8001060:	b21a      	sxth	r2, r3
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	80da      	strh	r2, [r3, #6]
    bmp->calib.dig_T3 = (int16_t)(calib[5] << 8 | calib[4]);
 8001066:	7b7b      	ldrb	r3, [r7, #13]
 8001068:	021b      	lsls	r3, r3, #8
 800106a:	b21a      	sxth	r2, r3
 800106c:	7b3b      	ldrb	r3, [r7, #12]
 800106e:	b21b      	sxth	r3, r3
 8001070:	4313      	orrs	r3, r2
 8001072:	b21a      	sxth	r2, r3
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	811a      	strh	r2, [r3, #8]
    bmp->calib.dig_P1 = (uint16_t)(calib[7] << 8 | calib[6]);
 8001078:	7bfb      	ldrb	r3, [r7, #15]
 800107a:	021b      	lsls	r3, r3, #8
 800107c:	b21a      	sxth	r2, r3
 800107e:	7bbb      	ldrb	r3, [r7, #14]
 8001080:	b21b      	sxth	r3, r3
 8001082:	4313      	orrs	r3, r2
 8001084:	b21b      	sxth	r3, r3
 8001086:	b29a      	uxth	r2, r3
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	815a      	strh	r2, [r3, #10]
    bmp->calib.dig_P2 = (int16_t)(calib[9] << 8 | calib[8]);
 800108c:	7c7b      	ldrb	r3, [r7, #17]
 800108e:	021b      	lsls	r3, r3, #8
 8001090:	b21a      	sxth	r2, r3
 8001092:	7c3b      	ldrb	r3, [r7, #16]
 8001094:	b21b      	sxth	r3, r3
 8001096:	4313      	orrs	r3, r2
 8001098:	b21a      	sxth	r2, r3
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	819a      	strh	r2, [r3, #12]
    bmp->calib.dig_P3 = (int16_t)(calib[11] << 8 | calib[10]);
 800109e:	7cfb      	ldrb	r3, [r7, #19]
 80010a0:	021b      	lsls	r3, r3, #8
 80010a2:	b21a      	sxth	r2, r3
 80010a4:	7cbb      	ldrb	r3, [r7, #18]
 80010a6:	b21b      	sxth	r3, r3
 80010a8:	4313      	orrs	r3, r2
 80010aa:	b21a      	sxth	r2, r3
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	81da      	strh	r2, [r3, #14]
    bmp->calib.dig_P4 = (int16_t)(calib[13] << 8 | calib[12]);
 80010b0:	7d7b      	ldrb	r3, [r7, #21]
 80010b2:	021b      	lsls	r3, r3, #8
 80010b4:	b21a      	sxth	r2, r3
 80010b6:	7d3b      	ldrb	r3, [r7, #20]
 80010b8:	b21b      	sxth	r3, r3
 80010ba:	4313      	orrs	r3, r2
 80010bc:	b21a      	sxth	r2, r3
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	821a      	strh	r2, [r3, #16]
    bmp->calib.dig_P5 = (int16_t)(calib[15] << 8 | calib[14]);
 80010c2:	7dfb      	ldrb	r3, [r7, #23]
 80010c4:	021b      	lsls	r3, r3, #8
 80010c6:	b21a      	sxth	r2, r3
 80010c8:	7dbb      	ldrb	r3, [r7, #22]
 80010ca:	b21b      	sxth	r3, r3
 80010cc:	4313      	orrs	r3, r2
 80010ce:	b21a      	sxth	r2, r3
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	825a      	strh	r2, [r3, #18]
    bmp->calib.dig_P6 = (int16_t)(calib[17] << 8 | calib[16]);
 80010d4:	7e7b      	ldrb	r3, [r7, #25]
 80010d6:	021b      	lsls	r3, r3, #8
 80010d8:	b21a      	sxth	r2, r3
 80010da:	7e3b      	ldrb	r3, [r7, #24]
 80010dc:	b21b      	sxth	r3, r3
 80010de:	4313      	orrs	r3, r2
 80010e0:	b21a      	sxth	r2, r3
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	829a      	strh	r2, [r3, #20]
    bmp->calib.dig_P7 = (int16_t)(calib[19] << 8 | calib[18]);
 80010e6:	7efb      	ldrb	r3, [r7, #27]
 80010e8:	021b      	lsls	r3, r3, #8
 80010ea:	b21a      	sxth	r2, r3
 80010ec:	7ebb      	ldrb	r3, [r7, #26]
 80010ee:	b21b      	sxth	r3, r3
 80010f0:	4313      	orrs	r3, r2
 80010f2:	b21a      	sxth	r2, r3
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	82da      	strh	r2, [r3, #22]
    bmp->calib.dig_P8 = (int16_t)(calib[21] << 8 | calib[20]);
 80010f8:	7f7b      	ldrb	r3, [r7, #29]
 80010fa:	021b      	lsls	r3, r3, #8
 80010fc:	b21a      	sxth	r2, r3
 80010fe:	7f3b      	ldrb	r3, [r7, #28]
 8001100:	b21b      	sxth	r3, r3
 8001102:	4313      	orrs	r3, r2
 8001104:	b21a      	sxth	r2, r3
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	831a      	strh	r2, [r3, #24]
    bmp->calib.dig_P9 = (int16_t)(calib[23] << 8 | calib[22]);
 800110a:	7ffb      	ldrb	r3, [r7, #31]
 800110c:	021b      	lsls	r3, r3, #8
 800110e:	b21a      	sxth	r2, r3
 8001110:	7fbb      	ldrb	r3, [r7, #30]
 8001112:	b21b      	sxth	r3, r3
 8001114:	4313      	orrs	r3, r2
 8001116:	b21a      	sxth	r2, r3
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	835a      	strh	r2, [r3, #26]
}
 800111c:	bf00      	nop
 800111e:	3720      	adds	r7, #32
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}

08001124 <bmp280_init>:

void bmp280_init(BMP280 *bmp, SPI_HandleTypeDef *hspi) {
 8001124:	b580      	push	{r7, lr}
 8001126:	b084      	sub	sp, #16
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
 800112c:	6039      	str	r1, [r7, #0]
	bmp->hspi = hspi;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	683a      	ldr	r2, [r7, #0]
 8001132:	601a      	str	r2, [r3, #0]

    // Reset the sensor
    uint8_t reset_cmd = BMP280_RESET_VALUE;
 8001134:	23b6      	movs	r3, #182	; 0xb6
 8001136:	73bb      	strb	r3, [r7, #14]
    BMP280_CS_LOW();
 8001138:	f7ff ff10 	bl	8000f5c <BMP280_CS_LOW>
    HAL_SPI_Transmit(bmp->hspi, &reset_cmd, 1, HAL_MAX_DELAY);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	6818      	ldr	r0, [r3, #0]
 8001140:	f107 010e 	add.w	r1, r7, #14
 8001144:	f04f 33ff 	mov.w	r3, #4294967295
 8001148:	2201      	movs	r2, #1
 800114a:	f002 ff90 	bl	800406e <HAL_SPI_Transmit>
    BMP280_CS_HIGH();
 800114e:	f7ff ff11 	bl	8000f74 <BMP280_CS_HIGH>

    // Wait for the reset to complete
    uint8_t status = 0;
 8001152:	2300      	movs	r3, #0
 8001154:	73fb      	strb	r3, [r7, #15]
    while (status & 0x01) {
 8001156:	e005      	b.n	8001164 <bmp280_init+0x40>
        status = bmp280_read_register(bmp, BMP280_STATUS);
 8001158:	21f3      	movs	r1, #243	; 0xf3
 800115a:	6878      	ldr	r0, [r7, #4]
 800115c:	f7ff ff16 	bl	8000f8c <bmp280_read_register>
 8001160:	4603      	mov	r3, r0
 8001162:	73fb      	strb	r3, [r7, #15]
    while (status & 0x01) {
 8001164:	7bfb      	ldrb	r3, [r7, #15]
 8001166:	f003 0301 	and.w	r3, r3, #1
 800116a:	2b00      	cmp	r3, #0
 800116c:	d1f4      	bne.n	8001158 <bmp280_init+0x34>
    }

    // Read calibration data
    bmp280_read_calibration_data(bmp);
 800116e:	6878      	ldr	r0, [r7, #4]
 8001170:	f7ff ff5b 	bl	800102a <bmp280_read_calibration_data>

    // Set the control measurement register to start measurements
    uint8_t ctrl_meas = 0x27; // Normal mode, temp and pressure oversampling x1
 8001174:	2327      	movs	r3, #39	; 0x27
 8001176:	737b      	strb	r3, [r7, #13]
    BMP280_CS_LOW();
 8001178:	f7ff fef0 	bl	8000f5c <BMP280_CS_LOW>
    HAL_SPI_Transmit(bmp->hspi, &ctrl_meas, 1, HAL_MAX_DELAY);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	6818      	ldr	r0, [r3, #0]
 8001180:	f107 010d 	add.w	r1, r7, #13
 8001184:	f04f 33ff 	mov.w	r3, #4294967295
 8001188:	2201      	movs	r2, #1
 800118a:	f002 ff70 	bl	800406e <HAL_SPI_Transmit>
    BMP280_CS_HIGH();
 800118e:	f7ff fef1 	bl	8000f74 <BMP280_CS_HIGH>
}
 8001192:	bf00      	nop
 8001194:	3710      	adds	r7, #16
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}

0800119a <bmp280_compensate_T_int32>:

int32_t bmp280_compensate_T_int32(BMP280 *bmp, int32_t adc_T) {
 800119a:	b480      	push	{r7}
 800119c:	b087      	sub	sp, #28
 800119e:	af00      	add	r7, sp, #0
 80011a0:	6078      	str	r0, [r7, #4]
 80011a2:	6039      	str	r1, [r7, #0]
    int32_t var1, var2, T;
    var1 = ((((adc_T >> 3) - ((int32_t)bmp->calib.dig_T1 << 1))) * ((int32_t)bmp->calib.dig_T2)) >> 11;
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	10da      	asrs	r2, r3, #3
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	889b      	ldrh	r3, [r3, #4]
 80011ac:	005b      	lsls	r3, r3, #1
 80011ae:	1ad3      	subs	r3, r2, r3
 80011b0:	687a      	ldr	r2, [r7, #4]
 80011b2:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 80011b6:	fb02 f303 	mul.w	r3, r2, r3
 80011ba:	12db      	asrs	r3, r3, #11
 80011bc:	617b      	str	r3, [r7, #20]
    var2 = (((((adc_T >> 4) - ((int32_t)bmp->calib.dig_T1)) * ((adc_T >> 4) - ((int32_t)bmp->calib.dig_T1))) >> 12) * ((int32_t)bmp->calib.dig_T3)) >> 14;
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	111b      	asrs	r3, r3, #4
 80011c2:	687a      	ldr	r2, [r7, #4]
 80011c4:	8892      	ldrh	r2, [r2, #4]
 80011c6:	1a9b      	subs	r3, r3, r2
 80011c8:	683a      	ldr	r2, [r7, #0]
 80011ca:	1112      	asrs	r2, r2, #4
 80011cc:	6879      	ldr	r1, [r7, #4]
 80011ce:	8889      	ldrh	r1, [r1, #4]
 80011d0:	1a52      	subs	r2, r2, r1
 80011d2:	fb02 f303 	mul.w	r3, r2, r3
 80011d6:	131b      	asrs	r3, r3, #12
 80011d8:	687a      	ldr	r2, [r7, #4]
 80011da:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 80011de:	fb02 f303 	mul.w	r3, r2, r3
 80011e2:	139b      	asrs	r3, r3, #14
 80011e4:	613b      	str	r3, [r7, #16]
    bmp->calib.t_fine = var1 + var2;
 80011e6:	697a      	ldr	r2, [r7, #20]
 80011e8:	693b      	ldr	r3, [r7, #16]
 80011ea:	441a      	add	r2, r3
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	61da      	str	r2, [r3, #28]
    T = (bmp->calib.t_fine * 5 + 128) >> 8;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	69da      	ldr	r2, [r3, #28]
 80011f4:	4613      	mov	r3, r2
 80011f6:	009b      	lsls	r3, r3, #2
 80011f8:	4413      	add	r3, r2
 80011fa:	3380      	adds	r3, #128	; 0x80
 80011fc:	121b      	asrs	r3, r3, #8
 80011fe:	60fb      	str	r3, [r7, #12]
    return T;
 8001200:	68fb      	ldr	r3, [r7, #12]
}
 8001202:	4618      	mov	r0, r3
 8001204:	371c      	adds	r7, #28
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr

0800120e <bmp280_compensate_P_int64>:

uint32_t bmp280_compensate_P_int64(BMP280 *bmp, int32_t adc_P) {
 800120e:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001212:	b0ca      	sub	sp, #296	; 0x128
 8001214:	af00      	add	r7, sp, #0
 8001216:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
 800121a:	f8c7 1108 	str.w	r1, [r7, #264]	; 0x108
    int64_t var1, var2, p;
    var1 = ((int64_t)bmp->calib.t_fine) - 128000;
 800121e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001222:	69db      	ldr	r3, [r3, #28]
 8001224:	17da      	asrs	r2, r3, #31
 8001226:	461c      	mov	r4, r3
 8001228:	4615      	mov	r5, r2
 800122a:	f5b4 3afa 	subs.w	sl, r4, #128000	; 0x1f400
 800122e:	f145 3bff 	adc.w	fp, r5, #4294967295
 8001232:	e9c7 ab48 	strd	sl, fp, [r7, #288]	; 0x120
    var2 = var1 * var1 * (int64_t)bmp->calib.dig_P6;
 8001236:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800123a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800123e:	fb03 f102 	mul.w	r1, r3, r2
 8001242:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8001246:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800124a:	fb02 f303 	mul.w	r3, r2, r3
 800124e:	18ca      	adds	r2, r1, r3
 8001250:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001254:	fba3 8903 	umull	r8, r9, r3, r3
 8001258:	eb02 0309 	add.w	r3, r2, r9
 800125c:	4699      	mov	r9, r3
 800125e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001262:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001266:	b21b      	sxth	r3, r3
 8001268:	17da      	asrs	r2, r3, #31
 800126a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800126e:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8001272:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8001276:	4603      	mov	r3, r0
 8001278:	fb03 f209 	mul.w	r2, r3, r9
 800127c:	460b      	mov	r3, r1
 800127e:	fb08 f303 	mul.w	r3, r8, r3
 8001282:	4413      	add	r3, r2
 8001284:	4602      	mov	r2, r0
 8001286:	fba8 1202 	umull	r1, r2, r8, r2
 800128a:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800128e:	460a      	mov	r2, r1
 8001290:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 8001294:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8001298:	4413      	add	r3, r2
 800129a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800129e:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 80012a2:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
 80012a6:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
    var2 = var2 + ((var1 * (int64_t)bmp->calib.dig_P5) << 17);
 80012aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80012ae:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80012b2:	b21b      	sxth	r3, r3
 80012b4:	17da      	asrs	r2, r3, #31
 80012b6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80012ba:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 80012be:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80012c2:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 80012c6:	462a      	mov	r2, r5
 80012c8:	fb02 f203 	mul.w	r2, r2, r3
 80012cc:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80012d0:	4621      	mov	r1, r4
 80012d2:	fb01 f303 	mul.w	r3, r1, r3
 80012d6:	441a      	add	r2, r3
 80012d8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80012dc:	4621      	mov	r1, r4
 80012de:	fba3 1301 	umull	r1, r3, r3, r1
 80012e2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80012e6:	460b      	mov	r3, r1
 80012e8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80012ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80012f0:	18d3      	adds	r3, r2, r3
 80012f2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80012f6:	f04f 0000 	mov.w	r0, #0
 80012fa:	f04f 0100 	mov.w	r1, #0
 80012fe:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 8001302:	462b      	mov	r3, r5
 8001304:	0459      	lsls	r1, r3, #17
 8001306:	4623      	mov	r3, r4
 8001308:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 800130c:	4623      	mov	r3, r4
 800130e:	0458      	lsls	r0, r3, #17
 8001310:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001314:	1814      	adds	r4, r2, r0
 8001316:	643c      	str	r4, [r7, #64]	; 0x40
 8001318:	414b      	adcs	r3, r1
 800131a:	647b      	str	r3, [r7, #68]	; 0x44
 800131c:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8001320:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
    var2 = var2 + (((int64_t)bmp->calib.dig_P4) << 35);
 8001324:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001328:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800132c:	b21b      	sxth	r3, r3
 800132e:	17da      	asrs	r2, r3, #31
 8001330:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001334:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8001338:	f04f 0000 	mov.w	r0, #0
 800133c:	f04f 0100 	mov.w	r1, #0
 8001340:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001344:	00d9      	lsls	r1, r3, #3
 8001346:	2000      	movs	r0, #0
 8001348:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800134c:	1814      	adds	r4, r2, r0
 800134e:	63bc      	str	r4, [r7, #56]	; 0x38
 8001350:	414b      	adcs	r3, r1
 8001352:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001354:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8001358:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
    var1 = ((var1 * var1 * (int64_t)bmp->calib.dig_P3) >> 8) + ((var1 * (int64_t)bmp->calib.dig_P2) << 12);
 800135c:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8001360:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001364:	fb03 f102 	mul.w	r1, r3, r2
 8001368:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800136c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001370:	fb02 f303 	mul.w	r3, r2, r3
 8001374:	18ca      	adds	r2, r1, r3
 8001376:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800137a:	fba3 1303 	umull	r1, r3, r3, r3
 800137e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8001382:	460b      	mov	r3, r1
 8001384:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8001388:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800138c:	18d3      	adds	r3, r2, r3
 800138e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8001392:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001396:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800139a:	b21b      	sxth	r3, r3
 800139c:	17da      	asrs	r2, r3, #31
 800139e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80013a2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80013a6:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	; 0xf8
 80013aa:	462b      	mov	r3, r5
 80013ac:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80013b0:	4642      	mov	r2, r8
 80013b2:	fb02 f203 	mul.w	r2, r2, r3
 80013b6:	464b      	mov	r3, r9
 80013b8:	4621      	mov	r1, r4
 80013ba:	fb01 f303 	mul.w	r3, r1, r3
 80013be:	4413      	add	r3, r2
 80013c0:	4622      	mov	r2, r4
 80013c2:	4641      	mov	r1, r8
 80013c4:	fba2 1201 	umull	r1, r2, r2, r1
 80013c8:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 80013cc:	460a      	mov	r2, r1
 80013ce:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 80013d2:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 80013d6:	4413      	add	r3, r2
 80013d8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80013dc:	f04f 0000 	mov.w	r0, #0
 80013e0:	f04f 0100 	mov.w	r1, #0
 80013e4:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	; 0xf0
 80013e8:	4623      	mov	r3, r4
 80013ea:	0a18      	lsrs	r0, r3, #8
 80013ec:	462b      	mov	r3, r5
 80013ee:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 80013f2:	462b      	mov	r3, r5
 80013f4:	1219      	asrs	r1, r3, #8
 80013f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80013fa:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80013fe:	b21b      	sxth	r3, r3
 8001400:	17da      	asrs	r2, r3, #31
 8001402:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001406:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800140a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800140e:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	; 0x98
 8001412:	464a      	mov	r2, r9
 8001414:	fb02 f203 	mul.w	r2, r2, r3
 8001418:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800141c:	4644      	mov	r4, r8
 800141e:	fb04 f303 	mul.w	r3, r4, r3
 8001422:	441a      	add	r2, r3
 8001424:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001428:	4644      	mov	r4, r8
 800142a:	fba3 4304 	umull	r4, r3, r3, r4
 800142e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8001432:	4623      	mov	r3, r4
 8001434:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001438:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800143c:	18d3      	adds	r3, r2, r3
 800143e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8001442:	f04f 0200 	mov.w	r2, #0
 8001446:	f04f 0300 	mov.w	r3, #0
 800144a:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 800144e:	464c      	mov	r4, r9
 8001450:	0323      	lsls	r3, r4, #12
 8001452:	4644      	mov	r4, r8
 8001454:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8001458:	4644      	mov	r4, r8
 800145a:	0322      	lsls	r2, r4, #12
 800145c:	1884      	adds	r4, r0, r2
 800145e:	633c      	str	r4, [r7, #48]	; 0x30
 8001460:	eb41 0303 	adc.w	r3, r1, r3
 8001464:	637b      	str	r3, [r7, #52]	; 0x34
 8001466:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 800146a:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
    var1 = (((((int64_t)1) << 47) + var1)) * ((int64_t)bmp->calib.dig_P1) >> 33;
 800146e:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001472:	f503 4100 	add.w	r1, r3, #32768	; 0x8000
 8001476:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 800147a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800147e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001482:	895b      	ldrh	r3, [r3, #10]
 8001484:	b29b      	uxth	r3, r3
 8001486:	2200      	movs	r2, #0
 8001488:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800148c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001490:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001494:	462b      	mov	r3, r5
 8001496:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800149a:	4642      	mov	r2, r8
 800149c:	fb02 f203 	mul.w	r2, r2, r3
 80014a0:	464b      	mov	r3, r9
 80014a2:	4621      	mov	r1, r4
 80014a4:	fb01 f303 	mul.w	r3, r1, r3
 80014a8:	4413      	add	r3, r2
 80014aa:	4622      	mov	r2, r4
 80014ac:	4641      	mov	r1, r8
 80014ae:	fba2 1201 	umull	r1, r2, r2, r1
 80014b2:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 80014b6:	460a      	mov	r2, r1
 80014b8:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 80014bc:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80014c0:	4413      	add	r3, r2
 80014c2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80014c6:	f04f 0200 	mov.w	r2, #0
 80014ca:	f04f 0300 	mov.w	r3, #0
 80014ce:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 80014d2:	4629      	mov	r1, r5
 80014d4:	104a      	asrs	r2, r1, #1
 80014d6:	4629      	mov	r1, r5
 80014d8:	17cb      	asrs	r3, r1, #31
 80014da:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
    if (var1 == 0) {
 80014de:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 80014e2:	4313      	orrs	r3, r2
 80014e4:	d101      	bne.n	80014ea <bmp280_compensate_P_int64+0x2dc>
        return 0; // Avoid exception caused by division by zero
 80014e6:	2300      	movs	r3, #0
 80014e8:	e148      	b.n	800177c <bmp280_compensate_P_int64+0x56e>
    }
    p = 1048576 - adc_P;
 80014ea:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80014ee:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 80014f2:	17da      	asrs	r2, r3, #31
 80014f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80014f6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80014f8:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 80014fc:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
    p = (((p << 31) - var2) * 3125) / var1;
 8001500:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001504:	105b      	asrs	r3, r3, #1
 8001506:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800150a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800150e:	07db      	lsls	r3, r3, #31
 8001510:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001514:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001518:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 800151c:	4621      	mov	r1, r4
 800151e:	1a89      	subs	r1, r1, r2
 8001520:	67b9      	str	r1, [r7, #120]	; 0x78
 8001522:	4629      	mov	r1, r5
 8001524:	eb61 0303 	sbc.w	r3, r1, r3
 8001528:	67fb      	str	r3, [r7, #124]	; 0x7c
 800152a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800152e:	4622      	mov	r2, r4
 8001530:	462b      	mov	r3, r5
 8001532:	1891      	adds	r1, r2, r2
 8001534:	6239      	str	r1, [r7, #32]
 8001536:	415b      	adcs	r3, r3
 8001538:	627b      	str	r3, [r7, #36]	; 0x24
 800153a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800153e:	4621      	mov	r1, r4
 8001540:	1851      	adds	r1, r2, r1
 8001542:	61b9      	str	r1, [r7, #24]
 8001544:	4629      	mov	r1, r5
 8001546:	414b      	adcs	r3, r1
 8001548:	61fb      	str	r3, [r7, #28]
 800154a:	f04f 0200 	mov.w	r2, #0
 800154e:	f04f 0300 	mov.w	r3, #0
 8001552:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8001556:	4649      	mov	r1, r9
 8001558:	018b      	lsls	r3, r1, #6
 800155a:	4641      	mov	r1, r8
 800155c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001560:	4641      	mov	r1, r8
 8001562:	018a      	lsls	r2, r1, #6
 8001564:	4641      	mov	r1, r8
 8001566:	1889      	adds	r1, r1, r2
 8001568:	6139      	str	r1, [r7, #16]
 800156a:	4649      	mov	r1, r9
 800156c:	eb43 0101 	adc.w	r1, r3, r1
 8001570:	6179      	str	r1, [r7, #20]
 8001572:	f04f 0200 	mov.w	r2, #0
 8001576:	f04f 0300 	mov.w	r3, #0
 800157a:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 800157e:	4649      	mov	r1, r9
 8001580:	008b      	lsls	r3, r1, #2
 8001582:	4641      	mov	r1, r8
 8001584:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001588:	4641      	mov	r1, r8
 800158a:	008a      	lsls	r2, r1, #2
 800158c:	4610      	mov	r0, r2
 800158e:	4619      	mov	r1, r3
 8001590:	4603      	mov	r3, r0
 8001592:	4622      	mov	r2, r4
 8001594:	189b      	adds	r3, r3, r2
 8001596:	60bb      	str	r3, [r7, #8]
 8001598:	460b      	mov	r3, r1
 800159a:	462a      	mov	r2, r5
 800159c:	eb42 0303 	adc.w	r3, r2, r3
 80015a0:	60fb      	str	r3, [r7, #12]
 80015a2:	f04f 0200 	mov.w	r2, #0
 80015a6:	f04f 0300 	mov.w	r3, #0
 80015aa:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 80015ae:	4649      	mov	r1, r9
 80015b0:	008b      	lsls	r3, r1, #2
 80015b2:	4641      	mov	r1, r8
 80015b4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80015b8:	4641      	mov	r1, r8
 80015ba:	008a      	lsls	r2, r1, #2
 80015bc:	4610      	mov	r0, r2
 80015be:	4619      	mov	r1, r3
 80015c0:	4603      	mov	r3, r0
 80015c2:	4622      	mov	r2, r4
 80015c4:	189b      	adds	r3, r3, r2
 80015c6:	673b      	str	r3, [r7, #112]	; 0x70
 80015c8:	462b      	mov	r3, r5
 80015ca:	460a      	mov	r2, r1
 80015cc:	eb42 0303 	adc.w	r3, r2, r3
 80015d0:	677b      	str	r3, [r7, #116]	; 0x74
 80015d2:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 80015d6:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80015da:	f7ff faed 	bl	8000bb8 <__aeabi_ldivmod>
 80015de:	4602      	mov	r2, r0
 80015e0:	460b      	mov	r3, r1
 80015e2:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
    var1 = (((int64_t)bmp->calib.dig_P9) * (p >> 13) * (p >> 13)) >> 25;
 80015e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80015ea:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 80015ee:	b21b      	sxth	r3, r3
 80015f0:	17da      	asrs	r2, r3, #31
 80015f2:	66bb      	str	r3, [r7, #104]	; 0x68
 80015f4:	66fa      	str	r2, [r7, #108]	; 0x6c
 80015f6:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 80015fa:	f04f 0000 	mov.w	r0, #0
 80015fe:	f04f 0100 	mov.w	r1, #0
 8001602:	0b50      	lsrs	r0, r2, #13
 8001604:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001608:	1359      	asrs	r1, r3, #13
 800160a:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 800160e:	462b      	mov	r3, r5
 8001610:	fb00 f203 	mul.w	r2, r0, r3
 8001614:	4623      	mov	r3, r4
 8001616:	fb03 f301 	mul.w	r3, r3, r1
 800161a:	4413      	add	r3, r2
 800161c:	4622      	mov	r2, r4
 800161e:	fba2 1200 	umull	r1, r2, r2, r0
 8001622:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8001626:	460a      	mov	r2, r1
 8001628:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 800162c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8001630:	4413      	add	r3, r2
 8001632:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8001636:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800163a:	f04f 0000 	mov.w	r0, #0
 800163e:	f04f 0100 	mov.w	r1, #0
 8001642:	0b50      	lsrs	r0, r2, #13
 8001644:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001648:	1359      	asrs	r1, r3, #13
 800164a:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 800164e:	462b      	mov	r3, r5
 8001650:	fb00 f203 	mul.w	r2, r0, r3
 8001654:	4623      	mov	r3, r4
 8001656:	fb03 f301 	mul.w	r3, r3, r1
 800165a:	4413      	add	r3, r2
 800165c:	4622      	mov	r2, r4
 800165e:	fba2 1200 	umull	r1, r2, r2, r0
 8001662:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8001666:	460a      	mov	r2, r1
 8001668:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 800166c:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8001670:	4413      	add	r3, r2
 8001672:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8001676:	f04f 0200 	mov.w	r2, #0
 800167a:	f04f 0300 	mov.w	r3, #0
 800167e:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8001682:	4621      	mov	r1, r4
 8001684:	0e4a      	lsrs	r2, r1, #25
 8001686:	4629      	mov	r1, r5
 8001688:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 800168c:	4629      	mov	r1, r5
 800168e:	164b      	asrs	r3, r1, #25
 8001690:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
    var2 = (((int64_t)bmp->calib.dig_P8) * p) >> 19;
 8001694:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001698:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 800169c:	b21b      	sxth	r3, r3
 800169e:	17da      	asrs	r2, r3, #31
 80016a0:	663b      	str	r3, [r7, #96]	; 0x60
 80016a2:	667a      	str	r2, [r7, #100]	; 0x64
 80016a4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80016a8:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80016ac:	462a      	mov	r2, r5
 80016ae:	fb02 f203 	mul.w	r2, r2, r3
 80016b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80016b6:	4621      	mov	r1, r4
 80016b8:	fb01 f303 	mul.w	r3, r1, r3
 80016bc:	4413      	add	r3, r2
 80016be:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 80016c2:	4621      	mov	r1, r4
 80016c4:	fba2 1201 	umull	r1, r2, r2, r1
 80016c8:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 80016cc:	460a      	mov	r2, r1
 80016ce:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 80016d2:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 80016d6:	4413      	add	r3, r2
 80016d8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80016dc:	f04f 0200 	mov.w	r2, #0
 80016e0:	f04f 0300 	mov.w	r3, #0
 80016e4:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 80016e8:	4621      	mov	r1, r4
 80016ea:	0cca      	lsrs	r2, r1, #19
 80016ec:	4629      	mov	r1, r5
 80016ee:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 80016f2:	4629      	mov	r1, r5
 80016f4:	14cb      	asrs	r3, r1, #19
 80016f6:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
    p = ((p + var1 + var2) >> 8) + (((int64_t)bmp->calib.dig_P7) << 4);
 80016fa:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 80016fe:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001702:	1884      	adds	r4, r0, r2
 8001704:	65bc      	str	r4, [r7, #88]	; 0x58
 8001706:	eb41 0303 	adc.w	r3, r1, r3
 800170a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800170c:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001710:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8001714:	4621      	mov	r1, r4
 8001716:	1889      	adds	r1, r1, r2
 8001718:	6539      	str	r1, [r7, #80]	; 0x50
 800171a:	4629      	mov	r1, r5
 800171c:	eb43 0101 	adc.w	r1, r3, r1
 8001720:	6579      	str	r1, [r7, #84]	; 0x54
 8001722:	f04f 0000 	mov.w	r0, #0
 8001726:	f04f 0100 	mov.w	r1, #0
 800172a:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 800172e:	4623      	mov	r3, r4
 8001730:	0a18      	lsrs	r0, r3, #8
 8001732:	462b      	mov	r3, r5
 8001734:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001738:	462b      	mov	r3, r5
 800173a:	1219      	asrs	r1, r3, #8
 800173c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001740:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001744:	b21b      	sxth	r3, r3
 8001746:	17da      	asrs	r2, r3, #31
 8001748:	64bb      	str	r3, [r7, #72]	; 0x48
 800174a:	64fa      	str	r2, [r7, #76]	; 0x4c
 800174c:	f04f 0200 	mov.w	r2, #0
 8001750:	f04f 0300 	mov.w	r3, #0
 8001754:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	; 0x48
 8001758:	464c      	mov	r4, r9
 800175a:	0123      	lsls	r3, r4, #4
 800175c:	4644      	mov	r4, r8
 800175e:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8001762:	4644      	mov	r4, r8
 8001764:	0122      	lsls	r2, r4, #4
 8001766:	1884      	adds	r4, r0, r2
 8001768:	603c      	str	r4, [r7, #0]
 800176a:	eb41 0303 	adc.w	r3, r1, r3
 800176e:	607b      	str	r3, [r7, #4]
 8001770:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001774:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
    return (uint32_t)p;
 8001778:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
}
 800177c:	4618      	mov	r0, r3
 800177e:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8001782:	46bd      	mov	sp, r7
 8001784:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08001788 <bmp280_read_temperature_and_pressure>:

void bmp280_read_temperature_and_pressure(BMP280 *bmp, int32_t *temperature, uint32_t *pressure) {
 8001788:	b580      	push	{r7, lr}
 800178a:	b088      	sub	sp, #32
 800178c:	af00      	add	r7, sp, #0
 800178e:	60f8      	str	r0, [r7, #12]
 8001790:	60b9      	str	r1, [r7, #8]
 8001792:	607a      	str	r2, [r7, #4]
    uint8_t data[6];
    bmp280_read_registers(bmp, BMP280_PRESS_MSB, data, 6);
 8001794:	f107 0210 	add.w	r2, r7, #16
 8001798:	2306      	movs	r3, #6
 800179a:	21f7      	movs	r1, #247	; 0xf7
 800179c:	68f8      	ldr	r0, [r7, #12]
 800179e:	f7ff fc1b 	bl	8000fd8 <bmp280_read_registers>

    int32_t adc_P = (int32_t)(((uint32_t)(data[0]) << 12) | ((uint32_t)(data[1]) << 4) | ((uint32_t)data[2] >> 4));
 80017a2:	7c3b      	ldrb	r3, [r7, #16]
 80017a4:	031a      	lsls	r2, r3, #12
 80017a6:	7c7b      	ldrb	r3, [r7, #17]
 80017a8:	011b      	lsls	r3, r3, #4
 80017aa:	4313      	orrs	r3, r2
 80017ac:	7cba      	ldrb	r2, [r7, #18]
 80017ae:	0912      	lsrs	r2, r2, #4
 80017b0:	b2d2      	uxtb	r2, r2
 80017b2:	4313      	orrs	r3, r2
 80017b4:	61fb      	str	r3, [r7, #28]
    int32_t adc_T = (int32_t)(((uint32_t)(data[3]) << 12) | ((uint32_t)(data[4]) << 4) | ((uint32_t)data[5] >> 4));
 80017b6:	7cfb      	ldrb	r3, [r7, #19]
 80017b8:	031a      	lsls	r2, r3, #12
 80017ba:	7d3b      	ldrb	r3, [r7, #20]
 80017bc:	011b      	lsls	r3, r3, #4
 80017be:	4313      	orrs	r3, r2
 80017c0:	7d7a      	ldrb	r2, [r7, #21]
 80017c2:	0912      	lsrs	r2, r2, #4
 80017c4:	b2d2      	uxtb	r2, r2
 80017c6:	4313      	orrs	r3, r2
 80017c8:	61bb      	str	r3, [r7, #24]

    *temperature = bmp280_compensate_T_int32(bmp, adc_T);
 80017ca:	69b9      	ldr	r1, [r7, #24]
 80017cc:	68f8      	ldr	r0, [r7, #12]
 80017ce:	f7ff fce4 	bl	800119a <bmp280_compensate_T_int32>
 80017d2:	4602      	mov	r2, r0
 80017d4:	68bb      	ldr	r3, [r7, #8]
 80017d6:	601a      	str	r2, [r3, #0]
    *pressure = bmp280_compensate_P_int64(bmp, adc_P);
 80017d8:	69f9      	ldr	r1, [r7, #28]
 80017da:	68f8      	ldr	r0, [r7, #12]
 80017dc:	f7ff fd17 	bl	800120e <bmp280_compensate_P_int64>
 80017e0:	4602      	mov	r2, r0
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	601a      	str	r2, [r3, #0]
}
 80017e6:	bf00      	nop
 80017e8:	3720      	adds	r7, #32
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
	...

080017f0 <SELECT>:
/***************************************
 * SPI functions
 **************************************/
/* slave select */
static void SELECT(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 80017f4:	2200      	movs	r2, #0
 80017f6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80017fa:	4804      	ldr	r0, [pc, #16]	; (800180c <SELECT+0x1c>)
 80017fc:	f001 ff3c 	bl	8003678 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8001800:	2001      	movs	r0, #1
 8001802:	f001 fcab 	bl	800315c <HAL_Delay>
}
 8001806:	bf00      	nop
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	40020400 	.word	0x40020400

08001810 <DESELECT>:
/* slave deselect */
static void DESELECT(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8001814:	2201      	movs	r2, #1
 8001816:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800181a:	4804      	ldr	r0, [pc, #16]	; (800182c <DESELECT+0x1c>)
 800181c:	f001 ff2c 	bl	8003678 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8001820:	2001      	movs	r0, #1
 8001822:	f001 fc9b 	bl	800315c <HAL_Delay>
}
 8001826:	bf00      	nop
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	40020400 	.word	0x40020400

08001830 <SPI_TxByte>:
/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b082      	sub	sp, #8
 8001834:	af00      	add	r7, sp, #0
 8001836:	4603      	mov	r3, r0
 8001838:	71fb      	strb	r3, [r7, #7]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800183a:	bf00      	nop
 800183c:	4b08      	ldr	r3, [pc, #32]	; (8001860 <SPI_TxByte+0x30>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	689b      	ldr	r3, [r3, #8]
 8001842:	f003 0302 	and.w	r3, r3, #2
 8001846:	2b02      	cmp	r3, #2
 8001848:	d1f8      	bne.n	800183c <SPI_TxByte+0xc>
  HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 800184a:	1df9      	adds	r1, r7, #7
 800184c:	2364      	movs	r3, #100	; 0x64
 800184e:	2201      	movs	r2, #1
 8001850:	4803      	ldr	r0, [pc, #12]	; (8001860 <SPI_TxByte+0x30>)
 8001852:	f002 fc0c 	bl	800406e <HAL_SPI_Transmit>
}
 8001856:	bf00      	nop
 8001858:	3708      	adds	r7, #8
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	20000280 	.word	0x20000280

08001864 <SPI_TxBuffer>:
/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b082      	sub	sp, #8
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
 800186c:	460b      	mov	r3, r1
 800186e:	807b      	strh	r3, [r7, #2]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001870:	bf00      	nop
 8001872:	4b08      	ldr	r3, [pc, #32]	; (8001894 <SPI_TxBuffer+0x30>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	689b      	ldr	r3, [r3, #8]
 8001878:	f003 0302 	and.w	r3, r3, #2
 800187c:	2b02      	cmp	r3, #2
 800187e:	d1f8      	bne.n	8001872 <SPI_TxBuffer+0xe>
  HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8001880:	887a      	ldrh	r2, [r7, #2]
 8001882:	2364      	movs	r3, #100	; 0x64
 8001884:	6879      	ldr	r1, [r7, #4]
 8001886:	4803      	ldr	r0, [pc, #12]	; (8001894 <SPI_TxBuffer+0x30>)
 8001888:	f002 fbf1 	bl	800406e <HAL_SPI_Transmit>
}
 800188c:	bf00      	nop
 800188e:	3708      	adds	r7, #8
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}
 8001894:	20000280 	.word	0x20000280

08001898 <SPI_RxByte>:
/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b084      	sub	sp, #16
 800189c:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 800189e:	23ff      	movs	r3, #255	; 0xff
 80018a0:	71fb      	strb	r3, [r7, #7]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80018a2:	bf00      	nop
 80018a4:	4b09      	ldr	r3, [pc, #36]	; (80018cc <SPI_RxByte+0x34>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	689b      	ldr	r3, [r3, #8]
 80018aa:	f003 0302 	and.w	r3, r3, #2
 80018ae:	2b02      	cmp	r3, #2
 80018b0:	d1f8      	bne.n	80018a4 <SPI_RxByte+0xc>
  HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 80018b2:	1dba      	adds	r2, r7, #6
 80018b4:	1df9      	adds	r1, r7, #7
 80018b6:	2364      	movs	r3, #100	; 0x64
 80018b8:	9300      	str	r3, [sp, #0]
 80018ba:	2301      	movs	r3, #1
 80018bc:	4803      	ldr	r0, [pc, #12]	; (80018cc <SPI_RxByte+0x34>)
 80018be:	f002 fe23 	bl	8004508 <HAL_SPI_TransmitReceive>
  return data;
 80018c2:	79bb      	ldrb	r3, [r7, #6]
}
 80018c4:	4618      	mov	r0, r3
 80018c6:	3708      	adds	r7, #8
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	20000280 	.word	0x20000280

080018d0 <SPI_RxBytePtr>:
/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b082      	sub	sp, #8
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 80018d8:	f7ff ffde 	bl	8001898 <SPI_RxByte>
 80018dc:	4603      	mov	r3, r0
 80018de:	461a      	mov	r2, r3
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	701a      	strb	r2, [r3, #0]
}
 80018e4:	bf00      	nop
 80018e6:	3708      	adds	r7, #8
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}

080018ec <SD_ReadyWait>:
/***************************************
 * SD functions
 **************************************/
/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b082      	sub	sp, #8
 80018f0:	af00      	add	r7, sp, #0
  uint8_t res;
  /* timeout 500ms */
  Timer2 = 500;
 80018f2:	4b0a      	ldr	r3, [pc, #40]	; (800191c <SD_ReadyWait+0x30>)
 80018f4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80018f8:	801a      	strh	r2, [r3, #0]
  /* if SD goes ready, receives 0xFF */
  do {
    res = SPI_RxByte();
 80018fa:	f7ff ffcd 	bl	8001898 <SPI_RxByte>
 80018fe:	4603      	mov	r3, r0
 8001900:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 8001902:	79fb      	ldrb	r3, [r7, #7]
 8001904:	2bff      	cmp	r3, #255	; 0xff
 8001906:	d003      	beq.n	8001910 <SD_ReadyWait+0x24>
 8001908:	4b04      	ldr	r3, [pc, #16]	; (800191c <SD_ReadyWait+0x30>)
 800190a:	881b      	ldrh	r3, [r3, #0]
 800190c:	2b00      	cmp	r3, #0
 800190e:	d1f4      	bne.n	80018fa <SD_ReadyWait+0xe>
  return res;
 8001910:	79fb      	ldrb	r3, [r7, #7]
}
 8001912:	4618      	mov	r0, r3
 8001914:	3708      	adds	r7, #8
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	20000212 	.word	0x20000212

08001920 <SD_PowerOn>:
/* power on */
static void SD_PowerOn(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b084      	sub	sp, #16
 8001924:	af00      	add	r7, sp, #0
  uint8_t args[6];
  uint32_t cnt = 0x1FFF;
 8001926:	f641 73ff 	movw	r3, #8191	; 0x1fff
 800192a:	60fb      	str	r3, [r7, #12]
  /* transmit bytes to wake up */
  DESELECT();
 800192c:	f7ff ff70 	bl	8001810 <DESELECT>
  for(int i = 0; i < 10; i++)
 8001930:	2300      	movs	r3, #0
 8001932:	60bb      	str	r3, [r7, #8]
 8001934:	e005      	b.n	8001942 <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 8001936:	20ff      	movs	r0, #255	; 0xff
 8001938:	f7ff ff7a 	bl	8001830 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 800193c:	68bb      	ldr	r3, [r7, #8]
 800193e:	3301      	adds	r3, #1
 8001940:	60bb      	str	r3, [r7, #8]
 8001942:	68bb      	ldr	r3, [r7, #8]
 8001944:	2b09      	cmp	r3, #9
 8001946:	ddf6      	ble.n	8001936 <SD_PowerOn+0x16>
  }
  /* slave select */
  SELECT();
 8001948:	f7ff ff52 	bl	80017f0 <SELECT>
  /* make idle state */
  args[0] = CMD0;   /* CMD0:GO_IDLE_STATE */
 800194c:	2340      	movs	r3, #64	; 0x40
 800194e:	703b      	strb	r3, [r7, #0]
  args[1] = 0;
 8001950:	2300      	movs	r3, #0
 8001952:	707b      	strb	r3, [r7, #1]
  args[2] = 0;
 8001954:	2300      	movs	r3, #0
 8001956:	70bb      	strb	r3, [r7, #2]
  args[3] = 0;
 8001958:	2300      	movs	r3, #0
 800195a:	70fb      	strb	r3, [r7, #3]
  args[4] = 0;
 800195c:	2300      	movs	r3, #0
 800195e:	713b      	strb	r3, [r7, #4]
  args[5] = 0x95;   /* CRC */
 8001960:	2395      	movs	r3, #149	; 0x95
 8001962:	717b      	strb	r3, [r7, #5]
  SPI_TxBuffer(args, sizeof(args));
 8001964:	463b      	mov	r3, r7
 8001966:	2106      	movs	r1, #6
 8001968:	4618      	mov	r0, r3
 800196a:	f7ff ff7b 	bl	8001864 <SPI_TxBuffer>
  /* wait response */
  while ((SPI_RxByte() != 0x01) && cnt)
 800196e:	e002      	b.n	8001976 <SD_PowerOn+0x56>
  {
    cnt--;
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	3b01      	subs	r3, #1
 8001974:	60fb      	str	r3, [r7, #12]
  while ((SPI_RxByte() != 0x01) && cnt)
 8001976:	f7ff ff8f 	bl	8001898 <SPI_RxByte>
 800197a:	4603      	mov	r3, r0
 800197c:	2b01      	cmp	r3, #1
 800197e:	d002      	beq.n	8001986 <SD_PowerOn+0x66>
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d1f4      	bne.n	8001970 <SD_PowerOn+0x50>
  }
  DESELECT();
 8001986:	f7ff ff43 	bl	8001810 <DESELECT>
  SPI_TxByte(0XFF);
 800198a:	20ff      	movs	r0, #255	; 0xff
 800198c:	f7ff ff50 	bl	8001830 <SPI_TxByte>
  PowerFlag = 1;
 8001990:	4b03      	ldr	r3, [pc, #12]	; (80019a0 <SD_PowerOn+0x80>)
 8001992:	2201      	movs	r2, #1
 8001994:	701a      	strb	r2, [r3, #0]
}
 8001996:	bf00      	nop
 8001998:	3710      	adds	r7, #16
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	20000215 	.word	0x20000215

080019a4 <SD_PowerOff>:
/* power off */
static void SD_PowerOff(void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 80019a8:	4b03      	ldr	r3, [pc, #12]	; (80019b8 <SD_PowerOff+0x14>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	701a      	strb	r2, [r3, #0]
}
 80019ae:	bf00      	nop
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr
 80019b8:	20000215 	.word	0x20000215

080019bc <SD_CheckPower>:
/* check power flag */
static uint8_t SD_CheckPower(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0
  return PowerFlag;
 80019c0:	4b03      	ldr	r3, [pc, #12]	; (80019d0 <SD_CheckPower+0x14>)
 80019c2:	781b      	ldrb	r3, [r3, #0]
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	46bd      	mov	sp, r7
 80019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019cc:	4770      	bx	lr
 80019ce:	bf00      	nop
 80019d0:	20000215 	.word	0x20000215

080019d4 <SD_RxDataBlock>:
/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b084      	sub	sp, #16
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
 80019dc:	6039      	str	r1, [r7, #0]
  uint8_t token;
  /* timeout 200ms */
  Timer1 = 200;
 80019de:	4b13      	ldr	r3, [pc, #76]	; (8001a2c <SD_RxDataBlock+0x58>)
 80019e0:	22c8      	movs	r2, #200	; 0xc8
 80019e2:	801a      	strh	r2, [r3, #0]
  /* loop until receive a response or timeout */
  do {
    token = SPI_RxByte();
 80019e4:	f7ff ff58 	bl	8001898 <SPI_RxByte>
 80019e8:	4603      	mov	r3, r0
 80019ea:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 80019ec:	7bfb      	ldrb	r3, [r7, #15]
 80019ee:	2bff      	cmp	r3, #255	; 0xff
 80019f0:	d103      	bne.n	80019fa <SD_RxDataBlock+0x26>
 80019f2:	4b0e      	ldr	r3, [pc, #56]	; (8001a2c <SD_RxDataBlock+0x58>)
 80019f4:	881b      	ldrh	r3, [r3, #0]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d1f4      	bne.n	80019e4 <SD_RxDataBlock+0x10>
  /* invalid response */
  if(token != 0xFE) return FALSE;
 80019fa:	7bfb      	ldrb	r3, [r7, #15]
 80019fc:	2bfe      	cmp	r3, #254	; 0xfe
 80019fe:	d001      	beq.n	8001a04 <SD_RxDataBlock+0x30>
 8001a00:	2300      	movs	r3, #0
 8001a02:	e00f      	b.n	8001a24 <SD_RxDataBlock+0x50>
  /* receive data */
  do {
    SPI_RxBytePtr(buff++);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	1c5a      	adds	r2, r3, #1
 8001a08:	607a      	str	r2, [r7, #4]
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f7ff ff60 	bl	80018d0 <SPI_RxBytePtr>
  } while(len--);
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	1e5a      	subs	r2, r3, #1
 8001a14:	603a      	str	r2, [r7, #0]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d1f4      	bne.n	8001a04 <SD_RxDataBlock+0x30>
  /* discard CRC */
  SPI_RxByte();
 8001a1a:	f7ff ff3d 	bl	8001898 <SPI_RxByte>
  SPI_RxByte();
 8001a1e:	f7ff ff3b 	bl	8001898 <SPI_RxByte>
  return TRUE;
 8001a22:	2301      	movs	r3, #1
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	3710      	adds	r7, #16
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	20000210 	.word	0x20000210

08001a30 <SD_TxDataBlock>:
/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b084      	sub	sp, #16
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
 8001a38:	460b      	mov	r3, r1
 8001a3a:	70fb      	strb	r3, [r7, #3]
  uint8_t resp;
  uint8_t i = 0;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	73bb      	strb	r3, [r7, #14]
  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return FALSE;
 8001a40:	f7ff ff54 	bl	80018ec <SD_ReadyWait>
 8001a44:	4603      	mov	r3, r0
 8001a46:	2bff      	cmp	r3, #255	; 0xff
 8001a48:	d001      	beq.n	8001a4e <SD_TxDataBlock+0x1e>
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	e02f      	b.n	8001aae <SD_TxDataBlock+0x7e>
  /* transmit token */
  SPI_TxByte(token);
 8001a4e:	78fb      	ldrb	r3, [r7, #3]
 8001a50:	4618      	mov	r0, r3
 8001a52:	f7ff feed 	bl	8001830 <SPI_TxByte>
  /* if it's not STOP token, transmit data */
  if (token != 0xFD)
 8001a56:	78fb      	ldrb	r3, [r7, #3]
 8001a58:	2bfd      	cmp	r3, #253	; 0xfd
 8001a5a:	d020      	beq.n	8001a9e <SD_TxDataBlock+0x6e>
  {
    SPI_TxBuffer((uint8_t*)buff, 512);
 8001a5c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001a60:	6878      	ldr	r0, [r7, #4]
 8001a62:	f7ff feff 	bl	8001864 <SPI_TxBuffer>
    /* discard CRC */
    SPI_RxByte();
 8001a66:	f7ff ff17 	bl	8001898 <SPI_RxByte>
    SPI_RxByte();
 8001a6a:	f7ff ff15 	bl	8001898 <SPI_RxByte>
    /* receive response */
    while (i <= 64)
 8001a6e:	e00b      	b.n	8001a88 <SD_TxDataBlock+0x58>
    {
      resp = SPI_RxByte();
 8001a70:	f7ff ff12 	bl	8001898 <SPI_RxByte>
 8001a74:	4603      	mov	r3, r0
 8001a76:	73fb      	strb	r3, [r7, #15]
      /* transmit 0x05 accepted */
      if ((resp & 0x1F) == 0x05) break;
 8001a78:	7bfb      	ldrb	r3, [r7, #15]
 8001a7a:	f003 031f 	and.w	r3, r3, #31
 8001a7e:	2b05      	cmp	r3, #5
 8001a80:	d006      	beq.n	8001a90 <SD_TxDataBlock+0x60>
      i++;
 8001a82:	7bbb      	ldrb	r3, [r7, #14]
 8001a84:	3301      	adds	r3, #1
 8001a86:	73bb      	strb	r3, [r7, #14]
    while (i <= 64)
 8001a88:	7bbb      	ldrb	r3, [r7, #14]
 8001a8a:	2b40      	cmp	r3, #64	; 0x40
 8001a8c:	d9f0      	bls.n	8001a70 <SD_TxDataBlock+0x40>
 8001a8e:	e000      	b.n	8001a92 <SD_TxDataBlock+0x62>
      if ((resp & 0x1F) == 0x05) break;
 8001a90:	bf00      	nop
    }
    /* recv buffer clear */
    while (SPI_RxByte() == 0);
 8001a92:	bf00      	nop
 8001a94:	f7ff ff00 	bl	8001898 <SPI_RxByte>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d0fa      	beq.n	8001a94 <SD_TxDataBlock+0x64>
  }
  /* transmit 0x05 accepted */
  if ((resp & 0x1F) == 0x05) return TRUE;
 8001a9e:	7bfb      	ldrb	r3, [r7, #15]
 8001aa0:	f003 031f 	and.w	r3, r3, #31
 8001aa4:	2b05      	cmp	r3, #5
 8001aa6:	d101      	bne.n	8001aac <SD_TxDataBlock+0x7c>
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	e000      	b.n	8001aae <SD_TxDataBlock+0x7e>
  return FALSE;
 8001aac:	2300      	movs	r3, #0
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	3710      	adds	r7, #16
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}

08001ab6 <SD_SendCmd>:
#endif /* _USE_WRITE */
/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8001ab6:	b580      	push	{r7, lr}
 8001ab8:	b084      	sub	sp, #16
 8001aba:	af00      	add	r7, sp, #0
 8001abc:	4603      	mov	r3, r0
 8001abe:	6039      	str	r1, [r7, #0]
 8001ac0:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;
  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return 0xFF;
 8001ac2:	f7ff ff13 	bl	80018ec <SD_ReadyWait>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	2bff      	cmp	r3, #255	; 0xff
 8001aca:	d001      	beq.n	8001ad0 <SD_SendCmd+0x1a>
 8001acc:	23ff      	movs	r3, #255	; 0xff
 8001ace:	e042      	b.n	8001b56 <SD_SendCmd+0xa0>
  /* transmit command */
  SPI_TxByte(cmd);          /* Command */
 8001ad0:	79fb      	ldrb	r3, [r7, #7]
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f7ff feac 	bl	8001830 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 24));   /* Argument[31..24] */
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	0e1b      	lsrs	r3, r3, #24
 8001adc:	b2db      	uxtb	r3, r3
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f7ff fea6 	bl	8001830 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 16));   /* Argument[23..16] */
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	0c1b      	lsrs	r3, r3, #16
 8001ae8:	b2db      	uxtb	r3, r3
 8001aea:	4618      	mov	r0, r3
 8001aec:	f7ff fea0 	bl	8001830 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 8));  /* Argument[15..8] */
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	0a1b      	lsrs	r3, r3, #8
 8001af4:	b2db      	uxtb	r3, r3
 8001af6:	4618      	mov	r0, r3
 8001af8:	f7ff fe9a 	bl	8001830 <SPI_TxByte>
  SPI_TxByte((uint8_t)arg);       /* Argument[7..0] */
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	b2db      	uxtb	r3, r3
 8001b00:	4618      	mov	r0, r3
 8001b02:	f7ff fe95 	bl	8001830 <SPI_TxByte>
  /* prepare CRC */
  if(cmd == CMD0) crc = 0x95; /* CRC for CMD0(0) */
 8001b06:	79fb      	ldrb	r3, [r7, #7]
 8001b08:	2b40      	cmp	r3, #64	; 0x40
 8001b0a:	d102      	bne.n	8001b12 <SD_SendCmd+0x5c>
 8001b0c:	2395      	movs	r3, #149	; 0x95
 8001b0e:	73fb      	strb	r3, [r7, #15]
 8001b10:	e007      	b.n	8001b22 <SD_SendCmd+0x6c>
  else if(cmd == CMD8) crc = 0x87;  /* CRC for CMD8(0x1AA) */
 8001b12:	79fb      	ldrb	r3, [r7, #7]
 8001b14:	2b48      	cmp	r3, #72	; 0x48
 8001b16:	d102      	bne.n	8001b1e <SD_SendCmd+0x68>
 8001b18:	2387      	movs	r3, #135	; 0x87
 8001b1a:	73fb      	strb	r3, [r7, #15]
 8001b1c:	e001      	b.n	8001b22 <SD_SendCmd+0x6c>
  else crc = 1;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	73fb      	strb	r3, [r7, #15]
  /* transmit CRC */
  SPI_TxByte(crc);
 8001b22:	7bfb      	ldrb	r3, [r7, #15]
 8001b24:	4618      	mov	r0, r3
 8001b26:	f7ff fe83 	bl	8001830 <SPI_TxByte>
  /* Skip a stuff byte when STOP_TRANSMISSION */
  if (cmd == CMD12) SPI_RxByte();
 8001b2a:	79fb      	ldrb	r3, [r7, #7]
 8001b2c:	2b4c      	cmp	r3, #76	; 0x4c
 8001b2e:	d101      	bne.n	8001b34 <SD_SendCmd+0x7e>
 8001b30:	f7ff feb2 	bl	8001898 <SPI_RxByte>
  /* receive response */
  uint8_t n = 10;
 8001b34:	230a      	movs	r3, #10
 8001b36:	73bb      	strb	r3, [r7, #14]
  do {
    res = SPI_RxByte();
 8001b38:	f7ff feae 	bl	8001898 <SPI_RxByte>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 8001b40:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	da05      	bge.n	8001b54 <SD_SendCmd+0x9e>
 8001b48:	7bbb      	ldrb	r3, [r7, #14]
 8001b4a:	3b01      	subs	r3, #1
 8001b4c:	73bb      	strb	r3, [r7, #14]
 8001b4e:	7bbb      	ldrb	r3, [r7, #14]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d1f1      	bne.n	8001b38 <SD_SendCmd+0x82>
  return res;
 8001b54:	7b7b      	ldrb	r3, [r7, #13]
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	3710      	adds	r7, #16
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
	...

08001b60 <SD_disk_initialize>:
/***************************************
 * user_diskio.c functions
 **************************************/
/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv)
{
 8001b60:	b590      	push	{r4, r7, lr}
 8001b62:	b085      	sub	sp, #20
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	4603      	mov	r3, r0
 8001b68:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];
  /* single drive, drv should be 0 */
  if(drv) return STA_NOINIT;
 8001b6a:	79fb      	ldrb	r3, [r7, #7]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d001      	beq.n	8001b74 <SD_disk_initialize+0x14>
 8001b70:	2301      	movs	r3, #1
 8001b72:	e0d1      	b.n	8001d18 <SD_disk_initialize+0x1b8>
  /* no disk */
  if(Stat & STA_NODISK) return Stat;
 8001b74:	4b6a      	ldr	r3, [pc, #424]	; (8001d20 <SD_disk_initialize+0x1c0>)
 8001b76:	781b      	ldrb	r3, [r3, #0]
 8001b78:	b2db      	uxtb	r3, r3
 8001b7a:	f003 0302 	and.w	r3, r3, #2
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d003      	beq.n	8001b8a <SD_disk_initialize+0x2a>
 8001b82:	4b67      	ldr	r3, [pc, #412]	; (8001d20 <SD_disk_initialize+0x1c0>)
 8001b84:	781b      	ldrb	r3, [r3, #0]
 8001b86:	b2db      	uxtb	r3, r3
 8001b88:	e0c6      	b.n	8001d18 <SD_disk_initialize+0x1b8>
  /* power on */
  SD_PowerOn();
 8001b8a:	f7ff fec9 	bl	8001920 <SD_PowerOn>
  /* slave select */
  SELECT();
 8001b8e:	f7ff fe2f 	bl	80017f0 <SELECT>
  /* check disk type */
  type = 0;
 8001b92:	2300      	movs	r3, #0
 8001b94:	73bb      	strb	r3, [r7, #14]
  /* send GO_IDLE_STATE command */
  if (SD_SendCmd(CMD0, 0) == 1)
 8001b96:	2100      	movs	r1, #0
 8001b98:	2040      	movs	r0, #64	; 0x40
 8001b9a:	f7ff ff8c 	bl	8001ab6 <SD_SendCmd>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2b01      	cmp	r3, #1
 8001ba2:	f040 80a1 	bne.w	8001ce8 <SD_disk_initialize+0x188>
  {
    /* timeout 1 sec */
    Timer1 = 1000;
 8001ba6:	4b5f      	ldr	r3, [pc, #380]	; (8001d24 <SD_disk_initialize+0x1c4>)
 8001ba8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001bac:	801a      	strh	r2, [r3, #0]
    /* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8001bae:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8001bb2:	2048      	movs	r0, #72	; 0x48
 8001bb4:	f7ff ff7f 	bl	8001ab6 <SD_SendCmd>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	2b01      	cmp	r3, #1
 8001bbc:	d155      	bne.n	8001c6a <SD_disk_initialize+0x10a>
    {
      /* operation condition register */
      for (n = 0; n < 4; n++)
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	73fb      	strb	r3, [r7, #15]
 8001bc2:	e00c      	b.n	8001bde <SD_disk_initialize+0x7e>
      {
        ocr[n] = SPI_RxByte();
 8001bc4:	7bfc      	ldrb	r4, [r7, #15]
 8001bc6:	f7ff fe67 	bl	8001898 <SPI_RxByte>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	461a      	mov	r2, r3
 8001bce:	f104 0310 	add.w	r3, r4, #16
 8001bd2:	443b      	add	r3, r7
 8001bd4:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 8001bd8:	7bfb      	ldrb	r3, [r7, #15]
 8001bda:	3301      	adds	r3, #1
 8001bdc:	73fb      	strb	r3, [r7, #15]
 8001bde:	7bfb      	ldrb	r3, [r7, #15]
 8001be0:	2b03      	cmp	r3, #3
 8001be2:	d9ef      	bls.n	8001bc4 <SD_disk_initialize+0x64>
      }
      /* voltage range 2.7-3.6V */
      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8001be4:	7abb      	ldrb	r3, [r7, #10]
 8001be6:	2b01      	cmp	r3, #1
 8001be8:	d17e      	bne.n	8001ce8 <SD_disk_initialize+0x188>
 8001bea:	7afb      	ldrb	r3, [r7, #11]
 8001bec:	2baa      	cmp	r3, #170	; 0xaa
 8001bee:	d17b      	bne.n	8001ce8 <SD_disk_initialize+0x188>
      {
        /* ACMD41 with HCS bit */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8001bf0:	2100      	movs	r1, #0
 8001bf2:	2077      	movs	r0, #119	; 0x77
 8001bf4:	f7ff ff5f 	bl	8001ab6 <SD_SendCmd>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	2b01      	cmp	r3, #1
 8001bfc:	d807      	bhi.n	8001c0e <SD_disk_initialize+0xae>
 8001bfe:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001c02:	2069      	movs	r0, #105	; 0x69
 8001c04:	f7ff ff57 	bl	8001ab6 <SD_SendCmd>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d004      	beq.n	8001c18 <SD_disk_initialize+0xb8>
        } while (Timer1);
 8001c0e:	4b45      	ldr	r3, [pc, #276]	; (8001d24 <SD_disk_initialize+0x1c4>)
 8001c10:	881b      	ldrh	r3, [r3, #0]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d1ec      	bne.n	8001bf0 <SD_disk_initialize+0x90>
 8001c16:	e000      	b.n	8001c1a <SD_disk_initialize+0xba>
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8001c18:	bf00      	nop
        /* READ_OCR */
        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8001c1a:	4b42      	ldr	r3, [pc, #264]	; (8001d24 <SD_disk_initialize+0x1c4>)
 8001c1c:	881b      	ldrh	r3, [r3, #0]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d062      	beq.n	8001ce8 <SD_disk_initialize+0x188>
 8001c22:	2100      	movs	r1, #0
 8001c24:	207a      	movs	r0, #122	; 0x7a
 8001c26:	f7ff ff46 	bl	8001ab6 <SD_SendCmd>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d15b      	bne.n	8001ce8 <SD_disk_initialize+0x188>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 8001c30:	2300      	movs	r3, #0
 8001c32:	73fb      	strb	r3, [r7, #15]
 8001c34:	e00c      	b.n	8001c50 <SD_disk_initialize+0xf0>
          {
            ocr[n] = SPI_RxByte();
 8001c36:	7bfc      	ldrb	r4, [r7, #15]
 8001c38:	f7ff fe2e 	bl	8001898 <SPI_RxByte>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	461a      	mov	r2, r3
 8001c40:	f104 0310 	add.w	r3, r4, #16
 8001c44:	443b      	add	r3, r7
 8001c46:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 8001c4a:	7bfb      	ldrb	r3, [r7, #15]
 8001c4c:	3301      	adds	r3, #1
 8001c4e:	73fb      	strb	r3, [r7, #15]
 8001c50:	7bfb      	ldrb	r3, [r7, #15]
 8001c52:	2b03      	cmp	r3, #3
 8001c54:	d9ef      	bls.n	8001c36 <SD_disk_initialize+0xd6>
          }
          /* SDv2 (HC or SC) */
          type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8001c56:	7a3b      	ldrb	r3, [r7, #8]
 8001c58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d001      	beq.n	8001c64 <SD_disk_initialize+0x104>
 8001c60:	230c      	movs	r3, #12
 8001c62:	e000      	b.n	8001c66 <SD_disk_initialize+0x106>
 8001c64:	2304      	movs	r3, #4
 8001c66:	73bb      	strb	r3, [r7, #14]
 8001c68:	e03e      	b.n	8001ce8 <SD_disk_initialize+0x188>
      }
    }
    else
    {
      /* SDC V1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8001c6a:	2100      	movs	r1, #0
 8001c6c:	2077      	movs	r0, #119	; 0x77
 8001c6e:	f7ff ff22 	bl	8001ab6 <SD_SendCmd>
 8001c72:	4603      	mov	r3, r0
 8001c74:	2b01      	cmp	r3, #1
 8001c76:	d808      	bhi.n	8001c8a <SD_disk_initialize+0x12a>
 8001c78:	2100      	movs	r1, #0
 8001c7a:	2069      	movs	r0, #105	; 0x69
 8001c7c:	f7ff ff1b 	bl	8001ab6 <SD_SendCmd>
 8001c80:	4603      	mov	r3, r0
 8001c82:	2b01      	cmp	r3, #1
 8001c84:	d801      	bhi.n	8001c8a <SD_disk_initialize+0x12a>
 8001c86:	2302      	movs	r3, #2
 8001c88:	e000      	b.n	8001c8c <SD_disk_initialize+0x12c>
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	73bb      	strb	r3, [r7, #14]
      do
      {
        if (type == CT_SD1)
 8001c8e:	7bbb      	ldrb	r3, [r7, #14]
 8001c90:	2b02      	cmp	r3, #2
 8001c92:	d10e      	bne.n	8001cb2 <SD_disk_initialize+0x152>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8001c94:	2100      	movs	r1, #0
 8001c96:	2077      	movs	r0, #119	; 0x77
 8001c98:	f7ff ff0d 	bl	8001ab6 <SD_SendCmd>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	2b01      	cmp	r3, #1
 8001ca0:	d80e      	bhi.n	8001cc0 <SD_disk_initialize+0x160>
 8001ca2:	2100      	movs	r1, #0
 8001ca4:	2069      	movs	r0, #105	; 0x69
 8001ca6:	f7ff ff06 	bl	8001ab6 <SD_SendCmd>
 8001caa:	4603      	mov	r3, r0
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d107      	bne.n	8001cc0 <SD_disk_initialize+0x160>
 8001cb0:	e00c      	b.n	8001ccc <SD_disk_initialize+0x16c>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8001cb2:	2100      	movs	r1, #0
 8001cb4:	2041      	movs	r0, #65	; 0x41
 8001cb6:	f7ff fefe 	bl	8001ab6 <SD_SendCmd>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d004      	beq.n	8001cca <SD_disk_initialize+0x16a>
        }
      } while (Timer1);
 8001cc0:	4b18      	ldr	r3, [pc, #96]	; (8001d24 <SD_disk_initialize+0x1c4>)
 8001cc2:	881b      	ldrh	r3, [r3, #0]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d1e2      	bne.n	8001c8e <SD_disk_initialize+0x12e>
 8001cc8:	e000      	b.n	8001ccc <SD_disk_initialize+0x16c>
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8001cca:	bf00      	nop
      /* SET_BLOCKLEN */
      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8001ccc:	4b15      	ldr	r3, [pc, #84]	; (8001d24 <SD_disk_initialize+0x1c4>)
 8001cce:	881b      	ldrh	r3, [r3, #0]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d007      	beq.n	8001ce4 <SD_disk_initialize+0x184>
 8001cd4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001cd8:	2050      	movs	r0, #80	; 0x50
 8001cda:	f7ff feec 	bl	8001ab6 <SD_SendCmd>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d001      	beq.n	8001ce8 <SD_disk_initialize+0x188>
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	73bb      	strb	r3, [r7, #14]
    }
  }
  CardType = type;
 8001ce8:	4a0f      	ldr	r2, [pc, #60]	; (8001d28 <SD_disk_initialize+0x1c8>)
 8001cea:	7bbb      	ldrb	r3, [r7, #14]
 8001cec:	7013      	strb	r3, [r2, #0]
  /* Idle */
  DESELECT();
 8001cee:	f7ff fd8f 	bl	8001810 <DESELECT>
  SPI_RxByte();
 8001cf2:	f7ff fdd1 	bl	8001898 <SPI_RxByte>
  /* Clear STA_NOINIT */
  if (type)
 8001cf6:	7bbb      	ldrb	r3, [r7, #14]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d008      	beq.n	8001d0e <SD_disk_initialize+0x1ae>
  {
    Stat &= ~STA_NOINIT;
 8001cfc:	4b08      	ldr	r3, [pc, #32]	; (8001d20 <SD_disk_initialize+0x1c0>)
 8001cfe:	781b      	ldrb	r3, [r3, #0]
 8001d00:	b2db      	uxtb	r3, r3
 8001d02:	f023 0301 	bic.w	r3, r3, #1
 8001d06:	b2da      	uxtb	r2, r3
 8001d08:	4b05      	ldr	r3, [pc, #20]	; (8001d20 <SD_disk_initialize+0x1c0>)
 8001d0a:	701a      	strb	r2, [r3, #0]
 8001d0c:	e001      	b.n	8001d12 <SD_disk_initialize+0x1b2>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 8001d0e:	f7ff fe49 	bl	80019a4 <SD_PowerOff>
  }
  return Stat;
 8001d12:	4b03      	ldr	r3, [pc, #12]	; (8001d20 <SD_disk_initialize+0x1c0>)
 8001d14:	781b      	ldrb	r3, [r3, #0]
 8001d16:	b2db      	uxtb	r3, r3
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	3714      	adds	r7, #20
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd90      	pop	{r4, r7, pc}
 8001d20:	20000000 	.word	0x20000000
 8001d24:	20000210 	.word	0x20000210
 8001d28:	20000214 	.word	0x20000214

08001d2c <SD_disk_status>:
/* return disk status */
DSTATUS SD_disk_status(BYTE drv)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b083      	sub	sp, #12
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	4603      	mov	r3, r0
 8001d34:	71fb      	strb	r3, [r7, #7]
  if (drv) return STA_NOINIT;
 8001d36:	79fb      	ldrb	r3, [r7, #7]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d001      	beq.n	8001d40 <SD_disk_status+0x14>
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	e002      	b.n	8001d46 <SD_disk_status+0x1a>
  return Stat;
 8001d40:	4b04      	ldr	r3, [pc, #16]	; (8001d54 <SD_disk_status+0x28>)
 8001d42:	781b      	ldrb	r3, [r3, #0]
 8001d44:	b2db      	uxtb	r3, r3
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	370c      	adds	r7, #12
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d50:	4770      	bx	lr
 8001d52:	bf00      	nop
 8001d54:	20000000 	.word	0x20000000

08001d58 <SD_disk_read>:
/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b084      	sub	sp, #16
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	60b9      	str	r1, [r7, #8]
 8001d60:	607a      	str	r2, [r7, #4]
 8001d62:	603b      	str	r3, [r7, #0]
 8001d64:	4603      	mov	r3, r0
 8001d66:	73fb      	strb	r3, [r7, #15]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 8001d68:	7bfb      	ldrb	r3, [r7, #15]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d102      	bne.n	8001d74 <SD_disk_read+0x1c>
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d101      	bne.n	8001d78 <SD_disk_read+0x20>
 8001d74:	2304      	movs	r3, #4
 8001d76:	e051      	b.n	8001e1c <SD_disk_read+0xc4>
  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001d78:	4b2a      	ldr	r3, [pc, #168]	; (8001e24 <SD_disk_read+0xcc>)
 8001d7a:	781b      	ldrb	r3, [r3, #0]
 8001d7c:	b2db      	uxtb	r3, r3
 8001d7e:	f003 0301 	and.w	r3, r3, #1
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d001      	beq.n	8001d8a <SD_disk_read+0x32>
 8001d86:	2303      	movs	r3, #3
 8001d88:	e048      	b.n	8001e1c <SD_disk_read+0xc4>
  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 8001d8a:	4b27      	ldr	r3, [pc, #156]	; (8001e28 <SD_disk_read+0xd0>)
 8001d8c:	781b      	ldrb	r3, [r3, #0]
 8001d8e:	f003 0304 	and.w	r3, r3, #4
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d102      	bne.n	8001d9c <SD_disk_read+0x44>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	025b      	lsls	r3, r3, #9
 8001d9a:	607b      	str	r3, [r7, #4]
  SELECT();
 8001d9c:	f7ff fd28 	bl	80017f0 <SELECT>
  if (count == 1)
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	2b01      	cmp	r3, #1
 8001da4:	d111      	bne.n	8001dca <SD_disk_read+0x72>
  {
    /* READ_SINGLE_BLOCK */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8001da6:	6879      	ldr	r1, [r7, #4]
 8001da8:	2051      	movs	r0, #81	; 0x51
 8001daa:	f7ff fe84 	bl	8001ab6 <SD_SendCmd>
 8001dae:	4603      	mov	r3, r0
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d129      	bne.n	8001e08 <SD_disk_read+0xb0>
 8001db4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001db8:	68b8      	ldr	r0, [r7, #8]
 8001dba:	f7ff fe0b 	bl	80019d4 <SD_RxDataBlock>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d021      	beq.n	8001e08 <SD_disk_read+0xb0>
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	603b      	str	r3, [r7, #0]
 8001dc8:	e01e      	b.n	8001e08 <SD_disk_read+0xb0>
  }
  else
  {
    /* READ_MULTIPLE_BLOCK */
    if (SD_SendCmd(CMD18, sector) == 0)
 8001dca:	6879      	ldr	r1, [r7, #4]
 8001dcc:	2052      	movs	r0, #82	; 0x52
 8001dce:	f7ff fe72 	bl	8001ab6 <SD_SendCmd>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d117      	bne.n	8001e08 <SD_disk_read+0xb0>
    {
      do {
        if (!SD_RxDataBlock(buff, 512)) break;
 8001dd8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001ddc:	68b8      	ldr	r0, [r7, #8]
 8001dde:	f7ff fdf9 	bl	80019d4 <SD_RxDataBlock>
 8001de2:	4603      	mov	r3, r0
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d00a      	beq.n	8001dfe <SD_disk_read+0xa6>
        buff += 512;
 8001de8:	68bb      	ldr	r3, [r7, #8]
 8001dea:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001dee:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	3b01      	subs	r3, #1
 8001df4:	603b      	str	r3, [r7, #0]
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d1ed      	bne.n	8001dd8 <SD_disk_read+0x80>
 8001dfc:	e000      	b.n	8001e00 <SD_disk_read+0xa8>
        if (!SD_RxDataBlock(buff, 512)) break;
 8001dfe:	bf00      	nop
      /* STOP_TRANSMISSION */
      SD_SendCmd(CMD12, 0);
 8001e00:	2100      	movs	r1, #0
 8001e02:	204c      	movs	r0, #76	; 0x4c
 8001e04:	f7ff fe57 	bl	8001ab6 <SD_SendCmd>
    }
  }
  /* Idle */
  DESELECT();
 8001e08:	f7ff fd02 	bl	8001810 <DESELECT>
  SPI_RxByte();
 8001e0c:	f7ff fd44 	bl	8001898 <SPI_RxByte>
  return count ? RES_ERROR : RES_OK;
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	bf14      	ite	ne
 8001e16:	2301      	movne	r3, #1
 8001e18:	2300      	moveq	r3, #0
 8001e1a:	b2db      	uxtb	r3, r3
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	3710      	adds	r7, #16
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}
 8001e24:	20000000 	.word	0x20000000
 8001e28:	20000214 	.word	0x20000214

08001e2c <SD_disk_write>:
/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b084      	sub	sp, #16
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	60b9      	str	r1, [r7, #8]
 8001e34:	607a      	str	r2, [r7, #4]
 8001e36:	603b      	str	r3, [r7, #0]
 8001e38:	4603      	mov	r3, r0
 8001e3a:	73fb      	strb	r3, [r7, #15]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 8001e3c:	7bfb      	ldrb	r3, [r7, #15]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d102      	bne.n	8001e48 <SD_disk_write+0x1c>
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d101      	bne.n	8001e4c <SD_disk_write+0x20>
 8001e48:	2304      	movs	r3, #4
 8001e4a:	e06b      	b.n	8001f24 <SD_disk_write+0xf8>
  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001e4c:	4b37      	ldr	r3, [pc, #220]	; (8001f2c <SD_disk_write+0x100>)
 8001e4e:	781b      	ldrb	r3, [r3, #0]
 8001e50:	b2db      	uxtb	r3, r3
 8001e52:	f003 0301 	and.w	r3, r3, #1
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d001      	beq.n	8001e5e <SD_disk_write+0x32>
 8001e5a:	2303      	movs	r3, #3
 8001e5c:	e062      	b.n	8001f24 <SD_disk_write+0xf8>
  /* write protection */
  if (Stat & STA_PROTECT) return RES_WRPRT;
 8001e5e:	4b33      	ldr	r3, [pc, #204]	; (8001f2c <SD_disk_write+0x100>)
 8001e60:	781b      	ldrb	r3, [r3, #0]
 8001e62:	b2db      	uxtb	r3, r3
 8001e64:	f003 0304 	and.w	r3, r3, #4
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d001      	beq.n	8001e70 <SD_disk_write+0x44>
 8001e6c:	2302      	movs	r3, #2
 8001e6e:	e059      	b.n	8001f24 <SD_disk_write+0xf8>
  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 8001e70:	4b2f      	ldr	r3, [pc, #188]	; (8001f30 <SD_disk_write+0x104>)
 8001e72:	781b      	ldrb	r3, [r3, #0]
 8001e74:	f003 0304 	and.w	r3, r3, #4
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d102      	bne.n	8001e82 <SD_disk_write+0x56>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	025b      	lsls	r3, r3, #9
 8001e80:	607b      	str	r3, [r7, #4]
  SELECT();
 8001e82:	f7ff fcb5 	bl	80017f0 <SELECT>
  if (count == 1)
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	2b01      	cmp	r3, #1
 8001e8a:	d110      	bne.n	8001eae <SD_disk_write+0x82>
  {
    /* WRITE_BLOCK */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8001e8c:	6879      	ldr	r1, [r7, #4]
 8001e8e:	2058      	movs	r0, #88	; 0x58
 8001e90:	f7ff fe11 	bl	8001ab6 <SD_SendCmd>
 8001e94:	4603      	mov	r3, r0
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d13a      	bne.n	8001f10 <SD_disk_write+0xe4>
 8001e9a:	21fe      	movs	r1, #254	; 0xfe
 8001e9c:	68b8      	ldr	r0, [r7, #8]
 8001e9e:	f7ff fdc7 	bl	8001a30 <SD_TxDataBlock>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d033      	beq.n	8001f10 <SD_disk_write+0xe4>
      count = 0;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	603b      	str	r3, [r7, #0]
 8001eac:	e030      	b.n	8001f10 <SD_disk_write+0xe4>
  }
  else
  {
    /* WRITE_MULTIPLE_BLOCK */
    if (CardType & CT_SD1)
 8001eae:	4b20      	ldr	r3, [pc, #128]	; (8001f30 <SD_disk_write+0x104>)
 8001eb0:	781b      	ldrb	r3, [r3, #0]
 8001eb2:	f003 0302 	and.w	r3, r3, #2
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d007      	beq.n	8001eca <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 8001eba:	2100      	movs	r1, #0
 8001ebc:	2077      	movs	r0, #119	; 0x77
 8001ebe:	f7ff fdfa 	bl	8001ab6 <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 8001ec2:	6839      	ldr	r1, [r7, #0]
 8001ec4:	2057      	movs	r0, #87	; 0x57
 8001ec6:	f7ff fdf6 	bl	8001ab6 <SD_SendCmd>
    }
    if (SD_SendCmd(CMD25, sector) == 0)
 8001eca:	6879      	ldr	r1, [r7, #4]
 8001ecc:	2059      	movs	r0, #89	; 0x59
 8001ece:	f7ff fdf2 	bl	8001ab6 <SD_SendCmd>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d11b      	bne.n	8001f10 <SD_disk_write+0xe4>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 8001ed8:	21fc      	movs	r1, #252	; 0xfc
 8001eda:	68b8      	ldr	r0, [r7, #8]
 8001edc:	f7ff fda8 	bl	8001a30 <SD_TxDataBlock>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d00a      	beq.n	8001efc <SD_disk_write+0xd0>
        buff += 512;
 8001ee6:	68bb      	ldr	r3, [r7, #8]
 8001ee8:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001eec:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	3b01      	subs	r3, #1
 8001ef2:	603b      	str	r3, [r7, #0]
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d1ee      	bne.n	8001ed8 <SD_disk_write+0xac>
 8001efa:	e000      	b.n	8001efe <SD_disk_write+0xd2>
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 8001efc:	bf00      	nop
      /* STOP_TRAN token */
      if(!SD_TxDataBlock(0, 0xFD))
 8001efe:	21fd      	movs	r1, #253	; 0xfd
 8001f00:	2000      	movs	r0, #0
 8001f02:	f7ff fd95 	bl	8001a30 <SD_TxDataBlock>
 8001f06:	4603      	mov	r3, r0
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d101      	bne.n	8001f10 <SD_disk_write+0xe4>
      {
        count = 1;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	603b      	str	r3, [r7, #0]
      }
    }
  }
  /* Idle */
  DESELECT();
 8001f10:	f7ff fc7e 	bl	8001810 <DESELECT>
  SPI_RxByte();
 8001f14:	f7ff fcc0 	bl	8001898 <SPI_RxByte>
  return count ? RES_ERROR : RES_OK;
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	bf14      	ite	ne
 8001f1e:	2301      	movne	r3, #1
 8001f20:	2300      	moveq	r3, #0
 8001f22:	b2db      	uxtb	r3, r3
}
 8001f24:	4618      	mov	r0, r3
 8001f26:	3710      	adds	r7, #16
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}
 8001f2c:	20000000 	.word	0x20000000
 8001f30:	20000214 	.word	0x20000214

08001f34 <SD_disk_ioctl>:
#endif /* _USE_WRITE */
/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8001f34:	b590      	push	{r4, r7, lr}
 8001f36:	b08b      	sub	sp, #44	; 0x2c
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	603a      	str	r2, [r7, #0]
 8001f3e:	71fb      	strb	r3, [r7, #7]
 8001f40:	460b      	mov	r3, r1
 8001f42:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  uint8_t n, csd[16], *ptr = buff;
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	623b      	str	r3, [r7, #32]
  WORD csize;
  /* pdrv should be 0 */
  if (drv) return RES_PARERR;
 8001f48:	79fb      	ldrb	r3, [r7, #7]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d001      	beq.n	8001f52 <SD_disk_ioctl+0x1e>
 8001f4e:	2304      	movs	r3, #4
 8001f50:	e115      	b.n	800217e <SD_disk_ioctl+0x24a>
  res = RES_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if (ctrl == CTRL_POWER)
 8001f58:	79bb      	ldrb	r3, [r7, #6]
 8001f5a:	2b05      	cmp	r3, #5
 8001f5c:	d124      	bne.n	8001fa8 <SD_disk_ioctl+0x74>
  {
    switch (*ptr)
 8001f5e:	6a3b      	ldr	r3, [r7, #32]
 8001f60:	781b      	ldrb	r3, [r3, #0]
 8001f62:	2b02      	cmp	r3, #2
 8001f64:	d012      	beq.n	8001f8c <SD_disk_ioctl+0x58>
 8001f66:	2b02      	cmp	r3, #2
 8001f68:	dc1a      	bgt.n	8001fa0 <SD_disk_ioctl+0x6c>
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d002      	beq.n	8001f74 <SD_disk_ioctl+0x40>
 8001f6e:	2b01      	cmp	r3, #1
 8001f70:	d006      	beq.n	8001f80 <SD_disk_ioctl+0x4c>
 8001f72:	e015      	b.n	8001fa0 <SD_disk_ioctl+0x6c>
    {
    case 0:
      SD_PowerOff();    /* Power Off */
 8001f74:	f7ff fd16 	bl	80019a4 <SD_PowerOff>
      res = RES_OK;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001f7e:	e0fc      	b.n	800217a <SD_disk_ioctl+0x246>
    case 1:
      SD_PowerOn();   /* Power On */
 8001f80:	f7ff fcce 	bl	8001920 <SD_PowerOn>
      res = RES_OK;
 8001f84:	2300      	movs	r3, #0
 8001f86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001f8a:	e0f6      	b.n	800217a <SD_disk_ioctl+0x246>
    case 2:
      *(ptr + 1) = SD_CheckPower();
 8001f8c:	6a3b      	ldr	r3, [r7, #32]
 8001f8e:	1c5c      	adds	r4, r3, #1
 8001f90:	f7ff fd14 	bl	80019bc <SD_CheckPower>
 8001f94:	4603      	mov	r3, r0
 8001f96:	7023      	strb	r3, [r4, #0]
      res = RES_OK;   /* Power Check */
 8001f98:	2300      	movs	r3, #0
 8001f9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001f9e:	e0ec      	b.n	800217a <SD_disk_ioctl+0x246>
    default:
      res = RES_PARERR;
 8001fa0:	2304      	movs	r3, #4
 8001fa2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001fa6:	e0e8      	b.n	800217a <SD_disk_ioctl+0x246>
    }
  }
  else
  {
    /* no disk */
    if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001fa8:	4b77      	ldr	r3, [pc, #476]	; (8002188 <SD_disk_ioctl+0x254>)
 8001faa:	781b      	ldrb	r3, [r3, #0]
 8001fac:	b2db      	uxtb	r3, r3
 8001fae:	f003 0301 	and.w	r3, r3, #1
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d001      	beq.n	8001fba <SD_disk_ioctl+0x86>
 8001fb6:	2303      	movs	r3, #3
 8001fb8:	e0e1      	b.n	800217e <SD_disk_ioctl+0x24a>
    SELECT();
 8001fba:	f7ff fc19 	bl	80017f0 <SELECT>
    switch (ctrl)
 8001fbe:	79bb      	ldrb	r3, [r7, #6]
 8001fc0:	2b0d      	cmp	r3, #13
 8001fc2:	f200 80cb 	bhi.w	800215c <SD_disk_ioctl+0x228>
 8001fc6:	a201      	add	r2, pc, #4	; (adr r2, 8001fcc <SD_disk_ioctl+0x98>)
 8001fc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fcc:	080020c7 	.word	0x080020c7
 8001fd0:	08002005 	.word	0x08002005
 8001fd4:	080020b7 	.word	0x080020b7
 8001fd8:	0800215d 	.word	0x0800215d
 8001fdc:	0800215d 	.word	0x0800215d
 8001fe0:	0800215d 	.word	0x0800215d
 8001fe4:	0800215d 	.word	0x0800215d
 8001fe8:	0800215d 	.word	0x0800215d
 8001fec:	0800215d 	.word	0x0800215d
 8001ff0:	0800215d 	.word	0x0800215d
 8001ff4:	0800215d 	.word	0x0800215d
 8001ff8:	080020d9 	.word	0x080020d9
 8001ffc:	080020fd 	.word	0x080020fd
 8002000:	08002121 	.word	0x08002121
    {
    case GET_SECTOR_COUNT:
      /* SEND_CSD */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8002004:	2100      	movs	r1, #0
 8002006:	2049      	movs	r0, #73	; 0x49
 8002008:	f7ff fd55 	bl	8001ab6 <SD_SendCmd>
 800200c:	4603      	mov	r3, r0
 800200e:	2b00      	cmp	r3, #0
 8002010:	f040 80a8 	bne.w	8002164 <SD_disk_ioctl+0x230>
 8002014:	f107 030c 	add.w	r3, r7, #12
 8002018:	2110      	movs	r1, #16
 800201a:	4618      	mov	r0, r3
 800201c:	f7ff fcda 	bl	80019d4 <SD_RxDataBlock>
 8002020:	4603      	mov	r3, r0
 8002022:	2b00      	cmp	r3, #0
 8002024:	f000 809e 	beq.w	8002164 <SD_disk_ioctl+0x230>
      {
        if ((csd[0] >> 6) == 1)
 8002028:	7b3b      	ldrb	r3, [r7, #12]
 800202a:	099b      	lsrs	r3, r3, #6
 800202c:	b2db      	uxtb	r3, r3
 800202e:	2b01      	cmp	r3, #1
 8002030:	d10e      	bne.n	8002050 <SD_disk_ioctl+0x11c>
        {
          /* SDC V2 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8002032:	7d7b      	ldrb	r3, [r7, #21]
 8002034:	b29a      	uxth	r2, r3
 8002036:	7d3b      	ldrb	r3, [r7, #20]
 8002038:	b29b      	uxth	r3, r3
 800203a:	021b      	lsls	r3, r3, #8
 800203c:	b29b      	uxth	r3, r3
 800203e:	4413      	add	r3, r2
 8002040:	b29b      	uxth	r3, r3
 8002042:	3301      	adds	r3, #1
 8002044:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 8002046:	8bfb      	ldrh	r3, [r7, #30]
 8002048:	029a      	lsls	r2, r3, #10
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	601a      	str	r2, [r3, #0]
 800204e:	e02e      	b.n	80020ae <SD_disk_ioctl+0x17a>
        }
        else
        {
          /* MMC or SDC V1 */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8002050:	7c7b      	ldrb	r3, [r7, #17]
 8002052:	f003 030f 	and.w	r3, r3, #15
 8002056:	b2da      	uxtb	r2, r3
 8002058:	7dbb      	ldrb	r3, [r7, #22]
 800205a:	09db      	lsrs	r3, r3, #7
 800205c:	b2db      	uxtb	r3, r3
 800205e:	4413      	add	r3, r2
 8002060:	b2da      	uxtb	r2, r3
 8002062:	7d7b      	ldrb	r3, [r7, #21]
 8002064:	005b      	lsls	r3, r3, #1
 8002066:	b2db      	uxtb	r3, r3
 8002068:	f003 0306 	and.w	r3, r3, #6
 800206c:	b2db      	uxtb	r3, r3
 800206e:	4413      	add	r3, r2
 8002070:	b2db      	uxtb	r3, r3
 8002072:	3302      	adds	r3, #2
 8002074:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8002078:	7d3b      	ldrb	r3, [r7, #20]
 800207a:	099b      	lsrs	r3, r3, #6
 800207c:	b2db      	uxtb	r3, r3
 800207e:	b29a      	uxth	r2, r3
 8002080:	7cfb      	ldrb	r3, [r7, #19]
 8002082:	b29b      	uxth	r3, r3
 8002084:	009b      	lsls	r3, r3, #2
 8002086:	b29b      	uxth	r3, r3
 8002088:	4413      	add	r3, r2
 800208a:	b29a      	uxth	r2, r3
 800208c:	7cbb      	ldrb	r3, [r7, #18]
 800208e:	029b      	lsls	r3, r3, #10
 8002090:	b29b      	uxth	r3, r3
 8002092:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002096:	b29b      	uxth	r3, r3
 8002098:	4413      	add	r3, r2
 800209a:	b29b      	uxth	r3, r3
 800209c:	3301      	adds	r3, #1
 800209e:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 80020a0:	8bfa      	ldrh	r2, [r7, #30]
 80020a2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80020a6:	3b09      	subs	r3, #9
 80020a8:	409a      	lsls	r2, r3
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	601a      	str	r2, [r3, #0]
        }
        res = RES_OK;
 80020ae:	2300      	movs	r3, #0
 80020b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
      break;
 80020b4:	e056      	b.n	8002164 <SD_disk_ioctl+0x230>
    case GET_SECTOR_SIZE:
      *(WORD*) buff = 512;
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80020bc:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 80020be:	2300      	movs	r3, #0
 80020c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80020c4:	e055      	b.n	8002172 <SD_disk_ioctl+0x23e>
    case CTRL_SYNC:
      if (SD_ReadyWait() == 0xFF) res = RES_OK;
 80020c6:	f7ff fc11 	bl	80018ec <SD_ReadyWait>
 80020ca:	4603      	mov	r3, r0
 80020cc:	2bff      	cmp	r3, #255	; 0xff
 80020ce:	d14b      	bne.n	8002168 <SD_disk_ioctl+0x234>
 80020d0:	2300      	movs	r3, #0
 80020d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80020d6:	e047      	b.n	8002168 <SD_disk_ioctl+0x234>
    case MMC_GET_CSD:
      /* SEND_CSD */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 80020d8:	2100      	movs	r1, #0
 80020da:	2049      	movs	r0, #73	; 0x49
 80020dc:	f7ff fceb 	bl	8001ab6 <SD_SendCmd>
 80020e0:	4603      	mov	r3, r0
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d142      	bne.n	800216c <SD_disk_ioctl+0x238>
 80020e6:	2110      	movs	r1, #16
 80020e8:	6a38      	ldr	r0, [r7, #32]
 80020ea:	f7ff fc73 	bl	80019d4 <SD_RxDataBlock>
 80020ee:	4603      	mov	r3, r0
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d03b      	beq.n	800216c <SD_disk_ioctl+0x238>
 80020f4:	2300      	movs	r3, #0
 80020f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80020fa:	e037      	b.n	800216c <SD_disk_ioctl+0x238>
    case MMC_GET_CID:
      /* SEND_CID */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 80020fc:	2100      	movs	r1, #0
 80020fe:	204a      	movs	r0, #74	; 0x4a
 8002100:	f7ff fcd9 	bl	8001ab6 <SD_SendCmd>
 8002104:	4603      	mov	r3, r0
 8002106:	2b00      	cmp	r3, #0
 8002108:	d132      	bne.n	8002170 <SD_disk_ioctl+0x23c>
 800210a:	2110      	movs	r1, #16
 800210c:	6a38      	ldr	r0, [r7, #32]
 800210e:	f7ff fc61 	bl	80019d4 <SD_RxDataBlock>
 8002112:	4603      	mov	r3, r0
 8002114:	2b00      	cmp	r3, #0
 8002116:	d02b      	beq.n	8002170 <SD_disk_ioctl+0x23c>
 8002118:	2300      	movs	r3, #0
 800211a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800211e:	e027      	b.n	8002170 <SD_disk_ioctl+0x23c>
    case MMC_GET_OCR:
      /* READ_OCR */
      if (SD_SendCmd(CMD58, 0) == 0)
 8002120:	2100      	movs	r1, #0
 8002122:	207a      	movs	r0, #122	; 0x7a
 8002124:	f7ff fcc7 	bl	8001ab6 <SD_SendCmd>
 8002128:	4603      	mov	r3, r0
 800212a:	2b00      	cmp	r3, #0
 800212c:	d116      	bne.n	800215c <SD_disk_ioctl+0x228>
      {
        for (n = 0; n < 4; n++)
 800212e:	2300      	movs	r3, #0
 8002130:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8002134:	e00b      	b.n	800214e <SD_disk_ioctl+0x21a>
        {
          *ptr++ = SPI_RxByte();
 8002136:	6a3c      	ldr	r4, [r7, #32]
 8002138:	1c63      	adds	r3, r4, #1
 800213a:	623b      	str	r3, [r7, #32]
 800213c:	f7ff fbac 	bl	8001898 <SPI_RxByte>
 8002140:	4603      	mov	r3, r0
 8002142:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 8002144:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002148:	3301      	adds	r3, #1
 800214a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800214e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002152:	2b03      	cmp	r3, #3
 8002154:	d9ef      	bls.n	8002136 <SD_disk_ioctl+0x202>
        }
        res = RES_OK;
 8002156:	2300      	movs	r3, #0
 8002158:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
    default:
      res = RES_PARERR;
 800215c:	2304      	movs	r3, #4
 800215e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002162:	e006      	b.n	8002172 <SD_disk_ioctl+0x23e>
      break;
 8002164:	bf00      	nop
 8002166:	e004      	b.n	8002172 <SD_disk_ioctl+0x23e>
      break;
 8002168:	bf00      	nop
 800216a:	e002      	b.n	8002172 <SD_disk_ioctl+0x23e>
      break;
 800216c:	bf00      	nop
 800216e:	e000      	b.n	8002172 <SD_disk_ioctl+0x23e>
      break;
 8002170:	bf00      	nop
    }
    DESELECT();
 8002172:	f7ff fb4d 	bl	8001810 <DESELECT>
    SPI_RxByte();
 8002176:	f7ff fb8f 	bl	8001898 <SPI_RxByte>
  }
  return res;
 800217a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800217e:	4618      	mov	r0, r3
 8002180:	372c      	adds	r7, #44	; 0x2c
 8002182:	46bd      	mov	sp, r7
 8002184:	bd90      	pop	{r4, r7, pc}
 8002186:	bf00      	nop
 8002188:	20000000 	.word	0x20000000

0800218c <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b088      	sub	sp, #32
 8002190:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002192:	f107 030c 	add.w	r3, r7, #12
 8002196:	2200      	movs	r2, #0
 8002198:	601a      	str	r2, [r3, #0]
 800219a:	605a      	str	r2, [r3, #4]
 800219c:	609a      	str	r2, [r3, #8]
 800219e:	60da      	str	r2, [r3, #12]
 80021a0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80021a2:	2300      	movs	r3, #0
 80021a4:	60bb      	str	r3, [r7, #8]
 80021a6:	4b3e      	ldr	r3, [pc, #248]	; (80022a0 <MX_GPIO_Init+0x114>)
 80021a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021aa:	4a3d      	ldr	r2, [pc, #244]	; (80022a0 <MX_GPIO_Init+0x114>)
 80021ac:	f043 0304 	orr.w	r3, r3, #4
 80021b0:	6313      	str	r3, [r2, #48]	; 0x30
 80021b2:	4b3b      	ldr	r3, [pc, #236]	; (80022a0 <MX_GPIO_Init+0x114>)
 80021b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b6:	f003 0304 	and.w	r3, r3, #4
 80021ba:	60bb      	str	r3, [r7, #8]
 80021bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80021be:	2300      	movs	r3, #0
 80021c0:	607b      	str	r3, [r7, #4]
 80021c2:	4b37      	ldr	r3, [pc, #220]	; (80022a0 <MX_GPIO_Init+0x114>)
 80021c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c6:	4a36      	ldr	r2, [pc, #216]	; (80022a0 <MX_GPIO_Init+0x114>)
 80021c8:	f043 0301 	orr.w	r3, r3, #1
 80021cc:	6313      	str	r3, [r2, #48]	; 0x30
 80021ce:	4b34      	ldr	r3, [pc, #208]	; (80022a0 <MX_GPIO_Init+0x114>)
 80021d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d2:	f003 0301 	and.w	r3, r3, #1
 80021d6:	607b      	str	r3, [r7, #4]
 80021d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80021da:	2300      	movs	r3, #0
 80021dc:	603b      	str	r3, [r7, #0]
 80021de:	4b30      	ldr	r3, [pc, #192]	; (80022a0 <MX_GPIO_Init+0x114>)
 80021e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e2:	4a2f      	ldr	r2, [pc, #188]	; (80022a0 <MX_GPIO_Init+0x114>)
 80021e4:	f043 0302 	orr.w	r3, r3, #2
 80021e8:	6313      	str	r3, [r2, #48]	; 0x30
 80021ea:	4b2d      	ldr	r3, [pc, #180]	; (80022a0 <MX_GPIO_Init+0x114>)
 80021ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ee:	f003 0302 	and.w	r3, r3, #2
 80021f2:	603b      	str	r3, [r7, #0]
 80021f4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80021f6:	2200      	movs	r2, #0
 80021f8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80021fc:	4829      	ldr	r0, [pc, #164]	; (80022a4 <MX_GPIO_Init+0x118>)
 80021fe:	f001 fa3b 	bl	8003678 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MPU6500_CS_GPIO_Port, MPU6500_CS_Pin, GPIO_PIN_SET);
 8002202:	2201      	movs	r2, #1
 8002204:	2110      	movs	r1, #16
 8002206:	4828      	ldr	r0, [pc, #160]	; (80022a8 <MX_GPIO_Init+0x11c>)
 8002208:	f001 fa36 	bl	8003678 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BMP280_CS_GPIO_Port, BMP280_CS_Pin, GPIO_PIN_SET);
 800220c:	2201      	movs	r2, #1
 800220e:	2101      	movs	r1, #1
 8002210:	4826      	ldr	r0, [pc, #152]	; (80022ac <MX_GPIO_Init+0x120>)
 8002212:	f001 fa31 	bl	8003678 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8002216:	2200      	movs	r2, #0
 8002218:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800221c:	4822      	ldr	r0, [pc, #136]	; (80022a8 <MX_GPIO_Init+0x11c>)
 800221e:	f001 fa2b 	bl	8003678 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002222:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002226:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002228:	2301      	movs	r3, #1
 800222a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800222c:	2300      	movs	r3, #0
 800222e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002230:	2300      	movs	r3, #0
 8002232:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002234:	f107 030c 	add.w	r3, r7, #12
 8002238:	4619      	mov	r1, r3
 800223a:	481a      	ldr	r0, [pc, #104]	; (80022a4 <MX_GPIO_Init+0x118>)
 800223c:	f001 f898 	bl	8003370 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MPU6500_CS_Pin;
 8002240:	2310      	movs	r3, #16
 8002242:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002244:	2301      	movs	r3, #1
 8002246:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002248:	2300      	movs	r3, #0
 800224a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800224c:	2302      	movs	r3, #2
 800224e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(MPU6500_CS_GPIO_Port, &GPIO_InitStruct);
 8002250:	f107 030c 	add.w	r3, r7, #12
 8002254:	4619      	mov	r1, r3
 8002256:	4814      	ldr	r0, [pc, #80]	; (80022a8 <MX_GPIO_Init+0x11c>)
 8002258:	f001 f88a 	bl	8003370 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BMP280_CS_Pin;
 800225c:	2301      	movs	r3, #1
 800225e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002260:	2301      	movs	r3, #1
 8002262:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002264:	2300      	movs	r3, #0
 8002266:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002268:	2302      	movs	r3, #2
 800226a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BMP280_CS_GPIO_Port, &GPIO_InitStruct);
 800226c:	f107 030c 	add.w	r3, r7, #12
 8002270:	4619      	mov	r1, r3
 8002272:	480e      	ldr	r0, [pc, #56]	; (80022ac <MX_GPIO_Init+0x120>)
 8002274:	f001 f87c 	bl	8003370 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002278:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800227c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800227e:	2301      	movs	r3, #1
 8002280:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002282:	2300      	movs	r3, #0
 8002284:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002286:	2300      	movs	r3, #0
 8002288:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800228a:	f107 030c 	add.w	r3, r7, #12
 800228e:	4619      	mov	r1, r3
 8002290:	4805      	ldr	r0, [pc, #20]	; (80022a8 <MX_GPIO_Init+0x11c>)
 8002292:	f001 f86d 	bl	8003370 <HAL_GPIO_Init>

}
 8002296:	bf00      	nop
 8002298:	3720      	adds	r7, #32
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}
 800229e:	bf00      	nop
 80022a0:	40023800 	.word	0x40023800
 80022a4:	40020800 	.word	0x40020800
 80022a8:	40020000 	.word	0x40020000
 80022ac:	40020400 	.word	0x40020400

080022b0 <_write>:
void init_SD_card(void);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len) {
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b084      	sub	sp, #16
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	60f8      	str	r0, [r7, #12]
 80022b8:	60b9      	str	r1, [r7, #8]
 80022ba:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	b29a      	uxth	r2, r3
 80022c0:	f04f 33ff 	mov.w	r3, #4294967295
 80022c4:	68b9      	ldr	r1, [r7, #8]
 80022c6:	4804      	ldr	r0, [pc, #16]	; (80022d8 <_write+0x28>)
 80022c8:	f002 fc3d 	bl	8004b46 <HAL_UART_Transmit>
    return len;
 80022cc:	687b      	ldr	r3, [r7, #4]
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	3710      	adds	r7, #16
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop
 80022d8:	20000320 	.word	0x20000320
 80022dc:	00000000 	.word	0x00000000

080022e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80022e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80022e4:	f5ad 5d20 	sub.w	sp, sp, #10240	; 0x2800
 80022e8:	b081      	sub	sp, #4
 80022ea:	af12      	add	r7, sp, #72	; 0x48
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80022ec:	f000 fec4 	bl	8003078 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80022f0:	f000 f99c 	bl	800262c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80022f4:	f7ff ff4a 	bl	800218c <MX_GPIO_Init>
  MX_SPI1_Init();
 80022f8:	f000 fbb4 	bl	8002a64 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80022fc:	f000 fdc2 	bl	8002e84 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8002300:	f000 fdea 	bl	8002ed8 <MX_USART2_UART_Init>
  MX_SPI3_Init();
 8002304:	f000 fbe4 	bl	8002ad0 <MX_SPI3_Init>
  MX_FATFS_Init();
 8002308:	f002 ff92 	bl	8005230 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  MPU9250_Init(hspi1);
 800230c:	4cba      	ldr	r4, [pc, #744]	; (80025f8 <main+0x318>)
 800230e:	4668      	mov	r0, sp
 8002310:	f104 0310 	add.w	r3, r4, #16
 8002314:	2248      	movs	r2, #72	; 0x48
 8002316:	4619      	mov	r1, r3
 8002318:	f006 fa04 	bl	8008724 <memcpy>
 800231c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002320:	f000 fb6f 	bl	8002a02 <MPU9250_Init>
  bmp280_init(&bmp, &hspi1);
 8002324:	f507 531e 	add.w	r3, r7, #10112	; 0x2780
 8002328:	f103 030c 	add.w	r3, r3, #12
 800232c:	49b2      	ldr	r1, [pc, #712]	; (80025f8 <main+0x318>)
 800232e:	4618      	mov	r0, r3
 8002330:	f7fe fef8 	bl	8001124 <bmp280_init>
  init_SD_card();
 8002334:	f000 f9d8 	bl	80026e8 <init_SD_card>


  sprintf(init_buffer, "########################## New flight ##########################\n");
 8002338:	f507 531c 	add.w	r3, r7, #9984	; 0x2700
 800233c:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8002340:	49ae      	ldr	r1, [pc, #696]	; (80025fc <main+0x31c>)
 8002342:	4618      	mov	r0, r3
 8002344:	f006 fefc 	bl	8009140 <siprintf>
  process_SD_card(init_buffer);
 8002348:	f507 531c 	add.w	r3, r7, #9984	; 0x2700
 800234c:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8002350:	4618      	mov	r0, r3
 8002352:	f000 fa2b 	bl	80027ac <process_SD_card>
	static uint32_t ackTick = 0;
	static uint32_t sdTick = 0;
	static uint32_t currentTick = 0;
	static int index = 0;

	currentTick = HAL_GetTick();
 8002356:	f000 fef5 	bl	8003144 <HAL_GetTick>
 800235a:	4603      	mov	r3, r0
 800235c:	4aa8      	ldr	r2, [pc, #672]	; (8002600 <main+0x320>)
 800235e:	6013      	str	r3, [r2, #0]

	if ((currentTick-ackTick) > ACQUISITION_DELAY) {
 8002360:	4ba7      	ldr	r3, [pc, #668]	; (8002600 <main+0x320>)
 8002362:	681a      	ldr	r2, [r3, #0]
 8002364:	4ba7      	ldr	r3, [pc, #668]	; (8002604 <main+0x324>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	1ad3      	subs	r3, r2, r3
 800236a:	2b14      	cmp	r3, #20
 800236c:	f240 8111 	bls.w	8002592 <main+0x2b2>
		int16_t accelData[3];
		int16_t gyroData[3];
		int32_t temperature;
		uint32_t pressure;

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, RESET);
 8002370:	2200      	movs	r2, #0
 8002372:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002376:	48a4      	ldr	r0, [pc, #656]	; (8002608 <main+0x328>)
 8002378:	f001 f97e 	bl	8003678 <HAL_GPIO_WritePin>
		// Lecture des données d'accélération et gryoscope du MP9250
		MPU9250_ReadAccel(accelData, &hspi1);
 800237c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002380:	3b28      	subs	r3, #40	; 0x28
 8002382:	499d      	ldr	r1, [pc, #628]	; (80025f8 <main+0x318>)
 8002384:	4618      	mov	r0, r3
 8002386:	f000 fae2 	bl	800294e <MPU9250_ReadAccel>
		MPU9250_ReadGyro(gyroData, &hspi1);
 800238a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800238e:	3b30      	subs	r3, #48	; 0x30
 8002390:	4999      	ldr	r1, [pc, #612]	; (80025f8 <main+0x318>)
 8002392:	4618      	mov	r0, r3
 8002394:	f000 fb08 	bl	80029a8 <MPU9250_ReadGyro>
		//Lecture de la température
		bmp280_read_temperature_and_pressure(&bmp, &temperature, &pressure);
 8002398:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800239c:	3a38      	subs	r2, #56	; 0x38
 800239e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80023a2:	3b34      	subs	r3, #52	; 0x34
 80023a4:	f507 501e 	add.w	r0, r7, #10112	; 0x2780
 80023a8:	f100 000c 	add.w	r0, r0, #12
 80023ac:	4619      	mov	r1, r3
 80023ae:	f7ff f9eb 	bl	8001788 <bmp280_read_temperature_and_pressure>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, SET);
 80023b2:	2201      	movs	r2, #1
 80023b4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80023b8:	4893      	ldr	r0, [pc, #588]	; (8002608 <main+0x328>)
 80023ba:	f001 f95d 	bl	8003678 <HAL_GPIO_WritePin>

		int accel_size = sprintf(buffer+index, "Accel_X: %.2f, Accel_Y: %.2f, Accel_Z: %.2f\n", (double)accelData[0]/ACCEL_SENSITIVITY_SCALE_FACTOR, (double)accelData[1]/ACCEL_SENSITIVITY_SCALE_FACTOR, (double)accelData[2]/ACCEL_SENSITIVITY_SCALE_FACTOR);
 80023be:	4b93      	ldr	r3, [pc, #588]	; (800260c <main+0x32c>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	461a      	mov	r2, r3
 80023c4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80023c8:	3b20      	subs	r3, #32
 80023ca:	189e      	adds	r6, r3, r2
 80023cc:	f507 63f7 	add.w	r3, r7, #1976	; 0x7b8
 80023d0:	f5a3 63f5 	sub.w	r3, r3, #1960	; 0x7a8
 80023d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80023d8:	4618      	mov	r0, r3
 80023da:	f7fe f8ab 	bl	8000534 <__aeabi_i2d>
 80023de:	f04f 0200 	mov.w	r2, #0
 80023e2:	4b8b      	ldr	r3, [pc, #556]	; (8002610 <main+0x330>)
 80023e4:	f7fe fa3a 	bl	800085c <__aeabi_ddiv>
 80023e8:	4602      	mov	r2, r0
 80023ea:	460b      	mov	r3, r1
 80023ec:	4690      	mov	r8, r2
 80023ee:	4699      	mov	r9, r3
 80023f0:	f507 63f7 	add.w	r3, r7, #1976	; 0x7b8
 80023f4:	f5a3 63f5 	sub.w	r3, r3, #1960	; 0x7a8
 80023f8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80023fc:	4618      	mov	r0, r3
 80023fe:	f7fe f899 	bl	8000534 <__aeabi_i2d>
 8002402:	f04f 0200 	mov.w	r2, #0
 8002406:	4b82      	ldr	r3, [pc, #520]	; (8002610 <main+0x330>)
 8002408:	f7fe fa28 	bl	800085c <__aeabi_ddiv>
 800240c:	4602      	mov	r2, r0
 800240e:	460b      	mov	r3, r1
 8002410:	4614      	mov	r4, r2
 8002412:	461d      	mov	r5, r3
 8002414:	f507 63f7 	add.w	r3, r7, #1976	; 0x7b8
 8002418:	f5a3 63f5 	sub.w	r3, r3, #1960	; 0x7a8
 800241c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002420:	4618      	mov	r0, r3
 8002422:	f7fe f887 	bl	8000534 <__aeabi_i2d>
 8002426:	f04f 0200 	mov.w	r2, #0
 800242a:	4b79      	ldr	r3, [pc, #484]	; (8002610 <main+0x330>)
 800242c:	f7fe fa16 	bl	800085c <__aeabi_ddiv>
 8002430:	4602      	mov	r2, r0
 8002432:	460b      	mov	r3, r1
 8002434:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002438:	e9cd 4500 	strd	r4, r5, [sp]
 800243c:	4642      	mov	r2, r8
 800243e:	464b      	mov	r3, r9
 8002440:	4974      	ldr	r1, [pc, #464]	; (8002614 <main+0x334>)
 8002442:	4630      	mov	r0, r6
 8002444:	f006 fe7c 	bl	8009140 <siprintf>
 8002448:	f507 531e 	add.w	r3, r7, #10112	; 0x2780
 800244c:	f103 0334 	add.w	r3, r3, #52	; 0x34
 8002450:	6018      	str	r0, [r3, #0]
		index += accel_size;
 8002452:	4b6e      	ldr	r3, [pc, #440]	; (800260c <main+0x32c>)
 8002454:	681a      	ldr	r2, [r3, #0]
 8002456:	f507 531e 	add.w	r3, r7, #10112	; 0x2780
 800245a:	f103 0334 	add.w	r3, r3, #52	; 0x34
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4413      	add	r3, r2
 8002462:	4a6a      	ldr	r2, [pc, #424]	; (800260c <main+0x32c>)
 8002464:	6013      	str	r3, [r2, #0]
		int gyro_size = sprintf(buffer+index, "Gyro_X: %.2f, Gyro_Y: %.2f, Gyro_Z: %.2f\n", (double)gyroData[0]/GYRO_SENSITIVITY_SCALE_FACTOR, (double)gyroData[1]/GYRO_SENSITIVITY_SCALE_FACTOR, (double)gyroData[2]/GYRO_SENSITIVITY_SCALE_FACTOR);
 8002466:	4b69      	ldr	r3, [pc, #420]	; (800260c <main+0x32c>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	461a      	mov	r2, r3
 800246c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002470:	3b20      	subs	r3, #32
 8002472:	189e      	adds	r6, r3, r2
 8002474:	f507 63f7 	add.w	r3, r7, #1976	; 0x7b8
 8002478:	f5a3 63f6 	sub.w	r3, r3, #1968	; 0x7b0
 800247c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002480:	4618      	mov	r0, r3
 8002482:	f7fe f857 	bl	8000534 <__aeabi_i2d>
 8002486:	a35a      	add	r3, pc, #360	; (adr r3, 80025f0 <main+0x310>)
 8002488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800248c:	f7fe f9e6 	bl	800085c <__aeabi_ddiv>
 8002490:	4602      	mov	r2, r0
 8002492:	460b      	mov	r3, r1
 8002494:	4690      	mov	r8, r2
 8002496:	4699      	mov	r9, r3
 8002498:	f507 63f7 	add.w	r3, r7, #1976	; 0x7b8
 800249c:	f5a3 63f6 	sub.w	r3, r3, #1968	; 0x7b0
 80024a0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80024a4:	4618      	mov	r0, r3
 80024a6:	f7fe f845 	bl	8000534 <__aeabi_i2d>
 80024aa:	a351      	add	r3, pc, #324	; (adr r3, 80025f0 <main+0x310>)
 80024ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024b0:	f7fe f9d4 	bl	800085c <__aeabi_ddiv>
 80024b4:	4602      	mov	r2, r0
 80024b6:	460b      	mov	r3, r1
 80024b8:	4614      	mov	r4, r2
 80024ba:	461d      	mov	r5, r3
 80024bc:	f507 63f7 	add.w	r3, r7, #1976	; 0x7b8
 80024c0:	f5a3 63f6 	sub.w	r3, r3, #1968	; 0x7b0
 80024c4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80024c8:	4618      	mov	r0, r3
 80024ca:	f7fe f833 	bl	8000534 <__aeabi_i2d>
 80024ce:	a348      	add	r3, pc, #288	; (adr r3, 80025f0 <main+0x310>)
 80024d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024d4:	f7fe f9c2 	bl	800085c <__aeabi_ddiv>
 80024d8:	4602      	mov	r2, r0
 80024da:	460b      	mov	r3, r1
 80024dc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80024e0:	e9cd 4500 	strd	r4, r5, [sp]
 80024e4:	4642      	mov	r2, r8
 80024e6:	464b      	mov	r3, r9
 80024e8:	494b      	ldr	r1, [pc, #300]	; (8002618 <main+0x338>)
 80024ea:	4630      	mov	r0, r6
 80024ec:	f006 fe28 	bl	8009140 <siprintf>
 80024f0:	f507 531e 	add.w	r3, r7, #10112	; 0x2780
 80024f4:	f103 0330 	add.w	r3, r3, #48	; 0x30
 80024f8:	6018      	str	r0, [r3, #0]
		index+= gyro_size;
 80024fa:	4b44      	ldr	r3, [pc, #272]	; (800260c <main+0x32c>)
 80024fc:	681a      	ldr	r2, [r3, #0]
 80024fe:	f507 531e 	add.w	r3, r7, #10112	; 0x2780
 8002502:	f103 0330 	add.w	r3, r3, #48	; 0x30
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4413      	add	r3, r2
 800250a:	4a40      	ldr	r2, [pc, #256]	; (800260c <main+0x32c>)
 800250c:	6013      	str	r3, [r2, #0]
		int bmp_data_size = sprintf(buffer+index, "Temperature: %.2f C, Pressure: %.2f hPa\n", temperature / TEMP_SCALE_FACTOR, pressure / PRESSURE_SCALE_FACTOR);
 800250e:	4b3f      	ldr	r3, [pc, #252]	; (800260c <main+0x32c>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	461a      	mov	r2, r3
 8002514:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002518:	3b20      	subs	r3, #32
 800251a:	189c      	adds	r4, r3, r2
 800251c:	f507 63f7 	add.w	r3, r7, #1976	; 0x7b8
 8002520:	f2a3 73b4 	subw	r3, r3, #1972	; 0x7b4
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4618      	mov	r0, r3
 8002528:	f7fe f804 	bl	8000534 <__aeabi_i2d>
 800252c:	f04f 0200 	mov.w	r2, #0
 8002530:	4b3a      	ldr	r3, [pc, #232]	; (800261c <main+0x33c>)
 8002532:	f7fe f993 	bl	800085c <__aeabi_ddiv>
 8002536:	4602      	mov	r2, r0
 8002538:	460b      	mov	r3, r1
 800253a:	4690      	mov	r8, r2
 800253c:	4699      	mov	r9, r3
 800253e:	f507 63f7 	add.w	r3, r7, #1976	; 0x7b8
 8002542:	f5a3 63f7 	sub.w	r3, r3, #1976	; 0x7b8
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4618      	mov	r0, r3
 800254a:	f7fd ffe3 	bl	8000514 <__aeabi_ui2d>
 800254e:	f04f 0200 	mov.w	r2, #0
 8002552:	4b33      	ldr	r3, [pc, #204]	; (8002620 <main+0x340>)
 8002554:	f7fe f982 	bl	800085c <__aeabi_ddiv>
 8002558:	4602      	mov	r2, r0
 800255a:	460b      	mov	r3, r1
 800255c:	e9cd 2300 	strd	r2, r3, [sp]
 8002560:	4642      	mov	r2, r8
 8002562:	464b      	mov	r3, r9
 8002564:	492f      	ldr	r1, [pc, #188]	; (8002624 <main+0x344>)
 8002566:	4620      	mov	r0, r4
 8002568:	f006 fdea 	bl	8009140 <siprintf>
 800256c:	f507 531e 	add.w	r3, r7, #10112	; 0x2780
 8002570:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8002574:	6018      	str	r0, [r3, #0]
		index+= bmp_data_size;
 8002576:	4b25      	ldr	r3, [pc, #148]	; (800260c <main+0x32c>)
 8002578:	681a      	ldr	r2, [r3, #0]
 800257a:	f507 531e 	add.w	r3, r7, #10112	; 0x2780
 800257e:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4413      	add	r3, r2
 8002586:	4a21      	ldr	r2, [pc, #132]	; (800260c <main+0x32c>)
 8002588:	6013      	str	r3, [r2, #0]
		ackTick = currentTick;
 800258a:	4b1d      	ldr	r3, [pc, #116]	; (8002600 <main+0x320>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a1d      	ldr	r2, [pc, #116]	; (8002604 <main+0x324>)
 8002590:	6013      	str	r3, [r2, #0]

	}

	if((currentTick-sdTick) > WRITE_SD_DELAY){
 8002592:	4b1b      	ldr	r3, [pc, #108]	; (8002600 <main+0x320>)
 8002594:	681a      	ldr	r2, [r3, #0]
 8002596:	4b24      	ldr	r3, [pc, #144]	; (8002628 <main+0x348>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	1ad3      	subs	r3, r2, r3
 800259c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80025a0:	f67f aed9 	bls.w	8002356 <main+0x76>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, RESET);
 80025a4:	2200      	movs	r2, #0
 80025a6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80025aa:	4817      	ldr	r0, [pc, #92]	; (8002608 <main+0x328>)
 80025ac:	f001 f864 	bl	8003678 <HAL_GPIO_WritePin>
		process_SD_card(buffer);
 80025b0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80025b4:	3b20      	subs	r3, #32
 80025b6:	4618      	mov	r0, r3
 80025b8:	f000 f8f8 	bl	80027ac <process_SD_card>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, SET);
 80025bc:	2201      	movs	r2, #1
 80025be:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80025c2:	4811      	ldr	r0, [pc, #68]	; (8002608 <main+0x328>)
 80025c4:	f001 f858 	bl	8003678 <HAL_GPIO_WritePin>
		index = 0;
 80025c8:	4b10      	ldr	r3, [pc, #64]	; (800260c <main+0x32c>)
 80025ca:	2200      	movs	r2, #0
 80025cc:	601a      	str	r2, [r3, #0]
		sdTick = currentTick;
 80025ce:	4b0c      	ldr	r3, [pc, #48]	; (8002600 <main+0x320>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a15      	ldr	r2, [pc, #84]	; (8002628 <main+0x348>)
 80025d4:	6013      	str	r3, [r2, #0]
		memset(buffer, 0, DATA_BUFFER_SIZE);
 80025d6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80025da:	3b20      	subs	r3, #32
 80025dc:	f242 7210 	movw	r2, #10000	; 0x2710
 80025e0:	2100      	movs	r1, #0
 80025e2:	4618      	mov	r0, r3
 80025e4:	f006 f8ac 	bl	8008740 <memset>
  {
 80025e8:	e6b5      	b.n	8002356 <main+0x76>
 80025ea:	bf00      	nop
 80025ec:	f3af 8000 	nop.w
 80025f0:	66666666 	.word	0x66666666
 80025f4:	40406666 	.word	0x40406666
 80025f8:	20000228 	.word	0x20000228
 80025fc:	0800b630 	.word	0x0800b630
 8002600:	20000218 	.word	0x20000218
 8002604:	2000021c 	.word	0x2000021c
 8002608:	40020800 	.word	0x40020800
 800260c:	20000220 	.word	0x20000220
 8002610:	40b00000 	.word	0x40b00000
 8002614:	0800b674 	.word	0x0800b674
 8002618:	0800b6a4 	.word	0x0800b6a4
 800261c:	40590000 	.word	0x40590000
 8002620:	40d90000 	.word	0x40d90000
 8002624:	0800b6d0 	.word	0x0800b6d0
 8002628:	20000224 	.word	0x20000224

0800262c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b094      	sub	sp, #80	; 0x50
 8002630:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002632:	f107 0320 	add.w	r3, r7, #32
 8002636:	2230      	movs	r2, #48	; 0x30
 8002638:	2100      	movs	r1, #0
 800263a:	4618      	mov	r0, r3
 800263c:	f006 f880 	bl	8008740 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002640:	f107 030c 	add.w	r3, r7, #12
 8002644:	2200      	movs	r2, #0
 8002646:	601a      	str	r2, [r3, #0]
 8002648:	605a      	str	r2, [r3, #4]
 800264a:	609a      	str	r2, [r3, #8]
 800264c:	60da      	str	r2, [r3, #12]
 800264e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002650:	2300      	movs	r3, #0
 8002652:	60bb      	str	r3, [r7, #8]
 8002654:	4b22      	ldr	r3, [pc, #136]	; (80026e0 <SystemClock_Config+0xb4>)
 8002656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002658:	4a21      	ldr	r2, [pc, #132]	; (80026e0 <SystemClock_Config+0xb4>)
 800265a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800265e:	6413      	str	r3, [r2, #64]	; 0x40
 8002660:	4b1f      	ldr	r3, [pc, #124]	; (80026e0 <SystemClock_Config+0xb4>)
 8002662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002664:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002668:	60bb      	str	r3, [r7, #8]
 800266a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800266c:	2300      	movs	r3, #0
 800266e:	607b      	str	r3, [r7, #4]
 8002670:	4b1c      	ldr	r3, [pc, #112]	; (80026e4 <SystemClock_Config+0xb8>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a1b      	ldr	r2, [pc, #108]	; (80026e4 <SystemClock_Config+0xb8>)
 8002676:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800267a:	6013      	str	r3, [r2, #0]
 800267c:	4b19      	ldr	r3, [pc, #100]	; (80026e4 <SystemClock_Config+0xb8>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002684:	607b      	str	r3, [r7, #4]
 8002686:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002688:	2302      	movs	r3, #2
 800268a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800268c:	2301      	movs	r3, #1
 800268e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002690:	2310      	movs	r3, #16
 8002692:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002694:	2300      	movs	r3, #0
 8002696:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002698:	f107 0320 	add.w	r3, r7, #32
 800269c:	4618      	mov	r0, r3
 800269e:	f001 f805 	bl	80036ac <HAL_RCC_OscConfig>
 80026a2:	4603      	mov	r3, r0
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d001      	beq.n	80026ac <SystemClock_Config+0x80>
  {
    Error_Handler();
 80026a8:	f000 f8f0 	bl	800288c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80026ac:	230f      	movs	r3, #15
 80026ae:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80026b0:	2300      	movs	r3, #0
 80026b2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80026b4:	2300      	movs	r3, #0
 80026b6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80026b8:	2300      	movs	r3, #0
 80026ba:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80026bc:	2300      	movs	r3, #0
 80026be:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80026c0:	f107 030c 	add.w	r3, r7, #12
 80026c4:	2100      	movs	r1, #0
 80026c6:	4618      	mov	r0, r3
 80026c8:	f001 fa68 	bl	8003b9c <HAL_RCC_ClockConfig>
 80026cc:	4603      	mov	r3, r0
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d001      	beq.n	80026d6 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80026d2:	f000 f8db 	bl	800288c <Error_Handler>
  }
}
 80026d6:	bf00      	nop
 80026d8:	3750      	adds	r7, #80	; 0x50
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}
 80026de:	bf00      	nop
 80026e0:	40023800 	.word	0x40023800
 80026e4:	40007000 	.word	0x40007000

080026e8 <init_SD_card>:

/* USER CODE BEGIN 4 */
void init_SD_card(void){
 80026e8:	b580      	push	{r7, lr}
 80026ea:	f5ad 5d01 	sub.w	sp, sp, #8256	; 0x2040
 80026ee:	b08c      	sub	sp, #48	; 0x30
 80026f0:	af00      	add	r7, sp, #0
	FATFS       FatFs;
	FRESULT     fres;
	FIL         fil;

	//Mount the SD Card
	fres = f_mount(&FatFs, "", 1);    //1=mount now
 80026f2:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80026f6:	f103 0310 	add.w	r3, r3, #16
 80026fa:	3b1c      	subs	r3, #28
 80026fc:	2201      	movs	r2, #1
 80026fe:	4926      	ldr	r1, [pc, #152]	; (8002798 <init_SD_card+0xb0>)
 8002700:	4618      	mov	r0, r3
 8002702:	f004 ffdf 	bl	80076c4 <f_mount>
 8002706:	4603      	mov	r3, r0
 8002708:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 800270c:	f102 022f 	add.w	r2, r2, #47	; 0x2f
 8002710:	7013      	strb	r3, [r2, #0]
	if (fres != FR_OK)
 8002712:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8002716:	f103 032f 	add.w	r3, r3, #47	; 0x2f
 800271a:	781b      	ldrb	r3, [r3, #0]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d008      	beq.n	8002732 <init_SD_card+0x4a>
	{
	  printf("No SD Card found : (%i)\r\n", fres);
 8002720:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8002724:	f103 032f 	add.w	r3, r3, #47	; 0x2f
 8002728:	781b      	ldrb	r3, [r3, #0]
 800272a:	4619      	mov	r1, r3
 800272c:	481b      	ldr	r0, [pc, #108]	; (800279c <init_SD_card+0xb4>)
 800272e:	f006 fc79 	bl	8009024 <iprintf>
	}
	printf("SD Card Mounted Successfully!!!\r\n");
 8002732:	481b      	ldr	r0, [pc, #108]	; (80027a0 <init_SD_card+0xb8>)
 8002734:	f006 fcfc 	bl	8009130 <puts>
	//Create file for record
	fres = f_open(&fil, "test.txt", FA_WRITE | FA_READ | FA_CREATE_NEW);
 8002738:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800273c:	3b2c      	subs	r3, #44	; 0x2c
 800273e:	2207      	movs	r2, #7
 8002740:	4918      	ldr	r1, [pc, #96]	; (80027a4 <init_SD_card+0xbc>)
 8002742:	4618      	mov	r0, r3
 8002744:	f005 f804 	bl	8007750 <f_open>
 8002748:	4603      	mov	r3, r0
 800274a:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 800274e:	f102 022f 	add.w	r2, r2, #47	; 0x2f
 8002752:	7013      	strb	r3, [r2, #0]
	if(fres != FR_OK)
 8002754:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8002758:	f103 032f 	add.w	r3, r3, #47	; 0x2f
 800275c:	781b      	ldrb	r3, [r3, #0]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d008      	beq.n	8002774 <init_SD_card+0x8c>
	{
	  printf("File creation/open Error : (%i)\r\n", fres);
 8002762:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8002766:	f103 032f 	add.w	r3, r3, #47	; 0x2f
 800276a:	781b      	ldrb	r3, [r3, #0]
 800276c:	4619      	mov	r1, r3
 800276e:	480e      	ldr	r0, [pc, #56]	; (80027a8 <init_SD_card+0xc0>)
 8002770:	f006 fc58 	bl	8009024 <iprintf>
	}
	f_mount(NULL, "", 0);
 8002774:	2200      	movs	r2, #0
 8002776:	4908      	ldr	r1, [pc, #32]	; (8002798 <init_SD_card+0xb0>)
 8002778:	2000      	movs	r0, #0
 800277a:	f004 ffa3 	bl	80076c4 <f_mount>
	f_close(&fil);
 800277e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002782:	3b2c      	subs	r3, #44	; 0x2c
 8002784:	4618      	mov	r0, r3
 8002786:	f005 fbc1 	bl	8007f0c <f_close>
}
 800278a:	bf00      	nop
 800278c:	f507 5701 	add.w	r7, r7, #8256	; 0x2040
 8002790:	3730      	adds	r7, #48	; 0x30
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}
 8002796:	bf00      	nop
 8002798:	0800b6fc 	.word	0x0800b6fc
 800279c:	0800b700 	.word	0x0800b700
 80027a0:	0800b71c 	.word	0x0800b71c
 80027a4:	0800b740 	.word	0x0800b740
 80027a8:	0800b74c 	.word	0x0800b74c

080027ac <process_SD_card>:

void process_SD_card(const char *datas)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	f5ad 5d01 	sub.w	sp, sp, #8256	; 0x2040
 80027b2:	b08e      	sub	sp, #56	; 0x38
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80027ba:	f843 0c74 	str.w	r0, [r3, #-116]
	FIL         fil;                  //File handle
	FRESULT     fres;                 //Result after operations
	FATFS       FatFs;

	//Mount the SD Card
	fres = f_mount(&FatFs, "", 1);    //1=mount now
 80027be:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80027c2:	3b2c      	subs	r3, #44	; 0x2c
 80027c4:	2201      	movs	r2, #1
 80027c6:	492d      	ldr	r1, [pc, #180]	; (800287c <process_SD_card+0xd0>)
 80027c8:	4618      	mov	r0, r3
 80027ca:	f004 ff7b 	bl	80076c4 <f_mount>
 80027ce:	4603      	mov	r3, r0
 80027d0:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 80027d4:	f102 0237 	add.w	r2, r2, #55	; 0x37
 80027d8:	7013      	strb	r3, [r2, #0]
	if (fres != FR_OK)
 80027da:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 80027de:	f103 0337 	add.w	r3, r3, #55	; 0x37
 80027e2:	781b      	ldrb	r3, [r3, #0]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d008      	beq.n	80027fa <process_SD_card+0x4e>
	{
	  printf("No SD Card found : (%i)\r\n", fres);
 80027e8:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 80027ec:	f103 0337 	add.w	r3, r3, #55	; 0x37
 80027f0:	781b      	ldrb	r3, [r3, #0]
 80027f2:	4619      	mov	r1, r3
 80027f4:	4822      	ldr	r0, [pc, #136]	; (8002880 <process_SD_card+0xd4>)
 80027f6:	f006 fc15 	bl	8009024 <iprintf>
	}

	//Open the file
	fres = f_open(&fil, "test.txt", FA_OPEN_APPEND | FA_WRITE );
 80027fa:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80027fe:	f103 0318 	add.w	r3, r3, #24
 8002802:	3b14      	subs	r3, #20
 8002804:	2232      	movs	r2, #50	; 0x32
 8002806:	491f      	ldr	r1, [pc, #124]	; (8002884 <process_SD_card+0xd8>)
 8002808:	4618      	mov	r0, r3
 800280a:	f004 ffa1 	bl	8007750 <f_open>
 800280e:	4603      	mov	r3, r0
 8002810:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 8002814:	f102 0237 	add.w	r2, r2, #55	; 0x37
 8002818:	7013      	strb	r3, [r2, #0]
	if(fres != FR_OK)
 800281a:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 800281e:	f103 0337 	add.w	r3, r3, #55	; 0x37
 8002822:	781b      	ldrb	r3, [r3, #0]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d008      	beq.n	800283a <process_SD_card+0x8e>
	{
	  printf("File creation/open Error : (%i)\r\n", fres);
 8002828:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 800282c:	f103 0337 	add.w	r3, r3, #55	; 0x37
 8002830:	781b      	ldrb	r3, [r3, #0]
 8002832:	4619      	mov	r1, r3
 8002834:	4814      	ldr	r0, [pc, #80]	; (8002888 <process_SD_card+0xdc>)
 8002836:	f006 fbf5 	bl	8009024 <iprintf>
	}
	//printf("Writing data!!!\r\n");
	//write the data
	f_printf(&fil, datas);
 800283a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800283e:	461a      	mov	r2, r3
 8002840:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8002844:	f103 0318 	add.w	r3, r3, #24
 8002848:	3b14      	subs	r3, #20
 800284a:	f852 1c74 	ldr.w	r1, [r2, #-116]
 800284e:	4618      	mov	r0, r3
 8002850:	f005 fbfe 	bl	8008050 <f_printf>
	//close your file
	f_close(&fil);
 8002854:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8002858:	f103 0318 	add.w	r3, r3, #24
 800285c:	3b14      	subs	r3, #20
 800285e:	4618      	mov	r0, r3
 8002860:	f005 fb54 	bl	8007f0c <f_close>
	//We're done, so de-mount the drive
	f_mount(NULL, "", 0);
 8002864:	2200      	movs	r2, #0
 8002866:	4905      	ldr	r1, [pc, #20]	; (800287c <process_SD_card+0xd0>)
 8002868:	2000      	movs	r0, #0
 800286a:	f004 ff2b 	bl	80076c4 <f_mount>
	//printf("SD Card Unmounted Successfully!!!\r\n");
  }
 800286e:	bf00      	nop
 8002870:	f507 5701 	add.w	r7, r7, #8256	; 0x2040
 8002874:	3738      	adds	r7, #56	; 0x38
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}
 800287a:	bf00      	nop
 800287c:	0800b6fc 	.word	0x0800b6fc
 8002880:	0800b700 	.word	0x0800b700
 8002884:	0800b740 	.word	0x0800b740
 8002888:	0800b74c 	.word	0x0800b74c

0800288c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800288c:	b480      	push	{r7}
 800288e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002890:	b672      	cpsid	i
}
 8002892:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002894:	e7fe      	b.n	8002894 <Error_Handler+0x8>
	...

08002898 <MPU9250_CS_LOW>:
#define MPU9250_GYRO_YOUT_H 0x45
#define MPU9250_GYRO_YOUT_L 0x46
#define MPU9250_GYRO_ZOUT_H 0x47
#define MPU9250_GYRO_ZOUT_L 0x48

void MPU9250_CS_LOW() {
 8002898:	b580      	push	{r7, lr}
 800289a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(MPU9250_CS_PORT, MPU9250_CS_PIN, GPIO_PIN_RESET);
 800289c:	2200      	movs	r2, #0
 800289e:	2110      	movs	r1, #16
 80028a0:	4802      	ldr	r0, [pc, #8]	; (80028ac <MPU9250_CS_LOW+0x14>)
 80028a2:	f000 fee9 	bl	8003678 <HAL_GPIO_WritePin>
}
 80028a6:	bf00      	nop
 80028a8:	bd80      	pop	{r7, pc}
 80028aa:	bf00      	nop
 80028ac:	40020000 	.word	0x40020000

080028b0 <MPU9250_CS_HIGH>:

void MPU9250_CS_HIGH() {
 80028b0:	b580      	push	{r7, lr}
 80028b2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(MPU9250_CS_PORT, MPU9250_CS_PIN, GPIO_PIN_SET);
 80028b4:	2201      	movs	r2, #1
 80028b6:	2110      	movs	r1, #16
 80028b8:	4802      	ldr	r0, [pc, #8]	; (80028c4 <MPU9250_CS_HIGH+0x14>)
 80028ba:	f000 fedd 	bl	8003678 <HAL_GPIO_WritePin>
}
 80028be:	bf00      	nop
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	bf00      	nop
 80028c4:	40020000 	.word	0x40020000

080028c8 <MPU9250_SPI_Write>:

void MPU9250_SPI_Write(uint8_t reg, uint8_t data, SPI_HandleTypeDef *hspi) {
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b082      	sub	sp, #8
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	4603      	mov	r3, r0
 80028d0:	603a      	str	r2, [r7, #0]
 80028d2:	71fb      	strb	r3, [r7, #7]
 80028d4:	460b      	mov	r3, r1
 80028d6:	71bb      	strb	r3, [r7, #6]
    MPU9250_CS_LOW();
 80028d8:	f7ff ffde 	bl	8002898 <MPU9250_CS_LOW>
    HAL_SPI_Transmit(hspi, &reg, 1, HAL_MAX_DELAY);
 80028dc:	1df9      	adds	r1, r7, #7
 80028de:	f04f 33ff 	mov.w	r3, #4294967295
 80028e2:	2201      	movs	r2, #1
 80028e4:	6838      	ldr	r0, [r7, #0]
 80028e6:	f001 fbc2 	bl	800406e <HAL_SPI_Transmit>
    HAL_SPI_Transmit(hspi, &data, 1, HAL_MAX_DELAY);
 80028ea:	1db9      	adds	r1, r7, #6
 80028ec:	f04f 33ff 	mov.w	r3, #4294967295
 80028f0:	2201      	movs	r2, #1
 80028f2:	6838      	ldr	r0, [r7, #0]
 80028f4:	f001 fbbb 	bl	800406e <HAL_SPI_Transmit>
    MPU9250_CS_HIGH();
 80028f8:	f7ff ffda 	bl	80028b0 <MPU9250_CS_HIGH>
}
 80028fc:	bf00      	nop
 80028fe:	3708      	adds	r7, #8
 8002900:	46bd      	mov	sp, r7
 8002902:	bd80      	pop	{r7, pc}

08002904 <MPU9250_SPI_Read>:

void MPU9250_SPI_Read(uint8_t reg, uint8_t* data, uint16_t size, SPI_HandleTypeDef *hspi) {
 8002904:	b580      	push	{r7, lr}
 8002906:	b084      	sub	sp, #16
 8002908:	af00      	add	r7, sp, #0
 800290a:	60b9      	str	r1, [r7, #8]
 800290c:	607b      	str	r3, [r7, #4]
 800290e:	4603      	mov	r3, r0
 8002910:	73fb      	strb	r3, [r7, #15]
 8002912:	4613      	mov	r3, r2
 8002914:	81bb      	strh	r3, [r7, #12]
    reg |= 0x80; // Set MSB to 1 for read operation
 8002916:	7bfb      	ldrb	r3, [r7, #15]
 8002918:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800291c:	b2db      	uxtb	r3, r3
 800291e:	73fb      	strb	r3, [r7, #15]
    MPU9250_CS_LOW();
 8002920:	f7ff ffba 	bl	8002898 <MPU9250_CS_LOW>
    HAL_SPI_Transmit(hspi, &reg, 1, HAL_MAX_DELAY);
 8002924:	f107 010f 	add.w	r1, r7, #15
 8002928:	f04f 33ff 	mov.w	r3, #4294967295
 800292c:	2201      	movs	r2, #1
 800292e:	6878      	ldr	r0, [r7, #4]
 8002930:	f001 fb9d 	bl	800406e <HAL_SPI_Transmit>
    HAL_SPI_Receive(hspi, data, size, HAL_MAX_DELAY);
 8002934:	89ba      	ldrh	r2, [r7, #12]
 8002936:	f04f 33ff 	mov.w	r3, #4294967295
 800293a:	68b9      	ldr	r1, [r7, #8]
 800293c:	6878      	ldr	r0, [r7, #4]
 800293e:	f001 fcd2 	bl	80042e6 <HAL_SPI_Receive>
    MPU9250_CS_HIGH();
 8002942:	f7ff ffb5 	bl	80028b0 <MPU9250_CS_HIGH>
}
 8002946:	bf00      	nop
 8002948:	3710      	adds	r7, #16
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}

0800294e <MPU9250_ReadAccel>:

void MPU9250_ReadAccel(int16_t* accelData, SPI_HandleTypeDef *hspi) {
 800294e:	b580      	push	{r7, lr}
 8002950:	b084      	sub	sp, #16
 8002952:	af00      	add	r7, sp, #0
 8002954:	6078      	str	r0, [r7, #4]
 8002956:	6039      	str	r1, [r7, #0]
    uint8_t buffer[6];

    // Lecture des données d'accélération brute
    MPU9250_SPI_Read(MPU9250_ACCEL_XOUT_H, buffer, 6, hspi);
 8002958:	f107 0108 	add.w	r1, r7, #8
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	2206      	movs	r2, #6
 8002960:	203b      	movs	r0, #59	; 0x3b
 8002962:	f7ff ffcf 	bl	8002904 <MPU9250_SPI_Read>

    // Concaténation des octets pour former les données brutes
    accelData[0] = (int16_t)((buffer[0] << 8) | buffer[1]);
 8002966:	7a3b      	ldrb	r3, [r7, #8]
 8002968:	021b      	lsls	r3, r3, #8
 800296a:	b21a      	sxth	r2, r3
 800296c:	7a7b      	ldrb	r3, [r7, #9]
 800296e:	b21b      	sxth	r3, r3
 8002970:	4313      	orrs	r3, r2
 8002972:	b21a      	sxth	r2, r3
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	801a      	strh	r2, [r3, #0]
    accelData[1] = (int16_t)((buffer[2] << 8) | buffer[3]);
 8002978:	7abb      	ldrb	r3, [r7, #10]
 800297a:	021b      	lsls	r3, r3, #8
 800297c:	b219      	sxth	r1, r3
 800297e:	7afb      	ldrb	r3, [r7, #11]
 8002980:	b21a      	sxth	r2, r3
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	3302      	adds	r3, #2
 8002986:	430a      	orrs	r2, r1
 8002988:	b212      	sxth	r2, r2
 800298a:	801a      	strh	r2, [r3, #0]
    accelData[2] = (int16_t)((buffer[4] << 8) | buffer[5]);
 800298c:	7b3b      	ldrb	r3, [r7, #12]
 800298e:	021b      	lsls	r3, r3, #8
 8002990:	b219      	sxth	r1, r3
 8002992:	7b7b      	ldrb	r3, [r7, #13]
 8002994:	b21a      	sxth	r2, r3
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	3304      	adds	r3, #4
 800299a:	430a      	orrs	r2, r1
 800299c:	b212      	sxth	r2, r2
 800299e:	801a      	strh	r2, [r3, #0]
}
 80029a0:	bf00      	nop
 80029a2:	3710      	adds	r7, #16
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bd80      	pop	{r7, pc}

080029a8 <MPU9250_ReadGyro>:

void MPU9250_ReadGyro(int16_t* gyroData, SPI_HandleTypeDef *hspi) {
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b084      	sub	sp, #16
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
 80029b0:	6039      	str	r1, [r7, #0]
    uint8_t buffer[6];

    // Lecture des données d'accélération brute
    MPU9250_SPI_Read(MPU9250_GYRO_XOUT_H, buffer, 6, hspi);
 80029b2:	f107 0108 	add.w	r1, r7, #8
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	2206      	movs	r2, #6
 80029ba:	2043      	movs	r0, #67	; 0x43
 80029bc:	f7ff ffa2 	bl	8002904 <MPU9250_SPI_Read>

    // Concaténation des octets pour former les données brutes
    gyroData[0] = (int16_t)((buffer[0] << 8) | buffer[1]);
 80029c0:	7a3b      	ldrb	r3, [r7, #8]
 80029c2:	021b      	lsls	r3, r3, #8
 80029c4:	b21a      	sxth	r2, r3
 80029c6:	7a7b      	ldrb	r3, [r7, #9]
 80029c8:	b21b      	sxth	r3, r3
 80029ca:	4313      	orrs	r3, r2
 80029cc:	b21a      	sxth	r2, r3
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	801a      	strh	r2, [r3, #0]
    gyroData[1] = (int16_t)((buffer[2] << 8) | buffer[3]);
 80029d2:	7abb      	ldrb	r3, [r7, #10]
 80029d4:	021b      	lsls	r3, r3, #8
 80029d6:	b219      	sxth	r1, r3
 80029d8:	7afb      	ldrb	r3, [r7, #11]
 80029da:	b21a      	sxth	r2, r3
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	3302      	adds	r3, #2
 80029e0:	430a      	orrs	r2, r1
 80029e2:	b212      	sxth	r2, r2
 80029e4:	801a      	strh	r2, [r3, #0]
    gyroData[2] = (int16_t)((buffer[4] << 8) | buffer[5]);
 80029e6:	7b3b      	ldrb	r3, [r7, #12]
 80029e8:	021b      	lsls	r3, r3, #8
 80029ea:	b219      	sxth	r1, r3
 80029ec:	7b7b      	ldrb	r3, [r7, #13]
 80029ee:	b21a      	sxth	r2, r3
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	3304      	adds	r3, #4
 80029f4:	430a      	orrs	r2, r1
 80029f6:	b212      	sxth	r2, r2
 80029f8:	801a      	strh	r2, [r3, #0]
}
 80029fa:	bf00      	nop
 80029fc:	3710      	adds	r7, #16
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}

08002a02 <MPU9250_Init>:

void MPU9250_Init(SPI_HandleTypeDef hspi){
 8002a02:	b084      	sub	sp, #16
 8002a04:	b580      	push	{r7, lr}
 8002a06:	af00      	add	r7, sp, #0
 8002a08:	f107 0c08 	add.w	ip, r7, #8
 8002a0c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	// Désactiver le module de gestion de l'alimentation pour permettre la configuration
	MPU9250_SPI_Write(MPU9250_REG_PWR_MGMT_1, 0x00, &hspi);
 8002a10:	f107 0208 	add.w	r2, r7, #8
 8002a14:	2100      	movs	r1, #0
 8002a16:	206b      	movs	r0, #107	; 0x6b
 8002a18:	f7ff ff56 	bl	80028c8 <MPU9250_SPI_Write>

	// Configurer d'autres registres selon vos besoins
	// ...

	// Par exemple, configurer la fréquence d'échantillonnage
	MPU9250_SPI_Write(MPU9250_REG_SMPLRT_DIV, 0x07, &hspi); // 1kHz sample rate
 8002a1c:	f107 0208 	add.w	r2, r7, #8
 8002a20:	2107      	movs	r1, #7
 8002a22:	2019      	movs	r0, #25
 8002a24:	f7ff ff50 	bl	80028c8 <MPU9250_SPI_Write>

	// Configurer le mode de mesure gyroscopique et accélérative
	MPU9250_SPI_Write(MPU9250_REG_CONFIG, 0x00, &hspi); // DLPF disabled, gyro 250Hz, accel 250Hz
 8002a28:	f107 0208 	add.w	r2, r7, #8
 8002a2c:	2100      	movs	r1, #0
 8002a2e:	201a      	movs	r0, #26
 8002a30:	f7ff ff4a 	bl	80028c8 <MPU9250_SPI_Write>
	MPU9250_SPI_Write(MPU9250_REG_GYRO_CONFIG, 0x10, &hspi); // +/- 500dps
 8002a34:	f107 0208 	add.w	r2, r7, #8
 8002a38:	2110      	movs	r1, #16
 8002a3a:	201b      	movs	r0, #27
 8002a3c:	f7ff ff44 	bl	80028c8 <MPU9250_SPI_Write>
	MPU9250_SPI_Write(MPU9250_REG_ACCEL_CONFIG, 0x10, &hspi); // +/- 8g
 8002a40:	f107 0208 	add.w	r2, r7, #8
 8002a44:	2110      	movs	r1, #16
 8002a46:	201c      	movs	r0, #28
 8002a48:	f7ff ff3e 	bl	80028c8 <MPU9250_SPI_Write>

	// Réactiver le module de gestion de l'alimentation
	MPU9250_SPI_Write(MPU9250_REG_PWR_MGMT_1, 0x01, &hspi);
 8002a4c:	f107 0208 	add.w	r2, r7, #8
 8002a50:	2101      	movs	r1, #1
 8002a52:	206b      	movs	r0, #107	; 0x6b
 8002a54:	f7ff ff38 	bl	80028c8 <MPU9250_SPI_Write>
}
 8002a58:	bf00      	nop
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002a60:	b004      	add	sp, #16
 8002a62:	4770      	bx	lr

08002a64 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi3;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002a68:	4b17      	ldr	r3, [pc, #92]	; (8002ac8 <MX_SPI1_Init+0x64>)
 8002a6a:	4a18      	ldr	r2, [pc, #96]	; (8002acc <MX_SPI1_Init+0x68>)
 8002a6c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002a6e:	4b16      	ldr	r3, [pc, #88]	; (8002ac8 <MX_SPI1_Init+0x64>)
 8002a70:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002a74:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002a76:	4b14      	ldr	r3, [pc, #80]	; (8002ac8 <MX_SPI1_Init+0x64>)
 8002a78:	2200      	movs	r2, #0
 8002a7a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002a7c:	4b12      	ldr	r3, [pc, #72]	; (8002ac8 <MX_SPI1_Init+0x64>)
 8002a7e:	2200      	movs	r2, #0
 8002a80:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8002a82:	4b11      	ldr	r3, [pc, #68]	; (8002ac8 <MX_SPI1_Init+0x64>)
 8002a84:	2202      	movs	r2, #2
 8002a86:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002a88:	4b0f      	ldr	r3, [pc, #60]	; (8002ac8 <MX_SPI1_Init+0x64>)
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002a8e:	4b0e      	ldr	r3, [pc, #56]	; (8002ac8 <MX_SPI1_Init+0x64>)
 8002a90:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a94:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8002a96:	4b0c      	ldr	r3, [pc, #48]	; (8002ac8 <MX_SPI1_Init+0x64>)
 8002a98:	2228      	movs	r2, #40	; 0x28
 8002a9a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002a9c:	4b0a      	ldr	r3, [pc, #40]	; (8002ac8 <MX_SPI1_Init+0x64>)
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002aa2:	4b09      	ldr	r3, [pc, #36]	; (8002ac8 <MX_SPI1_Init+0x64>)
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002aa8:	4b07      	ldr	r3, [pc, #28]	; (8002ac8 <MX_SPI1_Init+0x64>)
 8002aaa:	2200      	movs	r2, #0
 8002aac:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002aae:	4b06      	ldr	r3, [pc, #24]	; (8002ac8 <MX_SPI1_Init+0x64>)
 8002ab0:	220a      	movs	r2, #10
 8002ab2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002ab4:	4804      	ldr	r0, [pc, #16]	; (8002ac8 <MX_SPI1_Init+0x64>)
 8002ab6:	f001 fa51 	bl	8003f5c <HAL_SPI_Init>
 8002aba:	4603      	mov	r3, r0
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d001      	beq.n	8002ac4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002ac0:	f7ff fee4 	bl	800288c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002ac4:	bf00      	nop
 8002ac6:	bd80      	pop	{r7, pc}
 8002ac8:	20000228 	.word	0x20000228
 8002acc:	40013000 	.word	0x40013000

08002ad0 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8002ad4:	4b17      	ldr	r3, [pc, #92]	; (8002b34 <MX_SPI3_Init+0x64>)
 8002ad6:	4a18      	ldr	r2, [pc, #96]	; (8002b38 <MX_SPI3_Init+0x68>)
 8002ad8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8002ada:	4b16      	ldr	r3, [pc, #88]	; (8002b34 <MX_SPI3_Init+0x64>)
 8002adc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002ae0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8002ae2:	4b14      	ldr	r3, [pc, #80]	; (8002b34 <MX_SPI3_Init+0x64>)
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8002ae8:	4b12      	ldr	r3, [pc, #72]	; (8002b34 <MX_SPI3_Init+0x64>)
 8002aea:	2200      	movs	r2, #0
 8002aec:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002aee:	4b11      	ldr	r3, [pc, #68]	; (8002b34 <MX_SPI3_Init+0x64>)
 8002af0:	2200      	movs	r2, #0
 8002af2:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002af4:	4b0f      	ldr	r3, [pc, #60]	; (8002b34 <MX_SPI3_Init+0x64>)
 8002af6:	2200      	movs	r2, #0
 8002af8:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8002afa:	4b0e      	ldr	r3, [pc, #56]	; (8002b34 <MX_SPI3_Init+0x64>)
 8002afc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b00:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002b02:	4b0c      	ldr	r3, [pc, #48]	; (8002b34 <MX_SPI3_Init+0x64>)
 8002b04:	2200      	movs	r2, #0
 8002b06:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002b08:	4b0a      	ldr	r3, [pc, #40]	; (8002b34 <MX_SPI3_Init+0x64>)
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8002b0e:	4b09      	ldr	r3, [pc, #36]	; (8002b34 <MX_SPI3_Init+0x64>)
 8002b10:	2200      	movs	r2, #0
 8002b12:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b14:	4b07      	ldr	r3, [pc, #28]	; (8002b34 <MX_SPI3_Init+0x64>)
 8002b16:	2200      	movs	r2, #0
 8002b18:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8002b1a:	4b06      	ldr	r3, [pc, #24]	; (8002b34 <MX_SPI3_Init+0x64>)
 8002b1c:	220a      	movs	r2, #10
 8002b1e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8002b20:	4804      	ldr	r0, [pc, #16]	; (8002b34 <MX_SPI3_Init+0x64>)
 8002b22:	f001 fa1b 	bl	8003f5c <HAL_SPI_Init>
 8002b26:	4603      	mov	r3, r0
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d001      	beq.n	8002b30 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8002b2c:	f7ff feae 	bl	800288c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8002b30:	bf00      	nop
 8002b32:	bd80      	pop	{r7, pc}
 8002b34:	20000280 	.word	0x20000280
 8002b38:	40003c00 	.word	0x40003c00

08002b3c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b08c      	sub	sp, #48	; 0x30
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b44:	f107 031c 	add.w	r3, r7, #28
 8002b48:	2200      	movs	r2, #0
 8002b4a:	601a      	str	r2, [r3, #0]
 8002b4c:	605a      	str	r2, [r3, #4]
 8002b4e:	609a      	str	r2, [r3, #8]
 8002b50:	60da      	str	r2, [r3, #12]
 8002b52:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a32      	ldr	r2, [pc, #200]	; (8002c24 <HAL_SPI_MspInit+0xe8>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d12c      	bne.n	8002bb8 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002b5e:	2300      	movs	r3, #0
 8002b60:	61bb      	str	r3, [r7, #24]
 8002b62:	4b31      	ldr	r3, [pc, #196]	; (8002c28 <HAL_SPI_MspInit+0xec>)
 8002b64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b66:	4a30      	ldr	r2, [pc, #192]	; (8002c28 <HAL_SPI_MspInit+0xec>)
 8002b68:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002b6c:	6453      	str	r3, [r2, #68]	; 0x44
 8002b6e:	4b2e      	ldr	r3, [pc, #184]	; (8002c28 <HAL_SPI_MspInit+0xec>)
 8002b70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b72:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b76:	61bb      	str	r3, [r7, #24]
 8002b78:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	617b      	str	r3, [r7, #20]
 8002b7e:	4b2a      	ldr	r3, [pc, #168]	; (8002c28 <HAL_SPI_MspInit+0xec>)
 8002b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b82:	4a29      	ldr	r2, [pc, #164]	; (8002c28 <HAL_SPI_MspInit+0xec>)
 8002b84:	f043 0301 	orr.w	r3, r3, #1
 8002b88:	6313      	str	r3, [r2, #48]	; 0x30
 8002b8a:	4b27      	ldr	r3, [pc, #156]	; (8002c28 <HAL_SPI_MspInit+0xec>)
 8002b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b8e:	f003 0301 	and.w	r3, r3, #1
 8002b92:	617b      	str	r3, [r7, #20]
 8002b94:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002b96:	23e0      	movs	r3, #224	; 0xe0
 8002b98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b9a:	2302      	movs	r3, #2
 8002b9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ba2:	2303      	movs	r3, #3
 8002ba4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002ba6:	2305      	movs	r3, #5
 8002ba8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002baa:	f107 031c 	add.w	r3, r7, #28
 8002bae:	4619      	mov	r1, r3
 8002bb0:	481e      	ldr	r0, [pc, #120]	; (8002c2c <HAL_SPI_MspInit+0xf0>)
 8002bb2:	f000 fbdd 	bl	8003370 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8002bb6:	e030      	b.n	8002c1a <HAL_SPI_MspInit+0xde>
  else if(spiHandle->Instance==SPI3)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a1c      	ldr	r2, [pc, #112]	; (8002c30 <HAL_SPI_MspInit+0xf4>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d12b      	bne.n	8002c1a <HAL_SPI_MspInit+0xde>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	613b      	str	r3, [r7, #16]
 8002bc6:	4b18      	ldr	r3, [pc, #96]	; (8002c28 <HAL_SPI_MspInit+0xec>)
 8002bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bca:	4a17      	ldr	r2, [pc, #92]	; (8002c28 <HAL_SPI_MspInit+0xec>)
 8002bcc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002bd0:	6413      	str	r3, [r2, #64]	; 0x40
 8002bd2:	4b15      	ldr	r3, [pc, #84]	; (8002c28 <HAL_SPI_MspInit+0xec>)
 8002bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002bda:	613b      	str	r3, [r7, #16]
 8002bdc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bde:	2300      	movs	r3, #0
 8002be0:	60fb      	str	r3, [r7, #12]
 8002be2:	4b11      	ldr	r3, [pc, #68]	; (8002c28 <HAL_SPI_MspInit+0xec>)
 8002be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002be6:	4a10      	ldr	r2, [pc, #64]	; (8002c28 <HAL_SPI_MspInit+0xec>)
 8002be8:	f043 0302 	orr.w	r3, r3, #2
 8002bec:	6313      	str	r3, [r2, #48]	; 0x30
 8002bee:	4b0e      	ldr	r3, [pc, #56]	; (8002c28 <HAL_SPI_MspInit+0xec>)
 8002bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bf2:	f003 0302 	and.w	r3, r3, #2
 8002bf6:	60fb      	str	r3, [r7, #12]
 8002bf8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8002bfa:	2338      	movs	r3, #56	; 0x38
 8002bfc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bfe:	2302      	movs	r3, #2
 8002c00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c02:	2300      	movs	r3, #0
 8002c04:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c06:	2303      	movs	r3, #3
 8002c08:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002c0a:	2306      	movs	r3, #6
 8002c0c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c0e:	f107 031c 	add.w	r3, r7, #28
 8002c12:	4619      	mov	r1, r3
 8002c14:	4807      	ldr	r0, [pc, #28]	; (8002c34 <HAL_SPI_MspInit+0xf8>)
 8002c16:	f000 fbab 	bl	8003370 <HAL_GPIO_Init>
}
 8002c1a:	bf00      	nop
 8002c1c:	3730      	adds	r7, #48	; 0x30
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}
 8002c22:	bf00      	nop
 8002c24:	40013000 	.word	0x40013000
 8002c28:	40023800 	.word	0x40023800
 8002c2c:	40020000 	.word	0x40020000
 8002c30:	40003c00 	.word	0x40003c00
 8002c34:	40020400 	.word	0x40020400

08002c38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b083      	sub	sp, #12
 8002c3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c3e:	2300      	movs	r3, #0
 8002c40:	607b      	str	r3, [r7, #4]
 8002c42:	4b10      	ldr	r3, [pc, #64]	; (8002c84 <HAL_MspInit+0x4c>)
 8002c44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c46:	4a0f      	ldr	r2, [pc, #60]	; (8002c84 <HAL_MspInit+0x4c>)
 8002c48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c4c:	6453      	str	r3, [r2, #68]	; 0x44
 8002c4e:	4b0d      	ldr	r3, [pc, #52]	; (8002c84 <HAL_MspInit+0x4c>)
 8002c50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c56:	607b      	str	r3, [r7, #4]
 8002c58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	603b      	str	r3, [r7, #0]
 8002c5e:	4b09      	ldr	r3, [pc, #36]	; (8002c84 <HAL_MspInit+0x4c>)
 8002c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c62:	4a08      	ldr	r2, [pc, #32]	; (8002c84 <HAL_MspInit+0x4c>)
 8002c64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c68:	6413      	str	r3, [r2, #64]	; 0x40
 8002c6a:	4b06      	ldr	r3, [pc, #24]	; (8002c84 <HAL_MspInit+0x4c>)
 8002c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c72:	603b      	str	r3, [r7, #0]
 8002c74:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c76:	bf00      	nop
 8002c78:	370c      	adds	r7, #12
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c80:	4770      	bx	lr
 8002c82:	bf00      	nop
 8002c84:	40023800 	.word	0x40023800

08002c88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002c8c:	e7fe      	b.n	8002c8c <NMI_Handler+0x4>

08002c8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c8e:	b480      	push	{r7}
 8002c90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c92:	e7fe      	b.n	8002c92 <HardFault_Handler+0x4>

08002c94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c94:	b480      	push	{r7}
 8002c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c98:	e7fe      	b.n	8002c98 <MemManage_Handler+0x4>

08002c9a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c9a:	b480      	push	{r7}
 8002c9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c9e:	e7fe      	b.n	8002c9e <BusFault_Handler+0x4>

08002ca0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ca4:	e7fe      	b.n	8002ca4 <UsageFault_Handler+0x4>

08002ca6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002ca6:	b480      	push	{r7}
 8002ca8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002caa:	bf00      	nop
 8002cac:	46bd      	mov	sp, r7
 8002cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb2:	4770      	bx	lr

08002cb4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002cb8:	bf00      	nop
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc0:	4770      	bx	lr

08002cc2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002cc2:	b480      	push	{r7}
 8002cc4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002cc6:	bf00      	nop
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cce:	4770      	bx	lr

08002cd0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  if(Timer1 > 0)
 8002cd4:	4b0b      	ldr	r3, [pc, #44]	; (8002d04 <SysTick_Handler+0x34>)
 8002cd6:	881b      	ldrh	r3, [r3, #0]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d005      	beq.n	8002ce8 <SysTick_Handler+0x18>
	  Timer1--;
 8002cdc:	4b09      	ldr	r3, [pc, #36]	; (8002d04 <SysTick_Handler+0x34>)
 8002cde:	881b      	ldrh	r3, [r3, #0]
 8002ce0:	3b01      	subs	r3, #1
 8002ce2:	b29a      	uxth	r2, r3
 8002ce4:	4b07      	ldr	r3, [pc, #28]	; (8002d04 <SysTick_Handler+0x34>)
 8002ce6:	801a      	strh	r2, [r3, #0]
  if(Timer2 > 0)
 8002ce8:	4b07      	ldr	r3, [pc, #28]	; (8002d08 <SysTick_Handler+0x38>)
 8002cea:	881b      	ldrh	r3, [r3, #0]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d005      	beq.n	8002cfc <SysTick_Handler+0x2c>
	  Timer2--;
 8002cf0:	4b05      	ldr	r3, [pc, #20]	; (8002d08 <SysTick_Handler+0x38>)
 8002cf2:	881b      	ldrh	r3, [r3, #0]
 8002cf4:	3b01      	subs	r3, #1
 8002cf6:	b29a      	uxth	r2, r3
 8002cf8:	4b03      	ldr	r3, [pc, #12]	; (8002d08 <SysTick_Handler+0x38>)
 8002cfa:	801a      	strh	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002cfc:	f000 fa0e 	bl	800311c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d00:	bf00      	nop
 8002d02:	bd80      	pop	{r7, pc}
 8002d04:	20000210 	.word	0x20000210
 8002d08:	20000212 	.word	0x20000212

08002d0c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	af00      	add	r7, sp, #0
  return 1;
 8002d10:	2301      	movs	r3, #1
}
 8002d12:	4618      	mov	r0, r3
 8002d14:	46bd      	mov	sp, r7
 8002d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1a:	4770      	bx	lr

08002d1c <_kill>:

int _kill(int pid, int sig)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b082      	sub	sp, #8
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
 8002d24:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002d26:	f005 fcd3 	bl	80086d0 <__errno>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	2216      	movs	r2, #22
 8002d2e:	601a      	str	r2, [r3, #0]
  return -1;
 8002d30:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d34:	4618      	mov	r0, r3
 8002d36:	3708      	adds	r7, #8
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bd80      	pop	{r7, pc}

08002d3c <_exit>:

void _exit (int status)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b082      	sub	sp, #8
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002d44:	f04f 31ff 	mov.w	r1, #4294967295
 8002d48:	6878      	ldr	r0, [r7, #4]
 8002d4a:	f7ff ffe7 	bl	8002d1c <_kill>
  while (1) {}    /* Make sure we hang here */
 8002d4e:	e7fe      	b.n	8002d4e <_exit+0x12>

08002d50 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b086      	sub	sp, #24
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	60f8      	str	r0, [r7, #12]
 8002d58:	60b9      	str	r1, [r7, #8]
 8002d5a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	617b      	str	r3, [r7, #20]
 8002d60:	e00a      	b.n	8002d78 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002d62:	f3af 8000 	nop.w
 8002d66:	4601      	mov	r1, r0
 8002d68:	68bb      	ldr	r3, [r7, #8]
 8002d6a:	1c5a      	adds	r2, r3, #1
 8002d6c:	60ba      	str	r2, [r7, #8]
 8002d6e:	b2ca      	uxtb	r2, r1
 8002d70:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d72:	697b      	ldr	r3, [r7, #20]
 8002d74:	3301      	adds	r3, #1
 8002d76:	617b      	str	r3, [r7, #20]
 8002d78:	697a      	ldr	r2, [r7, #20]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	429a      	cmp	r2, r3
 8002d7e:	dbf0      	blt.n	8002d62 <_read+0x12>
  }

  return len;
 8002d80:	687b      	ldr	r3, [r7, #4]
}
 8002d82:	4618      	mov	r0, r3
 8002d84:	3718      	adds	r7, #24
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}

08002d8a <_close>:
  }
  return len;
}

int _close(int file)
{
 8002d8a:	b480      	push	{r7}
 8002d8c:	b083      	sub	sp, #12
 8002d8e:	af00      	add	r7, sp, #0
 8002d90:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002d92:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d96:	4618      	mov	r0, r3
 8002d98:	370c      	adds	r7, #12
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da0:	4770      	bx	lr

08002da2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002da2:	b480      	push	{r7}
 8002da4:	b083      	sub	sp, #12
 8002da6:	af00      	add	r7, sp, #0
 8002da8:	6078      	str	r0, [r7, #4]
 8002daa:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002db2:	605a      	str	r2, [r3, #4]
  return 0;
 8002db4:	2300      	movs	r3, #0
}
 8002db6:	4618      	mov	r0, r3
 8002db8:	370c      	adds	r7, #12
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc0:	4770      	bx	lr

08002dc2 <_isatty>:

int _isatty(int file)
{
 8002dc2:	b480      	push	{r7}
 8002dc4:	b083      	sub	sp, #12
 8002dc6:	af00      	add	r7, sp, #0
 8002dc8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002dca:	2301      	movs	r3, #1
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	370c      	adds	r7, #12
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd6:	4770      	bx	lr

08002dd8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b085      	sub	sp, #20
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	60f8      	str	r0, [r7, #12]
 8002de0:	60b9      	str	r1, [r7, #8]
 8002de2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002de4:	2300      	movs	r3, #0
}
 8002de6:	4618      	mov	r0, r3
 8002de8:	3714      	adds	r7, #20
 8002dea:	46bd      	mov	sp, r7
 8002dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df0:	4770      	bx	lr
	...

08002df4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b086      	sub	sp, #24
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002dfc:	4a14      	ldr	r2, [pc, #80]	; (8002e50 <_sbrk+0x5c>)
 8002dfe:	4b15      	ldr	r3, [pc, #84]	; (8002e54 <_sbrk+0x60>)
 8002e00:	1ad3      	subs	r3, r2, r3
 8002e02:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002e04:	697b      	ldr	r3, [r7, #20]
 8002e06:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002e08:	4b13      	ldr	r3, [pc, #76]	; (8002e58 <_sbrk+0x64>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d102      	bne.n	8002e16 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002e10:	4b11      	ldr	r3, [pc, #68]	; (8002e58 <_sbrk+0x64>)
 8002e12:	4a12      	ldr	r2, [pc, #72]	; (8002e5c <_sbrk+0x68>)
 8002e14:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002e16:	4b10      	ldr	r3, [pc, #64]	; (8002e58 <_sbrk+0x64>)
 8002e18:	681a      	ldr	r2, [r3, #0]
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	4413      	add	r3, r2
 8002e1e:	693a      	ldr	r2, [r7, #16]
 8002e20:	429a      	cmp	r2, r3
 8002e22:	d207      	bcs.n	8002e34 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002e24:	f005 fc54 	bl	80086d0 <__errno>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	220c      	movs	r2, #12
 8002e2c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002e2e:	f04f 33ff 	mov.w	r3, #4294967295
 8002e32:	e009      	b.n	8002e48 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002e34:	4b08      	ldr	r3, [pc, #32]	; (8002e58 <_sbrk+0x64>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002e3a:	4b07      	ldr	r3, [pc, #28]	; (8002e58 <_sbrk+0x64>)
 8002e3c:	681a      	ldr	r2, [r3, #0]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	4413      	add	r3, r2
 8002e42:	4a05      	ldr	r2, [pc, #20]	; (8002e58 <_sbrk+0x64>)
 8002e44:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002e46:	68fb      	ldr	r3, [r7, #12]
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	3718      	adds	r7, #24
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bd80      	pop	{r7, pc}
 8002e50:	20020000 	.word	0x20020000
 8002e54:	00000400 	.word	0x00000400
 8002e58:	200002d8 	.word	0x200002d8
 8002e5c:	200005b8 	.word	0x200005b8

08002e60 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002e60:	b480      	push	{r7}
 8002e62:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002e64:	4b06      	ldr	r3, [pc, #24]	; (8002e80 <SystemInit+0x20>)
 8002e66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e6a:	4a05      	ldr	r2, [pc, #20]	; (8002e80 <SystemInit+0x20>)
 8002e6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002e70:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002e74:	bf00      	nop
 8002e76:	46bd      	mov	sp, r7
 8002e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7c:	4770      	bx	lr
 8002e7e:	bf00      	nop
 8002e80:	e000ed00 	.word	0xe000ed00

08002e84 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002e88:	4b11      	ldr	r3, [pc, #68]	; (8002ed0 <MX_USART1_UART_Init+0x4c>)
 8002e8a:	4a12      	ldr	r2, [pc, #72]	; (8002ed4 <MX_USART1_UART_Init+0x50>)
 8002e8c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002e8e:	4b10      	ldr	r3, [pc, #64]	; (8002ed0 <MX_USART1_UART_Init+0x4c>)
 8002e90:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002e94:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002e96:	4b0e      	ldr	r3, [pc, #56]	; (8002ed0 <MX_USART1_UART_Init+0x4c>)
 8002e98:	2200      	movs	r2, #0
 8002e9a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002e9c:	4b0c      	ldr	r3, [pc, #48]	; (8002ed0 <MX_USART1_UART_Init+0x4c>)
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002ea2:	4b0b      	ldr	r3, [pc, #44]	; (8002ed0 <MX_USART1_UART_Init+0x4c>)
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002ea8:	4b09      	ldr	r3, [pc, #36]	; (8002ed0 <MX_USART1_UART_Init+0x4c>)
 8002eaa:	220c      	movs	r2, #12
 8002eac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002eae:	4b08      	ldr	r3, [pc, #32]	; (8002ed0 <MX_USART1_UART_Init+0x4c>)
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002eb4:	4b06      	ldr	r3, [pc, #24]	; (8002ed0 <MX_USART1_UART_Init+0x4c>)
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002eba:	4805      	ldr	r0, [pc, #20]	; (8002ed0 <MX_USART1_UART_Init+0x4c>)
 8002ebc:	f001 fdf6 	bl	8004aac <HAL_UART_Init>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d001      	beq.n	8002eca <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002ec6:	f7ff fce1 	bl	800288c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002eca:	bf00      	nop
 8002ecc:	bd80      	pop	{r7, pc}
 8002ece:	bf00      	nop
 8002ed0:	200002dc 	.word	0x200002dc
 8002ed4:	40011000 	.word	0x40011000

08002ed8 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002edc:	4b11      	ldr	r3, [pc, #68]	; (8002f24 <MX_USART2_UART_Init+0x4c>)
 8002ede:	4a12      	ldr	r2, [pc, #72]	; (8002f28 <MX_USART2_UART_Init+0x50>)
 8002ee0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002ee2:	4b10      	ldr	r3, [pc, #64]	; (8002f24 <MX_USART2_UART_Init+0x4c>)
 8002ee4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002ee8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002eea:	4b0e      	ldr	r3, [pc, #56]	; (8002f24 <MX_USART2_UART_Init+0x4c>)
 8002eec:	2200      	movs	r2, #0
 8002eee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002ef0:	4b0c      	ldr	r3, [pc, #48]	; (8002f24 <MX_USART2_UART_Init+0x4c>)
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002ef6:	4b0b      	ldr	r3, [pc, #44]	; (8002f24 <MX_USART2_UART_Init+0x4c>)
 8002ef8:	2200      	movs	r2, #0
 8002efa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002efc:	4b09      	ldr	r3, [pc, #36]	; (8002f24 <MX_USART2_UART_Init+0x4c>)
 8002efe:	220c      	movs	r2, #12
 8002f00:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f02:	4b08      	ldr	r3, [pc, #32]	; (8002f24 <MX_USART2_UART_Init+0x4c>)
 8002f04:	2200      	movs	r2, #0
 8002f06:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f08:	4b06      	ldr	r3, [pc, #24]	; (8002f24 <MX_USART2_UART_Init+0x4c>)
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002f0e:	4805      	ldr	r0, [pc, #20]	; (8002f24 <MX_USART2_UART_Init+0x4c>)
 8002f10:	f001 fdcc 	bl	8004aac <HAL_UART_Init>
 8002f14:	4603      	mov	r3, r0
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d001      	beq.n	8002f1e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002f1a:	f7ff fcb7 	bl	800288c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002f1e:	bf00      	nop
 8002f20:	bd80      	pop	{r7, pc}
 8002f22:	bf00      	nop
 8002f24:	20000320 	.word	0x20000320
 8002f28:	40004400 	.word	0x40004400

08002f2c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b08c      	sub	sp, #48	; 0x30
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f34:	f107 031c 	add.w	r3, r7, #28
 8002f38:	2200      	movs	r2, #0
 8002f3a:	601a      	str	r2, [r3, #0]
 8002f3c:	605a      	str	r2, [r3, #4]
 8002f3e:	609a      	str	r2, [r3, #8]
 8002f40:	60da      	str	r2, [r3, #12]
 8002f42:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a32      	ldr	r2, [pc, #200]	; (8003014 <HAL_UART_MspInit+0xe8>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d12d      	bne.n	8002faa <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002f4e:	2300      	movs	r3, #0
 8002f50:	61bb      	str	r3, [r7, #24]
 8002f52:	4b31      	ldr	r3, [pc, #196]	; (8003018 <HAL_UART_MspInit+0xec>)
 8002f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f56:	4a30      	ldr	r2, [pc, #192]	; (8003018 <HAL_UART_MspInit+0xec>)
 8002f58:	f043 0310 	orr.w	r3, r3, #16
 8002f5c:	6453      	str	r3, [r2, #68]	; 0x44
 8002f5e:	4b2e      	ldr	r3, [pc, #184]	; (8003018 <HAL_UART_MspInit+0xec>)
 8002f60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f62:	f003 0310 	and.w	r3, r3, #16
 8002f66:	61bb      	str	r3, [r7, #24]
 8002f68:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	617b      	str	r3, [r7, #20]
 8002f6e:	4b2a      	ldr	r3, [pc, #168]	; (8003018 <HAL_UART_MspInit+0xec>)
 8002f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f72:	4a29      	ldr	r2, [pc, #164]	; (8003018 <HAL_UART_MspInit+0xec>)
 8002f74:	f043 0301 	orr.w	r3, r3, #1
 8002f78:	6313      	str	r3, [r2, #48]	; 0x30
 8002f7a:	4b27      	ldr	r3, [pc, #156]	; (8003018 <HAL_UART_MspInit+0xec>)
 8002f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f7e:	f003 0301 	and.w	r3, r3, #1
 8002f82:	617b      	str	r3, [r7, #20]
 8002f84:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002f86:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002f8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f8c:	2302      	movs	r3, #2
 8002f8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f90:	2300      	movs	r3, #0
 8002f92:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f94:	2303      	movs	r3, #3
 8002f96:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002f98:	2307      	movs	r3, #7
 8002f9a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f9c:	f107 031c 	add.w	r3, r7, #28
 8002fa0:	4619      	mov	r1, r3
 8002fa2:	481e      	ldr	r0, [pc, #120]	; (800301c <HAL_UART_MspInit+0xf0>)
 8002fa4:	f000 f9e4 	bl	8003370 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002fa8:	e030      	b.n	800300c <HAL_UART_MspInit+0xe0>
  else if(uartHandle->Instance==USART2)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a1c      	ldr	r2, [pc, #112]	; (8003020 <HAL_UART_MspInit+0xf4>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d12b      	bne.n	800300c <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	613b      	str	r3, [r7, #16]
 8002fb8:	4b17      	ldr	r3, [pc, #92]	; (8003018 <HAL_UART_MspInit+0xec>)
 8002fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fbc:	4a16      	ldr	r2, [pc, #88]	; (8003018 <HAL_UART_MspInit+0xec>)
 8002fbe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fc2:	6413      	str	r3, [r2, #64]	; 0x40
 8002fc4:	4b14      	ldr	r3, [pc, #80]	; (8003018 <HAL_UART_MspInit+0xec>)
 8002fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fcc:	613b      	str	r3, [r7, #16]
 8002fce:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	60fb      	str	r3, [r7, #12]
 8002fd4:	4b10      	ldr	r3, [pc, #64]	; (8003018 <HAL_UART_MspInit+0xec>)
 8002fd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fd8:	4a0f      	ldr	r2, [pc, #60]	; (8003018 <HAL_UART_MspInit+0xec>)
 8002fda:	f043 0301 	orr.w	r3, r3, #1
 8002fde:	6313      	str	r3, [r2, #48]	; 0x30
 8002fe0:	4b0d      	ldr	r3, [pc, #52]	; (8003018 <HAL_UART_MspInit+0xec>)
 8002fe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fe4:	f003 0301 	and.w	r3, r3, #1
 8002fe8:	60fb      	str	r3, [r7, #12]
 8002fea:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002fec:	230c      	movs	r3, #12
 8002fee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ff0:	2302      	movs	r3, #2
 8002ff2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ff8:	2303      	movs	r3, #3
 8002ffa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002ffc:	2307      	movs	r3, #7
 8002ffe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003000:	f107 031c 	add.w	r3, r7, #28
 8003004:	4619      	mov	r1, r3
 8003006:	4805      	ldr	r0, [pc, #20]	; (800301c <HAL_UART_MspInit+0xf0>)
 8003008:	f000 f9b2 	bl	8003370 <HAL_GPIO_Init>
}
 800300c:	bf00      	nop
 800300e:	3730      	adds	r7, #48	; 0x30
 8003010:	46bd      	mov	sp, r7
 8003012:	bd80      	pop	{r7, pc}
 8003014:	40011000 	.word	0x40011000
 8003018:	40023800 	.word	0x40023800
 800301c:	40020000 	.word	0x40020000
 8003020:	40004400 	.word	0x40004400

08003024 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003024:	f8df d034 	ldr.w	sp, [pc, #52]	; 800305c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003028:	480d      	ldr	r0, [pc, #52]	; (8003060 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800302a:	490e      	ldr	r1, [pc, #56]	; (8003064 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800302c:	4a0e      	ldr	r2, [pc, #56]	; (8003068 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800302e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003030:	e002      	b.n	8003038 <LoopCopyDataInit>

08003032 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003032:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003034:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003036:	3304      	adds	r3, #4

08003038 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003038:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800303a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800303c:	d3f9      	bcc.n	8003032 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800303e:	4a0b      	ldr	r2, [pc, #44]	; (800306c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003040:	4c0b      	ldr	r4, [pc, #44]	; (8003070 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003042:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003044:	e001      	b.n	800304a <LoopFillZerobss>

08003046 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003046:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003048:	3204      	adds	r2, #4

0800304a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800304a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800304c:	d3fb      	bcc.n	8003046 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800304e:	f7ff ff07 	bl	8002e60 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003052:	f005 fb43 	bl	80086dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003056:	f7ff f943 	bl	80022e0 <main>
  bx  lr    
 800305a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800305c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003060:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003064:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 8003068:	0800bffc 	.word	0x0800bffc
  ldr r2, =_sbss
 800306c:	200001f4 	.word	0x200001f4
  ldr r4, =_ebss
 8003070:	200005b4 	.word	0x200005b4

08003074 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003074:	e7fe      	b.n	8003074 <ADC_IRQHandler>
	...

08003078 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800307c:	4b0e      	ldr	r3, [pc, #56]	; (80030b8 <HAL_Init+0x40>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a0d      	ldr	r2, [pc, #52]	; (80030b8 <HAL_Init+0x40>)
 8003082:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003086:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003088:	4b0b      	ldr	r3, [pc, #44]	; (80030b8 <HAL_Init+0x40>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a0a      	ldr	r2, [pc, #40]	; (80030b8 <HAL_Init+0x40>)
 800308e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003092:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003094:	4b08      	ldr	r3, [pc, #32]	; (80030b8 <HAL_Init+0x40>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a07      	ldr	r2, [pc, #28]	; (80030b8 <HAL_Init+0x40>)
 800309a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800309e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80030a0:	2003      	movs	r0, #3
 80030a2:	f000 f931 	bl	8003308 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80030a6:	200f      	movs	r0, #15
 80030a8:	f000 f808 	bl	80030bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80030ac:	f7ff fdc4 	bl	8002c38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80030b0:	2300      	movs	r3, #0
}
 80030b2:	4618      	mov	r0, r3
 80030b4:	bd80      	pop	{r7, pc}
 80030b6:	bf00      	nop
 80030b8:	40023c00 	.word	0x40023c00

080030bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b082      	sub	sp, #8
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80030c4:	4b12      	ldr	r3, [pc, #72]	; (8003110 <HAL_InitTick+0x54>)
 80030c6:	681a      	ldr	r2, [r3, #0]
 80030c8:	4b12      	ldr	r3, [pc, #72]	; (8003114 <HAL_InitTick+0x58>)
 80030ca:	781b      	ldrb	r3, [r3, #0]
 80030cc:	4619      	mov	r1, r3
 80030ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80030d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80030d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80030da:	4618      	mov	r0, r3
 80030dc:	f000 f93b 	bl	8003356 <HAL_SYSTICK_Config>
 80030e0:	4603      	mov	r3, r0
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d001      	beq.n	80030ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	e00e      	b.n	8003108 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2b0f      	cmp	r3, #15
 80030ee:	d80a      	bhi.n	8003106 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80030f0:	2200      	movs	r2, #0
 80030f2:	6879      	ldr	r1, [r7, #4]
 80030f4:	f04f 30ff 	mov.w	r0, #4294967295
 80030f8:	f000 f911 	bl	800331e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80030fc:	4a06      	ldr	r2, [pc, #24]	; (8003118 <HAL_InitTick+0x5c>)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003102:	2300      	movs	r3, #0
 8003104:	e000      	b.n	8003108 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003106:	2301      	movs	r3, #1
}
 8003108:	4618      	mov	r0, r3
 800310a:	3708      	adds	r7, #8
 800310c:	46bd      	mov	sp, r7
 800310e:	bd80      	pop	{r7, pc}
 8003110:	20000004 	.word	0x20000004
 8003114:	2000000c 	.word	0x2000000c
 8003118:	20000008 	.word	0x20000008

0800311c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800311c:	b480      	push	{r7}
 800311e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003120:	4b06      	ldr	r3, [pc, #24]	; (800313c <HAL_IncTick+0x20>)
 8003122:	781b      	ldrb	r3, [r3, #0]
 8003124:	461a      	mov	r2, r3
 8003126:	4b06      	ldr	r3, [pc, #24]	; (8003140 <HAL_IncTick+0x24>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4413      	add	r3, r2
 800312c:	4a04      	ldr	r2, [pc, #16]	; (8003140 <HAL_IncTick+0x24>)
 800312e:	6013      	str	r3, [r2, #0]
}
 8003130:	bf00      	nop
 8003132:	46bd      	mov	sp, r7
 8003134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003138:	4770      	bx	lr
 800313a:	bf00      	nop
 800313c:	2000000c 	.word	0x2000000c
 8003140:	20000364 	.word	0x20000364

08003144 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003144:	b480      	push	{r7}
 8003146:	af00      	add	r7, sp, #0
  return uwTick;
 8003148:	4b03      	ldr	r3, [pc, #12]	; (8003158 <HAL_GetTick+0x14>)
 800314a:	681b      	ldr	r3, [r3, #0]
}
 800314c:	4618      	mov	r0, r3
 800314e:	46bd      	mov	sp, r7
 8003150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003154:	4770      	bx	lr
 8003156:	bf00      	nop
 8003158:	20000364 	.word	0x20000364

0800315c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b084      	sub	sp, #16
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003164:	f7ff ffee 	bl	8003144 <HAL_GetTick>
 8003168:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003174:	d005      	beq.n	8003182 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003176:	4b0a      	ldr	r3, [pc, #40]	; (80031a0 <HAL_Delay+0x44>)
 8003178:	781b      	ldrb	r3, [r3, #0]
 800317a:	461a      	mov	r2, r3
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	4413      	add	r3, r2
 8003180:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003182:	bf00      	nop
 8003184:	f7ff ffde 	bl	8003144 <HAL_GetTick>
 8003188:	4602      	mov	r2, r0
 800318a:	68bb      	ldr	r3, [r7, #8]
 800318c:	1ad3      	subs	r3, r2, r3
 800318e:	68fa      	ldr	r2, [r7, #12]
 8003190:	429a      	cmp	r2, r3
 8003192:	d8f7      	bhi.n	8003184 <HAL_Delay+0x28>
  {
  }
}
 8003194:	bf00      	nop
 8003196:	bf00      	nop
 8003198:	3710      	adds	r7, #16
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}
 800319e:	bf00      	nop
 80031a0:	2000000c 	.word	0x2000000c

080031a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031a4:	b480      	push	{r7}
 80031a6:	b085      	sub	sp, #20
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	f003 0307 	and.w	r3, r3, #7
 80031b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80031b4:	4b0c      	ldr	r3, [pc, #48]	; (80031e8 <__NVIC_SetPriorityGrouping+0x44>)
 80031b6:	68db      	ldr	r3, [r3, #12]
 80031b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80031ba:	68ba      	ldr	r2, [r7, #8]
 80031bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80031c0:	4013      	ands	r3, r2
 80031c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80031cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80031d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80031d6:	4a04      	ldr	r2, [pc, #16]	; (80031e8 <__NVIC_SetPriorityGrouping+0x44>)
 80031d8:	68bb      	ldr	r3, [r7, #8]
 80031da:	60d3      	str	r3, [r2, #12]
}
 80031dc:	bf00      	nop
 80031de:	3714      	adds	r7, #20
 80031e0:	46bd      	mov	sp, r7
 80031e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e6:	4770      	bx	lr
 80031e8:	e000ed00 	.word	0xe000ed00

080031ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80031ec:	b480      	push	{r7}
 80031ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80031f0:	4b04      	ldr	r3, [pc, #16]	; (8003204 <__NVIC_GetPriorityGrouping+0x18>)
 80031f2:	68db      	ldr	r3, [r3, #12]
 80031f4:	0a1b      	lsrs	r3, r3, #8
 80031f6:	f003 0307 	and.w	r3, r3, #7
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	46bd      	mov	sp, r7
 80031fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003202:	4770      	bx	lr
 8003204:	e000ed00 	.word	0xe000ed00

08003208 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003208:	b480      	push	{r7}
 800320a:	b083      	sub	sp, #12
 800320c:	af00      	add	r7, sp, #0
 800320e:	4603      	mov	r3, r0
 8003210:	6039      	str	r1, [r7, #0]
 8003212:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003214:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003218:	2b00      	cmp	r3, #0
 800321a:	db0a      	blt.n	8003232 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	b2da      	uxtb	r2, r3
 8003220:	490c      	ldr	r1, [pc, #48]	; (8003254 <__NVIC_SetPriority+0x4c>)
 8003222:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003226:	0112      	lsls	r2, r2, #4
 8003228:	b2d2      	uxtb	r2, r2
 800322a:	440b      	add	r3, r1
 800322c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003230:	e00a      	b.n	8003248 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	b2da      	uxtb	r2, r3
 8003236:	4908      	ldr	r1, [pc, #32]	; (8003258 <__NVIC_SetPriority+0x50>)
 8003238:	79fb      	ldrb	r3, [r7, #7]
 800323a:	f003 030f 	and.w	r3, r3, #15
 800323e:	3b04      	subs	r3, #4
 8003240:	0112      	lsls	r2, r2, #4
 8003242:	b2d2      	uxtb	r2, r2
 8003244:	440b      	add	r3, r1
 8003246:	761a      	strb	r2, [r3, #24]
}
 8003248:	bf00      	nop
 800324a:	370c      	adds	r7, #12
 800324c:	46bd      	mov	sp, r7
 800324e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003252:	4770      	bx	lr
 8003254:	e000e100 	.word	0xe000e100
 8003258:	e000ed00 	.word	0xe000ed00

0800325c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800325c:	b480      	push	{r7}
 800325e:	b089      	sub	sp, #36	; 0x24
 8003260:	af00      	add	r7, sp, #0
 8003262:	60f8      	str	r0, [r7, #12]
 8003264:	60b9      	str	r1, [r7, #8]
 8003266:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	f003 0307 	and.w	r3, r3, #7
 800326e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003270:	69fb      	ldr	r3, [r7, #28]
 8003272:	f1c3 0307 	rsb	r3, r3, #7
 8003276:	2b04      	cmp	r3, #4
 8003278:	bf28      	it	cs
 800327a:	2304      	movcs	r3, #4
 800327c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800327e:	69fb      	ldr	r3, [r7, #28]
 8003280:	3304      	adds	r3, #4
 8003282:	2b06      	cmp	r3, #6
 8003284:	d902      	bls.n	800328c <NVIC_EncodePriority+0x30>
 8003286:	69fb      	ldr	r3, [r7, #28]
 8003288:	3b03      	subs	r3, #3
 800328a:	e000      	b.n	800328e <NVIC_EncodePriority+0x32>
 800328c:	2300      	movs	r3, #0
 800328e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003290:	f04f 32ff 	mov.w	r2, #4294967295
 8003294:	69bb      	ldr	r3, [r7, #24]
 8003296:	fa02 f303 	lsl.w	r3, r2, r3
 800329a:	43da      	mvns	r2, r3
 800329c:	68bb      	ldr	r3, [r7, #8]
 800329e:	401a      	ands	r2, r3
 80032a0:	697b      	ldr	r3, [r7, #20]
 80032a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80032a4:	f04f 31ff 	mov.w	r1, #4294967295
 80032a8:	697b      	ldr	r3, [r7, #20]
 80032aa:	fa01 f303 	lsl.w	r3, r1, r3
 80032ae:	43d9      	mvns	r1, r3
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032b4:	4313      	orrs	r3, r2
         );
}
 80032b6:	4618      	mov	r0, r3
 80032b8:	3724      	adds	r7, #36	; 0x24
 80032ba:	46bd      	mov	sp, r7
 80032bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c0:	4770      	bx	lr
	...

080032c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b082      	sub	sp, #8
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	3b01      	subs	r3, #1
 80032d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80032d4:	d301      	bcc.n	80032da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80032d6:	2301      	movs	r3, #1
 80032d8:	e00f      	b.n	80032fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80032da:	4a0a      	ldr	r2, [pc, #40]	; (8003304 <SysTick_Config+0x40>)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	3b01      	subs	r3, #1
 80032e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80032e2:	210f      	movs	r1, #15
 80032e4:	f04f 30ff 	mov.w	r0, #4294967295
 80032e8:	f7ff ff8e 	bl	8003208 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80032ec:	4b05      	ldr	r3, [pc, #20]	; (8003304 <SysTick_Config+0x40>)
 80032ee:	2200      	movs	r2, #0
 80032f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80032f2:	4b04      	ldr	r3, [pc, #16]	; (8003304 <SysTick_Config+0x40>)
 80032f4:	2207      	movs	r2, #7
 80032f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80032f8:	2300      	movs	r3, #0
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	3708      	adds	r7, #8
 80032fe:	46bd      	mov	sp, r7
 8003300:	bd80      	pop	{r7, pc}
 8003302:	bf00      	nop
 8003304:	e000e010 	.word	0xe000e010

08003308 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b082      	sub	sp, #8
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003310:	6878      	ldr	r0, [r7, #4]
 8003312:	f7ff ff47 	bl	80031a4 <__NVIC_SetPriorityGrouping>
}
 8003316:	bf00      	nop
 8003318:	3708      	adds	r7, #8
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}

0800331e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800331e:	b580      	push	{r7, lr}
 8003320:	b086      	sub	sp, #24
 8003322:	af00      	add	r7, sp, #0
 8003324:	4603      	mov	r3, r0
 8003326:	60b9      	str	r1, [r7, #8]
 8003328:	607a      	str	r2, [r7, #4]
 800332a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800332c:	2300      	movs	r3, #0
 800332e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003330:	f7ff ff5c 	bl	80031ec <__NVIC_GetPriorityGrouping>
 8003334:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003336:	687a      	ldr	r2, [r7, #4]
 8003338:	68b9      	ldr	r1, [r7, #8]
 800333a:	6978      	ldr	r0, [r7, #20]
 800333c:	f7ff ff8e 	bl	800325c <NVIC_EncodePriority>
 8003340:	4602      	mov	r2, r0
 8003342:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003346:	4611      	mov	r1, r2
 8003348:	4618      	mov	r0, r3
 800334a:	f7ff ff5d 	bl	8003208 <__NVIC_SetPriority>
}
 800334e:	bf00      	nop
 8003350:	3718      	adds	r7, #24
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}

08003356 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003356:	b580      	push	{r7, lr}
 8003358:	b082      	sub	sp, #8
 800335a:	af00      	add	r7, sp, #0
 800335c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800335e:	6878      	ldr	r0, [r7, #4]
 8003360:	f7ff ffb0 	bl	80032c4 <SysTick_Config>
 8003364:	4603      	mov	r3, r0
}
 8003366:	4618      	mov	r0, r3
 8003368:	3708      	adds	r7, #8
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}
	...

08003370 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003370:	b480      	push	{r7}
 8003372:	b089      	sub	sp, #36	; 0x24
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
 8003378:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800337a:	2300      	movs	r3, #0
 800337c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800337e:	2300      	movs	r3, #0
 8003380:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003382:	2300      	movs	r3, #0
 8003384:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003386:	2300      	movs	r3, #0
 8003388:	61fb      	str	r3, [r7, #28]
 800338a:	e159      	b.n	8003640 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800338c:	2201      	movs	r2, #1
 800338e:	69fb      	ldr	r3, [r7, #28]
 8003390:	fa02 f303 	lsl.w	r3, r2, r3
 8003394:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	697a      	ldr	r2, [r7, #20]
 800339c:	4013      	ands	r3, r2
 800339e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80033a0:	693a      	ldr	r2, [r7, #16]
 80033a2:	697b      	ldr	r3, [r7, #20]
 80033a4:	429a      	cmp	r2, r3
 80033a6:	f040 8148 	bne.w	800363a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	f003 0303 	and.w	r3, r3, #3
 80033b2:	2b01      	cmp	r3, #1
 80033b4:	d005      	beq.n	80033c2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80033be:	2b02      	cmp	r3, #2
 80033c0:	d130      	bne.n	8003424 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80033c8:	69fb      	ldr	r3, [r7, #28]
 80033ca:	005b      	lsls	r3, r3, #1
 80033cc:	2203      	movs	r2, #3
 80033ce:	fa02 f303 	lsl.w	r3, r2, r3
 80033d2:	43db      	mvns	r3, r3
 80033d4:	69ba      	ldr	r2, [r7, #24]
 80033d6:	4013      	ands	r3, r2
 80033d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	68da      	ldr	r2, [r3, #12]
 80033de:	69fb      	ldr	r3, [r7, #28]
 80033e0:	005b      	lsls	r3, r3, #1
 80033e2:	fa02 f303 	lsl.w	r3, r2, r3
 80033e6:	69ba      	ldr	r2, [r7, #24]
 80033e8:	4313      	orrs	r3, r2
 80033ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	69ba      	ldr	r2, [r7, #24]
 80033f0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80033f8:	2201      	movs	r2, #1
 80033fa:	69fb      	ldr	r3, [r7, #28]
 80033fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003400:	43db      	mvns	r3, r3
 8003402:	69ba      	ldr	r2, [r7, #24]
 8003404:	4013      	ands	r3, r2
 8003406:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	091b      	lsrs	r3, r3, #4
 800340e:	f003 0201 	and.w	r2, r3, #1
 8003412:	69fb      	ldr	r3, [r7, #28]
 8003414:	fa02 f303 	lsl.w	r3, r2, r3
 8003418:	69ba      	ldr	r2, [r7, #24]
 800341a:	4313      	orrs	r3, r2
 800341c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	69ba      	ldr	r2, [r7, #24]
 8003422:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	f003 0303 	and.w	r3, r3, #3
 800342c:	2b03      	cmp	r3, #3
 800342e:	d017      	beq.n	8003460 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	68db      	ldr	r3, [r3, #12]
 8003434:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003436:	69fb      	ldr	r3, [r7, #28]
 8003438:	005b      	lsls	r3, r3, #1
 800343a:	2203      	movs	r2, #3
 800343c:	fa02 f303 	lsl.w	r3, r2, r3
 8003440:	43db      	mvns	r3, r3
 8003442:	69ba      	ldr	r2, [r7, #24]
 8003444:	4013      	ands	r3, r2
 8003446:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	689a      	ldr	r2, [r3, #8]
 800344c:	69fb      	ldr	r3, [r7, #28]
 800344e:	005b      	lsls	r3, r3, #1
 8003450:	fa02 f303 	lsl.w	r3, r2, r3
 8003454:	69ba      	ldr	r2, [r7, #24]
 8003456:	4313      	orrs	r3, r2
 8003458:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	69ba      	ldr	r2, [r7, #24]
 800345e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	f003 0303 	and.w	r3, r3, #3
 8003468:	2b02      	cmp	r3, #2
 800346a:	d123      	bne.n	80034b4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800346c:	69fb      	ldr	r3, [r7, #28]
 800346e:	08da      	lsrs	r2, r3, #3
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	3208      	adds	r2, #8
 8003474:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003478:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800347a:	69fb      	ldr	r3, [r7, #28]
 800347c:	f003 0307 	and.w	r3, r3, #7
 8003480:	009b      	lsls	r3, r3, #2
 8003482:	220f      	movs	r2, #15
 8003484:	fa02 f303 	lsl.w	r3, r2, r3
 8003488:	43db      	mvns	r3, r3
 800348a:	69ba      	ldr	r2, [r7, #24]
 800348c:	4013      	ands	r3, r2
 800348e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	691a      	ldr	r2, [r3, #16]
 8003494:	69fb      	ldr	r3, [r7, #28]
 8003496:	f003 0307 	and.w	r3, r3, #7
 800349a:	009b      	lsls	r3, r3, #2
 800349c:	fa02 f303 	lsl.w	r3, r2, r3
 80034a0:	69ba      	ldr	r2, [r7, #24]
 80034a2:	4313      	orrs	r3, r2
 80034a4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80034a6:	69fb      	ldr	r3, [r7, #28]
 80034a8:	08da      	lsrs	r2, r3, #3
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	3208      	adds	r2, #8
 80034ae:	69b9      	ldr	r1, [r7, #24]
 80034b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80034ba:	69fb      	ldr	r3, [r7, #28]
 80034bc:	005b      	lsls	r3, r3, #1
 80034be:	2203      	movs	r2, #3
 80034c0:	fa02 f303 	lsl.w	r3, r2, r3
 80034c4:	43db      	mvns	r3, r3
 80034c6:	69ba      	ldr	r2, [r7, #24]
 80034c8:	4013      	ands	r3, r2
 80034ca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	f003 0203 	and.w	r2, r3, #3
 80034d4:	69fb      	ldr	r3, [r7, #28]
 80034d6:	005b      	lsls	r3, r3, #1
 80034d8:	fa02 f303 	lsl.w	r3, r2, r3
 80034dc:	69ba      	ldr	r2, [r7, #24]
 80034de:	4313      	orrs	r3, r2
 80034e0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	69ba      	ldr	r2, [r7, #24]
 80034e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	f000 80a2 	beq.w	800363a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034f6:	2300      	movs	r3, #0
 80034f8:	60fb      	str	r3, [r7, #12]
 80034fa:	4b57      	ldr	r3, [pc, #348]	; (8003658 <HAL_GPIO_Init+0x2e8>)
 80034fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034fe:	4a56      	ldr	r2, [pc, #344]	; (8003658 <HAL_GPIO_Init+0x2e8>)
 8003500:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003504:	6453      	str	r3, [r2, #68]	; 0x44
 8003506:	4b54      	ldr	r3, [pc, #336]	; (8003658 <HAL_GPIO_Init+0x2e8>)
 8003508:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800350a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800350e:	60fb      	str	r3, [r7, #12]
 8003510:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003512:	4a52      	ldr	r2, [pc, #328]	; (800365c <HAL_GPIO_Init+0x2ec>)
 8003514:	69fb      	ldr	r3, [r7, #28]
 8003516:	089b      	lsrs	r3, r3, #2
 8003518:	3302      	adds	r3, #2
 800351a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800351e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003520:	69fb      	ldr	r3, [r7, #28]
 8003522:	f003 0303 	and.w	r3, r3, #3
 8003526:	009b      	lsls	r3, r3, #2
 8003528:	220f      	movs	r2, #15
 800352a:	fa02 f303 	lsl.w	r3, r2, r3
 800352e:	43db      	mvns	r3, r3
 8003530:	69ba      	ldr	r2, [r7, #24]
 8003532:	4013      	ands	r3, r2
 8003534:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	4a49      	ldr	r2, [pc, #292]	; (8003660 <HAL_GPIO_Init+0x2f0>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d019      	beq.n	8003572 <HAL_GPIO_Init+0x202>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	4a48      	ldr	r2, [pc, #288]	; (8003664 <HAL_GPIO_Init+0x2f4>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d013      	beq.n	800356e <HAL_GPIO_Init+0x1fe>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	4a47      	ldr	r2, [pc, #284]	; (8003668 <HAL_GPIO_Init+0x2f8>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d00d      	beq.n	800356a <HAL_GPIO_Init+0x1fa>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	4a46      	ldr	r2, [pc, #280]	; (800366c <HAL_GPIO_Init+0x2fc>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d007      	beq.n	8003566 <HAL_GPIO_Init+0x1f6>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	4a45      	ldr	r2, [pc, #276]	; (8003670 <HAL_GPIO_Init+0x300>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d101      	bne.n	8003562 <HAL_GPIO_Init+0x1f2>
 800355e:	2304      	movs	r3, #4
 8003560:	e008      	b.n	8003574 <HAL_GPIO_Init+0x204>
 8003562:	2307      	movs	r3, #7
 8003564:	e006      	b.n	8003574 <HAL_GPIO_Init+0x204>
 8003566:	2303      	movs	r3, #3
 8003568:	e004      	b.n	8003574 <HAL_GPIO_Init+0x204>
 800356a:	2302      	movs	r3, #2
 800356c:	e002      	b.n	8003574 <HAL_GPIO_Init+0x204>
 800356e:	2301      	movs	r3, #1
 8003570:	e000      	b.n	8003574 <HAL_GPIO_Init+0x204>
 8003572:	2300      	movs	r3, #0
 8003574:	69fa      	ldr	r2, [r7, #28]
 8003576:	f002 0203 	and.w	r2, r2, #3
 800357a:	0092      	lsls	r2, r2, #2
 800357c:	4093      	lsls	r3, r2
 800357e:	69ba      	ldr	r2, [r7, #24]
 8003580:	4313      	orrs	r3, r2
 8003582:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003584:	4935      	ldr	r1, [pc, #212]	; (800365c <HAL_GPIO_Init+0x2ec>)
 8003586:	69fb      	ldr	r3, [r7, #28]
 8003588:	089b      	lsrs	r3, r3, #2
 800358a:	3302      	adds	r3, #2
 800358c:	69ba      	ldr	r2, [r7, #24]
 800358e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003592:	4b38      	ldr	r3, [pc, #224]	; (8003674 <HAL_GPIO_Init+0x304>)
 8003594:	689b      	ldr	r3, [r3, #8]
 8003596:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003598:	693b      	ldr	r3, [r7, #16]
 800359a:	43db      	mvns	r3, r3
 800359c:	69ba      	ldr	r2, [r7, #24]
 800359e:	4013      	ands	r3, r2
 80035a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d003      	beq.n	80035b6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80035ae:	69ba      	ldr	r2, [r7, #24]
 80035b0:	693b      	ldr	r3, [r7, #16]
 80035b2:	4313      	orrs	r3, r2
 80035b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80035b6:	4a2f      	ldr	r2, [pc, #188]	; (8003674 <HAL_GPIO_Init+0x304>)
 80035b8:	69bb      	ldr	r3, [r7, #24]
 80035ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80035bc:	4b2d      	ldr	r3, [pc, #180]	; (8003674 <HAL_GPIO_Init+0x304>)
 80035be:	68db      	ldr	r3, [r3, #12]
 80035c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035c2:	693b      	ldr	r3, [r7, #16]
 80035c4:	43db      	mvns	r3, r3
 80035c6:	69ba      	ldr	r2, [r7, #24]
 80035c8:	4013      	ands	r3, r2
 80035ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d003      	beq.n	80035e0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80035d8:	69ba      	ldr	r2, [r7, #24]
 80035da:	693b      	ldr	r3, [r7, #16]
 80035dc:	4313      	orrs	r3, r2
 80035de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80035e0:	4a24      	ldr	r2, [pc, #144]	; (8003674 <HAL_GPIO_Init+0x304>)
 80035e2:	69bb      	ldr	r3, [r7, #24]
 80035e4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80035e6:	4b23      	ldr	r3, [pc, #140]	; (8003674 <HAL_GPIO_Init+0x304>)
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035ec:	693b      	ldr	r3, [r7, #16]
 80035ee:	43db      	mvns	r3, r3
 80035f0:	69ba      	ldr	r2, [r7, #24]
 80035f2:	4013      	ands	r3, r2
 80035f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d003      	beq.n	800360a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003602:	69ba      	ldr	r2, [r7, #24]
 8003604:	693b      	ldr	r3, [r7, #16]
 8003606:	4313      	orrs	r3, r2
 8003608:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800360a:	4a1a      	ldr	r2, [pc, #104]	; (8003674 <HAL_GPIO_Init+0x304>)
 800360c:	69bb      	ldr	r3, [r7, #24]
 800360e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003610:	4b18      	ldr	r3, [pc, #96]	; (8003674 <HAL_GPIO_Init+0x304>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003616:	693b      	ldr	r3, [r7, #16]
 8003618:	43db      	mvns	r3, r3
 800361a:	69ba      	ldr	r2, [r7, #24]
 800361c:	4013      	ands	r3, r2
 800361e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003628:	2b00      	cmp	r3, #0
 800362a:	d003      	beq.n	8003634 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800362c:	69ba      	ldr	r2, [r7, #24]
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	4313      	orrs	r3, r2
 8003632:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003634:	4a0f      	ldr	r2, [pc, #60]	; (8003674 <HAL_GPIO_Init+0x304>)
 8003636:	69bb      	ldr	r3, [r7, #24]
 8003638:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800363a:	69fb      	ldr	r3, [r7, #28]
 800363c:	3301      	adds	r3, #1
 800363e:	61fb      	str	r3, [r7, #28]
 8003640:	69fb      	ldr	r3, [r7, #28]
 8003642:	2b0f      	cmp	r3, #15
 8003644:	f67f aea2 	bls.w	800338c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003648:	bf00      	nop
 800364a:	bf00      	nop
 800364c:	3724      	adds	r7, #36	; 0x24
 800364e:	46bd      	mov	sp, r7
 8003650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003654:	4770      	bx	lr
 8003656:	bf00      	nop
 8003658:	40023800 	.word	0x40023800
 800365c:	40013800 	.word	0x40013800
 8003660:	40020000 	.word	0x40020000
 8003664:	40020400 	.word	0x40020400
 8003668:	40020800 	.word	0x40020800
 800366c:	40020c00 	.word	0x40020c00
 8003670:	40021000 	.word	0x40021000
 8003674:	40013c00 	.word	0x40013c00

08003678 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003678:	b480      	push	{r7}
 800367a:	b083      	sub	sp, #12
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
 8003680:	460b      	mov	r3, r1
 8003682:	807b      	strh	r3, [r7, #2]
 8003684:	4613      	mov	r3, r2
 8003686:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003688:	787b      	ldrb	r3, [r7, #1]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d003      	beq.n	8003696 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800368e:	887a      	ldrh	r2, [r7, #2]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003694:	e003      	b.n	800369e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003696:	887b      	ldrh	r3, [r7, #2]
 8003698:	041a      	lsls	r2, r3, #16
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	619a      	str	r2, [r3, #24]
}
 800369e:	bf00      	nop
 80036a0:	370c      	adds	r7, #12
 80036a2:	46bd      	mov	sp, r7
 80036a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a8:	4770      	bx	lr
	...

080036ac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b086      	sub	sp, #24
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d101      	bne.n	80036be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80036ba:	2301      	movs	r3, #1
 80036bc:	e267      	b.n	8003b8e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f003 0301 	and.w	r3, r3, #1
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d075      	beq.n	80037b6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80036ca:	4b88      	ldr	r3, [pc, #544]	; (80038ec <HAL_RCC_OscConfig+0x240>)
 80036cc:	689b      	ldr	r3, [r3, #8]
 80036ce:	f003 030c 	and.w	r3, r3, #12
 80036d2:	2b04      	cmp	r3, #4
 80036d4:	d00c      	beq.n	80036f0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80036d6:	4b85      	ldr	r3, [pc, #532]	; (80038ec <HAL_RCC_OscConfig+0x240>)
 80036d8:	689b      	ldr	r3, [r3, #8]
 80036da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80036de:	2b08      	cmp	r3, #8
 80036e0:	d112      	bne.n	8003708 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80036e2:	4b82      	ldr	r3, [pc, #520]	; (80038ec <HAL_RCC_OscConfig+0x240>)
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80036ee:	d10b      	bne.n	8003708 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036f0:	4b7e      	ldr	r3, [pc, #504]	; (80038ec <HAL_RCC_OscConfig+0x240>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d05b      	beq.n	80037b4 <HAL_RCC_OscConfig+0x108>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d157      	bne.n	80037b4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003704:	2301      	movs	r3, #1
 8003706:	e242      	b.n	8003b8e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003710:	d106      	bne.n	8003720 <HAL_RCC_OscConfig+0x74>
 8003712:	4b76      	ldr	r3, [pc, #472]	; (80038ec <HAL_RCC_OscConfig+0x240>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4a75      	ldr	r2, [pc, #468]	; (80038ec <HAL_RCC_OscConfig+0x240>)
 8003718:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800371c:	6013      	str	r3, [r2, #0]
 800371e:	e01d      	b.n	800375c <HAL_RCC_OscConfig+0xb0>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003728:	d10c      	bne.n	8003744 <HAL_RCC_OscConfig+0x98>
 800372a:	4b70      	ldr	r3, [pc, #448]	; (80038ec <HAL_RCC_OscConfig+0x240>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4a6f      	ldr	r2, [pc, #444]	; (80038ec <HAL_RCC_OscConfig+0x240>)
 8003730:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003734:	6013      	str	r3, [r2, #0]
 8003736:	4b6d      	ldr	r3, [pc, #436]	; (80038ec <HAL_RCC_OscConfig+0x240>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4a6c      	ldr	r2, [pc, #432]	; (80038ec <HAL_RCC_OscConfig+0x240>)
 800373c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003740:	6013      	str	r3, [r2, #0]
 8003742:	e00b      	b.n	800375c <HAL_RCC_OscConfig+0xb0>
 8003744:	4b69      	ldr	r3, [pc, #420]	; (80038ec <HAL_RCC_OscConfig+0x240>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a68      	ldr	r2, [pc, #416]	; (80038ec <HAL_RCC_OscConfig+0x240>)
 800374a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800374e:	6013      	str	r3, [r2, #0]
 8003750:	4b66      	ldr	r3, [pc, #408]	; (80038ec <HAL_RCC_OscConfig+0x240>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a65      	ldr	r2, [pc, #404]	; (80038ec <HAL_RCC_OscConfig+0x240>)
 8003756:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800375a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d013      	beq.n	800378c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003764:	f7ff fcee 	bl	8003144 <HAL_GetTick>
 8003768:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800376a:	e008      	b.n	800377e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800376c:	f7ff fcea 	bl	8003144 <HAL_GetTick>
 8003770:	4602      	mov	r2, r0
 8003772:	693b      	ldr	r3, [r7, #16]
 8003774:	1ad3      	subs	r3, r2, r3
 8003776:	2b64      	cmp	r3, #100	; 0x64
 8003778:	d901      	bls.n	800377e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800377a:	2303      	movs	r3, #3
 800377c:	e207      	b.n	8003b8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800377e:	4b5b      	ldr	r3, [pc, #364]	; (80038ec <HAL_RCC_OscConfig+0x240>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003786:	2b00      	cmp	r3, #0
 8003788:	d0f0      	beq.n	800376c <HAL_RCC_OscConfig+0xc0>
 800378a:	e014      	b.n	80037b6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800378c:	f7ff fcda 	bl	8003144 <HAL_GetTick>
 8003790:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003792:	e008      	b.n	80037a6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003794:	f7ff fcd6 	bl	8003144 <HAL_GetTick>
 8003798:	4602      	mov	r2, r0
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	1ad3      	subs	r3, r2, r3
 800379e:	2b64      	cmp	r3, #100	; 0x64
 80037a0:	d901      	bls.n	80037a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80037a2:	2303      	movs	r3, #3
 80037a4:	e1f3      	b.n	8003b8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037a6:	4b51      	ldr	r3, [pc, #324]	; (80038ec <HAL_RCC_OscConfig+0x240>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d1f0      	bne.n	8003794 <HAL_RCC_OscConfig+0xe8>
 80037b2:	e000      	b.n	80037b6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f003 0302 	and.w	r3, r3, #2
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d063      	beq.n	800388a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80037c2:	4b4a      	ldr	r3, [pc, #296]	; (80038ec <HAL_RCC_OscConfig+0x240>)
 80037c4:	689b      	ldr	r3, [r3, #8]
 80037c6:	f003 030c 	and.w	r3, r3, #12
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d00b      	beq.n	80037e6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80037ce:	4b47      	ldr	r3, [pc, #284]	; (80038ec <HAL_RCC_OscConfig+0x240>)
 80037d0:	689b      	ldr	r3, [r3, #8]
 80037d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80037d6:	2b08      	cmp	r3, #8
 80037d8:	d11c      	bne.n	8003814 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80037da:	4b44      	ldr	r3, [pc, #272]	; (80038ec <HAL_RCC_OscConfig+0x240>)
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d116      	bne.n	8003814 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037e6:	4b41      	ldr	r3, [pc, #260]	; (80038ec <HAL_RCC_OscConfig+0x240>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f003 0302 	and.w	r3, r3, #2
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d005      	beq.n	80037fe <HAL_RCC_OscConfig+0x152>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	68db      	ldr	r3, [r3, #12]
 80037f6:	2b01      	cmp	r3, #1
 80037f8:	d001      	beq.n	80037fe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80037fa:	2301      	movs	r3, #1
 80037fc:	e1c7      	b.n	8003b8e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037fe:	4b3b      	ldr	r3, [pc, #236]	; (80038ec <HAL_RCC_OscConfig+0x240>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	691b      	ldr	r3, [r3, #16]
 800380a:	00db      	lsls	r3, r3, #3
 800380c:	4937      	ldr	r1, [pc, #220]	; (80038ec <HAL_RCC_OscConfig+0x240>)
 800380e:	4313      	orrs	r3, r2
 8003810:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003812:	e03a      	b.n	800388a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	68db      	ldr	r3, [r3, #12]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d020      	beq.n	800385e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800381c:	4b34      	ldr	r3, [pc, #208]	; (80038f0 <HAL_RCC_OscConfig+0x244>)
 800381e:	2201      	movs	r2, #1
 8003820:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003822:	f7ff fc8f 	bl	8003144 <HAL_GetTick>
 8003826:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003828:	e008      	b.n	800383c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800382a:	f7ff fc8b 	bl	8003144 <HAL_GetTick>
 800382e:	4602      	mov	r2, r0
 8003830:	693b      	ldr	r3, [r7, #16]
 8003832:	1ad3      	subs	r3, r2, r3
 8003834:	2b02      	cmp	r3, #2
 8003836:	d901      	bls.n	800383c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003838:	2303      	movs	r3, #3
 800383a:	e1a8      	b.n	8003b8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800383c:	4b2b      	ldr	r3, [pc, #172]	; (80038ec <HAL_RCC_OscConfig+0x240>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f003 0302 	and.w	r3, r3, #2
 8003844:	2b00      	cmp	r3, #0
 8003846:	d0f0      	beq.n	800382a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003848:	4b28      	ldr	r3, [pc, #160]	; (80038ec <HAL_RCC_OscConfig+0x240>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	691b      	ldr	r3, [r3, #16]
 8003854:	00db      	lsls	r3, r3, #3
 8003856:	4925      	ldr	r1, [pc, #148]	; (80038ec <HAL_RCC_OscConfig+0x240>)
 8003858:	4313      	orrs	r3, r2
 800385a:	600b      	str	r3, [r1, #0]
 800385c:	e015      	b.n	800388a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800385e:	4b24      	ldr	r3, [pc, #144]	; (80038f0 <HAL_RCC_OscConfig+0x244>)
 8003860:	2200      	movs	r2, #0
 8003862:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003864:	f7ff fc6e 	bl	8003144 <HAL_GetTick>
 8003868:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800386a:	e008      	b.n	800387e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800386c:	f7ff fc6a 	bl	8003144 <HAL_GetTick>
 8003870:	4602      	mov	r2, r0
 8003872:	693b      	ldr	r3, [r7, #16]
 8003874:	1ad3      	subs	r3, r2, r3
 8003876:	2b02      	cmp	r3, #2
 8003878:	d901      	bls.n	800387e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800387a:	2303      	movs	r3, #3
 800387c:	e187      	b.n	8003b8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800387e:	4b1b      	ldr	r3, [pc, #108]	; (80038ec <HAL_RCC_OscConfig+0x240>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f003 0302 	and.w	r3, r3, #2
 8003886:	2b00      	cmp	r3, #0
 8003888:	d1f0      	bne.n	800386c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f003 0308 	and.w	r3, r3, #8
 8003892:	2b00      	cmp	r3, #0
 8003894:	d036      	beq.n	8003904 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	695b      	ldr	r3, [r3, #20]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d016      	beq.n	80038cc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800389e:	4b15      	ldr	r3, [pc, #84]	; (80038f4 <HAL_RCC_OscConfig+0x248>)
 80038a0:	2201      	movs	r2, #1
 80038a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038a4:	f7ff fc4e 	bl	8003144 <HAL_GetTick>
 80038a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038aa:	e008      	b.n	80038be <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038ac:	f7ff fc4a 	bl	8003144 <HAL_GetTick>
 80038b0:	4602      	mov	r2, r0
 80038b2:	693b      	ldr	r3, [r7, #16]
 80038b4:	1ad3      	subs	r3, r2, r3
 80038b6:	2b02      	cmp	r3, #2
 80038b8:	d901      	bls.n	80038be <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80038ba:	2303      	movs	r3, #3
 80038bc:	e167      	b.n	8003b8e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038be:	4b0b      	ldr	r3, [pc, #44]	; (80038ec <HAL_RCC_OscConfig+0x240>)
 80038c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038c2:	f003 0302 	and.w	r3, r3, #2
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d0f0      	beq.n	80038ac <HAL_RCC_OscConfig+0x200>
 80038ca:	e01b      	b.n	8003904 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80038cc:	4b09      	ldr	r3, [pc, #36]	; (80038f4 <HAL_RCC_OscConfig+0x248>)
 80038ce:	2200      	movs	r2, #0
 80038d0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038d2:	f7ff fc37 	bl	8003144 <HAL_GetTick>
 80038d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038d8:	e00e      	b.n	80038f8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038da:	f7ff fc33 	bl	8003144 <HAL_GetTick>
 80038de:	4602      	mov	r2, r0
 80038e0:	693b      	ldr	r3, [r7, #16]
 80038e2:	1ad3      	subs	r3, r2, r3
 80038e4:	2b02      	cmp	r3, #2
 80038e6:	d907      	bls.n	80038f8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80038e8:	2303      	movs	r3, #3
 80038ea:	e150      	b.n	8003b8e <HAL_RCC_OscConfig+0x4e2>
 80038ec:	40023800 	.word	0x40023800
 80038f0:	42470000 	.word	0x42470000
 80038f4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038f8:	4b88      	ldr	r3, [pc, #544]	; (8003b1c <HAL_RCC_OscConfig+0x470>)
 80038fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038fc:	f003 0302 	and.w	r3, r3, #2
 8003900:	2b00      	cmp	r3, #0
 8003902:	d1ea      	bne.n	80038da <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f003 0304 	and.w	r3, r3, #4
 800390c:	2b00      	cmp	r3, #0
 800390e:	f000 8097 	beq.w	8003a40 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003912:	2300      	movs	r3, #0
 8003914:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003916:	4b81      	ldr	r3, [pc, #516]	; (8003b1c <HAL_RCC_OscConfig+0x470>)
 8003918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800391a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800391e:	2b00      	cmp	r3, #0
 8003920:	d10f      	bne.n	8003942 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003922:	2300      	movs	r3, #0
 8003924:	60bb      	str	r3, [r7, #8]
 8003926:	4b7d      	ldr	r3, [pc, #500]	; (8003b1c <HAL_RCC_OscConfig+0x470>)
 8003928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800392a:	4a7c      	ldr	r2, [pc, #496]	; (8003b1c <HAL_RCC_OscConfig+0x470>)
 800392c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003930:	6413      	str	r3, [r2, #64]	; 0x40
 8003932:	4b7a      	ldr	r3, [pc, #488]	; (8003b1c <HAL_RCC_OscConfig+0x470>)
 8003934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003936:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800393a:	60bb      	str	r3, [r7, #8]
 800393c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800393e:	2301      	movs	r3, #1
 8003940:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003942:	4b77      	ldr	r3, [pc, #476]	; (8003b20 <HAL_RCC_OscConfig+0x474>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800394a:	2b00      	cmp	r3, #0
 800394c:	d118      	bne.n	8003980 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800394e:	4b74      	ldr	r3, [pc, #464]	; (8003b20 <HAL_RCC_OscConfig+0x474>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4a73      	ldr	r2, [pc, #460]	; (8003b20 <HAL_RCC_OscConfig+0x474>)
 8003954:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003958:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800395a:	f7ff fbf3 	bl	8003144 <HAL_GetTick>
 800395e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003960:	e008      	b.n	8003974 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003962:	f7ff fbef 	bl	8003144 <HAL_GetTick>
 8003966:	4602      	mov	r2, r0
 8003968:	693b      	ldr	r3, [r7, #16]
 800396a:	1ad3      	subs	r3, r2, r3
 800396c:	2b02      	cmp	r3, #2
 800396e:	d901      	bls.n	8003974 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003970:	2303      	movs	r3, #3
 8003972:	e10c      	b.n	8003b8e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003974:	4b6a      	ldr	r3, [pc, #424]	; (8003b20 <HAL_RCC_OscConfig+0x474>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800397c:	2b00      	cmp	r3, #0
 800397e:	d0f0      	beq.n	8003962 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	689b      	ldr	r3, [r3, #8]
 8003984:	2b01      	cmp	r3, #1
 8003986:	d106      	bne.n	8003996 <HAL_RCC_OscConfig+0x2ea>
 8003988:	4b64      	ldr	r3, [pc, #400]	; (8003b1c <HAL_RCC_OscConfig+0x470>)
 800398a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800398c:	4a63      	ldr	r2, [pc, #396]	; (8003b1c <HAL_RCC_OscConfig+0x470>)
 800398e:	f043 0301 	orr.w	r3, r3, #1
 8003992:	6713      	str	r3, [r2, #112]	; 0x70
 8003994:	e01c      	b.n	80039d0 <HAL_RCC_OscConfig+0x324>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	689b      	ldr	r3, [r3, #8]
 800399a:	2b05      	cmp	r3, #5
 800399c:	d10c      	bne.n	80039b8 <HAL_RCC_OscConfig+0x30c>
 800399e:	4b5f      	ldr	r3, [pc, #380]	; (8003b1c <HAL_RCC_OscConfig+0x470>)
 80039a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039a2:	4a5e      	ldr	r2, [pc, #376]	; (8003b1c <HAL_RCC_OscConfig+0x470>)
 80039a4:	f043 0304 	orr.w	r3, r3, #4
 80039a8:	6713      	str	r3, [r2, #112]	; 0x70
 80039aa:	4b5c      	ldr	r3, [pc, #368]	; (8003b1c <HAL_RCC_OscConfig+0x470>)
 80039ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039ae:	4a5b      	ldr	r2, [pc, #364]	; (8003b1c <HAL_RCC_OscConfig+0x470>)
 80039b0:	f043 0301 	orr.w	r3, r3, #1
 80039b4:	6713      	str	r3, [r2, #112]	; 0x70
 80039b6:	e00b      	b.n	80039d0 <HAL_RCC_OscConfig+0x324>
 80039b8:	4b58      	ldr	r3, [pc, #352]	; (8003b1c <HAL_RCC_OscConfig+0x470>)
 80039ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039bc:	4a57      	ldr	r2, [pc, #348]	; (8003b1c <HAL_RCC_OscConfig+0x470>)
 80039be:	f023 0301 	bic.w	r3, r3, #1
 80039c2:	6713      	str	r3, [r2, #112]	; 0x70
 80039c4:	4b55      	ldr	r3, [pc, #340]	; (8003b1c <HAL_RCC_OscConfig+0x470>)
 80039c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039c8:	4a54      	ldr	r2, [pc, #336]	; (8003b1c <HAL_RCC_OscConfig+0x470>)
 80039ca:	f023 0304 	bic.w	r3, r3, #4
 80039ce:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	689b      	ldr	r3, [r3, #8]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d015      	beq.n	8003a04 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039d8:	f7ff fbb4 	bl	8003144 <HAL_GetTick>
 80039dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039de:	e00a      	b.n	80039f6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039e0:	f7ff fbb0 	bl	8003144 <HAL_GetTick>
 80039e4:	4602      	mov	r2, r0
 80039e6:	693b      	ldr	r3, [r7, #16]
 80039e8:	1ad3      	subs	r3, r2, r3
 80039ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d901      	bls.n	80039f6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80039f2:	2303      	movs	r3, #3
 80039f4:	e0cb      	b.n	8003b8e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039f6:	4b49      	ldr	r3, [pc, #292]	; (8003b1c <HAL_RCC_OscConfig+0x470>)
 80039f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039fa:	f003 0302 	and.w	r3, r3, #2
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d0ee      	beq.n	80039e0 <HAL_RCC_OscConfig+0x334>
 8003a02:	e014      	b.n	8003a2e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a04:	f7ff fb9e 	bl	8003144 <HAL_GetTick>
 8003a08:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a0a:	e00a      	b.n	8003a22 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a0c:	f7ff fb9a 	bl	8003144 <HAL_GetTick>
 8003a10:	4602      	mov	r2, r0
 8003a12:	693b      	ldr	r3, [r7, #16]
 8003a14:	1ad3      	subs	r3, r2, r3
 8003a16:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d901      	bls.n	8003a22 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003a1e:	2303      	movs	r3, #3
 8003a20:	e0b5      	b.n	8003b8e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a22:	4b3e      	ldr	r3, [pc, #248]	; (8003b1c <HAL_RCC_OscConfig+0x470>)
 8003a24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a26:	f003 0302 	and.w	r3, r3, #2
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d1ee      	bne.n	8003a0c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003a2e:	7dfb      	ldrb	r3, [r7, #23]
 8003a30:	2b01      	cmp	r3, #1
 8003a32:	d105      	bne.n	8003a40 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a34:	4b39      	ldr	r3, [pc, #228]	; (8003b1c <HAL_RCC_OscConfig+0x470>)
 8003a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a38:	4a38      	ldr	r2, [pc, #224]	; (8003b1c <HAL_RCC_OscConfig+0x470>)
 8003a3a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a3e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	699b      	ldr	r3, [r3, #24]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	f000 80a1 	beq.w	8003b8c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003a4a:	4b34      	ldr	r3, [pc, #208]	; (8003b1c <HAL_RCC_OscConfig+0x470>)
 8003a4c:	689b      	ldr	r3, [r3, #8]
 8003a4e:	f003 030c 	and.w	r3, r3, #12
 8003a52:	2b08      	cmp	r3, #8
 8003a54:	d05c      	beq.n	8003b10 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	699b      	ldr	r3, [r3, #24]
 8003a5a:	2b02      	cmp	r3, #2
 8003a5c:	d141      	bne.n	8003ae2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a5e:	4b31      	ldr	r3, [pc, #196]	; (8003b24 <HAL_RCC_OscConfig+0x478>)
 8003a60:	2200      	movs	r2, #0
 8003a62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a64:	f7ff fb6e 	bl	8003144 <HAL_GetTick>
 8003a68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a6a:	e008      	b.n	8003a7e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a6c:	f7ff fb6a 	bl	8003144 <HAL_GetTick>
 8003a70:	4602      	mov	r2, r0
 8003a72:	693b      	ldr	r3, [r7, #16]
 8003a74:	1ad3      	subs	r3, r2, r3
 8003a76:	2b02      	cmp	r3, #2
 8003a78:	d901      	bls.n	8003a7e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003a7a:	2303      	movs	r3, #3
 8003a7c:	e087      	b.n	8003b8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a7e:	4b27      	ldr	r3, [pc, #156]	; (8003b1c <HAL_RCC_OscConfig+0x470>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d1f0      	bne.n	8003a6c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	69da      	ldr	r2, [r3, #28]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6a1b      	ldr	r3, [r3, #32]
 8003a92:	431a      	orrs	r2, r3
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a98:	019b      	lsls	r3, r3, #6
 8003a9a:	431a      	orrs	r2, r3
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aa0:	085b      	lsrs	r3, r3, #1
 8003aa2:	3b01      	subs	r3, #1
 8003aa4:	041b      	lsls	r3, r3, #16
 8003aa6:	431a      	orrs	r2, r3
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aac:	061b      	lsls	r3, r3, #24
 8003aae:	491b      	ldr	r1, [pc, #108]	; (8003b1c <HAL_RCC_OscConfig+0x470>)
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ab4:	4b1b      	ldr	r3, [pc, #108]	; (8003b24 <HAL_RCC_OscConfig+0x478>)
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003aba:	f7ff fb43 	bl	8003144 <HAL_GetTick>
 8003abe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ac0:	e008      	b.n	8003ad4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ac2:	f7ff fb3f 	bl	8003144 <HAL_GetTick>
 8003ac6:	4602      	mov	r2, r0
 8003ac8:	693b      	ldr	r3, [r7, #16]
 8003aca:	1ad3      	subs	r3, r2, r3
 8003acc:	2b02      	cmp	r3, #2
 8003ace:	d901      	bls.n	8003ad4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003ad0:	2303      	movs	r3, #3
 8003ad2:	e05c      	b.n	8003b8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ad4:	4b11      	ldr	r3, [pc, #68]	; (8003b1c <HAL_RCC_OscConfig+0x470>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d0f0      	beq.n	8003ac2 <HAL_RCC_OscConfig+0x416>
 8003ae0:	e054      	b.n	8003b8c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ae2:	4b10      	ldr	r3, [pc, #64]	; (8003b24 <HAL_RCC_OscConfig+0x478>)
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ae8:	f7ff fb2c 	bl	8003144 <HAL_GetTick>
 8003aec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003aee:	e008      	b.n	8003b02 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003af0:	f7ff fb28 	bl	8003144 <HAL_GetTick>
 8003af4:	4602      	mov	r2, r0
 8003af6:	693b      	ldr	r3, [r7, #16]
 8003af8:	1ad3      	subs	r3, r2, r3
 8003afa:	2b02      	cmp	r3, #2
 8003afc:	d901      	bls.n	8003b02 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003afe:	2303      	movs	r3, #3
 8003b00:	e045      	b.n	8003b8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b02:	4b06      	ldr	r3, [pc, #24]	; (8003b1c <HAL_RCC_OscConfig+0x470>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d1f0      	bne.n	8003af0 <HAL_RCC_OscConfig+0x444>
 8003b0e:	e03d      	b.n	8003b8c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	699b      	ldr	r3, [r3, #24]
 8003b14:	2b01      	cmp	r3, #1
 8003b16:	d107      	bne.n	8003b28 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003b18:	2301      	movs	r3, #1
 8003b1a:	e038      	b.n	8003b8e <HAL_RCC_OscConfig+0x4e2>
 8003b1c:	40023800 	.word	0x40023800
 8003b20:	40007000 	.word	0x40007000
 8003b24:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003b28:	4b1b      	ldr	r3, [pc, #108]	; (8003b98 <HAL_RCC_OscConfig+0x4ec>)
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	699b      	ldr	r3, [r3, #24]
 8003b32:	2b01      	cmp	r3, #1
 8003b34:	d028      	beq.n	8003b88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b40:	429a      	cmp	r2, r3
 8003b42:	d121      	bne.n	8003b88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b4e:	429a      	cmp	r2, r3
 8003b50:	d11a      	bne.n	8003b88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b52:	68fa      	ldr	r2, [r7, #12]
 8003b54:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003b58:	4013      	ands	r3, r2
 8003b5a:	687a      	ldr	r2, [r7, #4]
 8003b5c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003b5e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d111      	bne.n	8003b88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b6e:	085b      	lsrs	r3, r3, #1
 8003b70:	3b01      	subs	r3, #1
 8003b72:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b74:	429a      	cmp	r2, r3
 8003b76:	d107      	bne.n	8003b88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b82:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b84:	429a      	cmp	r2, r3
 8003b86:	d001      	beq.n	8003b8c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003b88:	2301      	movs	r3, #1
 8003b8a:	e000      	b.n	8003b8e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003b8c:	2300      	movs	r3, #0
}
 8003b8e:	4618      	mov	r0, r3
 8003b90:	3718      	adds	r7, #24
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bd80      	pop	{r7, pc}
 8003b96:	bf00      	nop
 8003b98:	40023800 	.word	0x40023800

08003b9c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b084      	sub	sp, #16
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
 8003ba4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d101      	bne.n	8003bb0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003bac:	2301      	movs	r3, #1
 8003bae:	e0cc      	b.n	8003d4a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003bb0:	4b68      	ldr	r3, [pc, #416]	; (8003d54 <HAL_RCC_ClockConfig+0x1b8>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f003 0307 	and.w	r3, r3, #7
 8003bb8:	683a      	ldr	r2, [r7, #0]
 8003bba:	429a      	cmp	r2, r3
 8003bbc:	d90c      	bls.n	8003bd8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bbe:	4b65      	ldr	r3, [pc, #404]	; (8003d54 <HAL_RCC_ClockConfig+0x1b8>)
 8003bc0:	683a      	ldr	r2, [r7, #0]
 8003bc2:	b2d2      	uxtb	r2, r2
 8003bc4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bc6:	4b63      	ldr	r3, [pc, #396]	; (8003d54 <HAL_RCC_ClockConfig+0x1b8>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f003 0307 	and.w	r3, r3, #7
 8003bce:	683a      	ldr	r2, [r7, #0]
 8003bd0:	429a      	cmp	r2, r3
 8003bd2:	d001      	beq.n	8003bd8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	e0b8      	b.n	8003d4a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f003 0302 	and.w	r3, r3, #2
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d020      	beq.n	8003c26 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f003 0304 	and.w	r3, r3, #4
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d005      	beq.n	8003bfc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003bf0:	4b59      	ldr	r3, [pc, #356]	; (8003d58 <HAL_RCC_ClockConfig+0x1bc>)
 8003bf2:	689b      	ldr	r3, [r3, #8]
 8003bf4:	4a58      	ldr	r2, [pc, #352]	; (8003d58 <HAL_RCC_ClockConfig+0x1bc>)
 8003bf6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003bfa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f003 0308 	and.w	r3, r3, #8
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d005      	beq.n	8003c14 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c08:	4b53      	ldr	r3, [pc, #332]	; (8003d58 <HAL_RCC_ClockConfig+0x1bc>)
 8003c0a:	689b      	ldr	r3, [r3, #8]
 8003c0c:	4a52      	ldr	r2, [pc, #328]	; (8003d58 <HAL_RCC_ClockConfig+0x1bc>)
 8003c0e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003c12:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c14:	4b50      	ldr	r3, [pc, #320]	; (8003d58 <HAL_RCC_ClockConfig+0x1bc>)
 8003c16:	689b      	ldr	r3, [r3, #8]
 8003c18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	689b      	ldr	r3, [r3, #8]
 8003c20:	494d      	ldr	r1, [pc, #308]	; (8003d58 <HAL_RCC_ClockConfig+0x1bc>)
 8003c22:	4313      	orrs	r3, r2
 8003c24:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f003 0301 	and.w	r3, r3, #1
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d044      	beq.n	8003cbc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	2b01      	cmp	r3, #1
 8003c38:	d107      	bne.n	8003c4a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c3a:	4b47      	ldr	r3, [pc, #284]	; (8003d58 <HAL_RCC_ClockConfig+0x1bc>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d119      	bne.n	8003c7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c46:	2301      	movs	r3, #1
 8003c48:	e07f      	b.n	8003d4a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	2b02      	cmp	r3, #2
 8003c50:	d003      	beq.n	8003c5a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c56:	2b03      	cmp	r3, #3
 8003c58:	d107      	bne.n	8003c6a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c5a:	4b3f      	ldr	r3, [pc, #252]	; (8003d58 <HAL_RCC_ClockConfig+0x1bc>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d109      	bne.n	8003c7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c66:	2301      	movs	r3, #1
 8003c68:	e06f      	b.n	8003d4a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c6a:	4b3b      	ldr	r3, [pc, #236]	; (8003d58 <HAL_RCC_ClockConfig+0x1bc>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f003 0302 	and.w	r3, r3, #2
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d101      	bne.n	8003c7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c76:	2301      	movs	r3, #1
 8003c78:	e067      	b.n	8003d4a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c7a:	4b37      	ldr	r3, [pc, #220]	; (8003d58 <HAL_RCC_ClockConfig+0x1bc>)
 8003c7c:	689b      	ldr	r3, [r3, #8]
 8003c7e:	f023 0203 	bic.w	r2, r3, #3
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	4934      	ldr	r1, [pc, #208]	; (8003d58 <HAL_RCC_ClockConfig+0x1bc>)
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c8c:	f7ff fa5a 	bl	8003144 <HAL_GetTick>
 8003c90:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c92:	e00a      	b.n	8003caa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c94:	f7ff fa56 	bl	8003144 <HAL_GetTick>
 8003c98:	4602      	mov	r2, r0
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	1ad3      	subs	r3, r2, r3
 8003c9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d901      	bls.n	8003caa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003ca6:	2303      	movs	r3, #3
 8003ca8:	e04f      	b.n	8003d4a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003caa:	4b2b      	ldr	r3, [pc, #172]	; (8003d58 <HAL_RCC_ClockConfig+0x1bc>)
 8003cac:	689b      	ldr	r3, [r3, #8]
 8003cae:	f003 020c 	and.w	r2, r3, #12
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	009b      	lsls	r3, r3, #2
 8003cb8:	429a      	cmp	r2, r3
 8003cba:	d1eb      	bne.n	8003c94 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003cbc:	4b25      	ldr	r3, [pc, #148]	; (8003d54 <HAL_RCC_ClockConfig+0x1b8>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f003 0307 	and.w	r3, r3, #7
 8003cc4:	683a      	ldr	r2, [r7, #0]
 8003cc6:	429a      	cmp	r2, r3
 8003cc8:	d20c      	bcs.n	8003ce4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cca:	4b22      	ldr	r3, [pc, #136]	; (8003d54 <HAL_RCC_ClockConfig+0x1b8>)
 8003ccc:	683a      	ldr	r2, [r7, #0]
 8003cce:	b2d2      	uxtb	r2, r2
 8003cd0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cd2:	4b20      	ldr	r3, [pc, #128]	; (8003d54 <HAL_RCC_ClockConfig+0x1b8>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f003 0307 	and.w	r3, r3, #7
 8003cda:	683a      	ldr	r2, [r7, #0]
 8003cdc:	429a      	cmp	r2, r3
 8003cde:	d001      	beq.n	8003ce4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	e032      	b.n	8003d4a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f003 0304 	and.w	r3, r3, #4
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d008      	beq.n	8003d02 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003cf0:	4b19      	ldr	r3, [pc, #100]	; (8003d58 <HAL_RCC_ClockConfig+0x1bc>)
 8003cf2:	689b      	ldr	r3, [r3, #8]
 8003cf4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	68db      	ldr	r3, [r3, #12]
 8003cfc:	4916      	ldr	r1, [pc, #88]	; (8003d58 <HAL_RCC_ClockConfig+0x1bc>)
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f003 0308 	and.w	r3, r3, #8
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d009      	beq.n	8003d22 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d0e:	4b12      	ldr	r3, [pc, #72]	; (8003d58 <HAL_RCC_ClockConfig+0x1bc>)
 8003d10:	689b      	ldr	r3, [r3, #8]
 8003d12:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	691b      	ldr	r3, [r3, #16]
 8003d1a:	00db      	lsls	r3, r3, #3
 8003d1c:	490e      	ldr	r1, [pc, #56]	; (8003d58 <HAL_RCC_ClockConfig+0x1bc>)
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003d22:	f000 f821 	bl	8003d68 <HAL_RCC_GetSysClockFreq>
 8003d26:	4602      	mov	r2, r0
 8003d28:	4b0b      	ldr	r3, [pc, #44]	; (8003d58 <HAL_RCC_ClockConfig+0x1bc>)
 8003d2a:	689b      	ldr	r3, [r3, #8]
 8003d2c:	091b      	lsrs	r3, r3, #4
 8003d2e:	f003 030f 	and.w	r3, r3, #15
 8003d32:	490a      	ldr	r1, [pc, #40]	; (8003d5c <HAL_RCC_ClockConfig+0x1c0>)
 8003d34:	5ccb      	ldrb	r3, [r1, r3]
 8003d36:	fa22 f303 	lsr.w	r3, r2, r3
 8003d3a:	4a09      	ldr	r2, [pc, #36]	; (8003d60 <HAL_RCC_ClockConfig+0x1c4>)
 8003d3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003d3e:	4b09      	ldr	r3, [pc, #36]	; (8003d64 <HAL_RCC_ClockConfig+0x1c8>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4618      	mov	r0, r3
 8003d44:	f7ff f9ba 	bl	80030bc <HAL_InitTick>

  return HAL_OK;
 8003d48:	2300      	movs	r3, #0
}
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	3710      	adds	r7, #16
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bd80      	pop	{r7, pc}
 8003d52:	bf00      	nop
 8003d54:	40023c00 	.word	0x40023c00
 8003d58:	40023800 	.word	0x40023800
 8003d5c:	0800b7b8 	.word	0x0800b7b8
 8003d60:	20000004 	.word	0x20000004
 8003d64:	20000008 	.word	0x20000008

08003d68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d6c:	b090      	sub	sp, #64	; 0x40
 8003d6e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003d70:	2300      	movs	r3, #0
 8003d72:	637b      	str	r3, [r7, #52]	; 0x34
 8003d74:	2300      	movs	r3, #0
 8003d76:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d78:	2300      	movs	r3, #0
 8003d7a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003d80:	4b59      	ldr	r3, [pc, #356]	; (8003ee8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003d82:	689b      	ldr	r3, [r3, #8]
 8003d84:	f003 030c 	and.w	r3, r3, #12
 8003d88:	2b08      	cmp	r3, #8
 8003d8a:	d00d      	beq.n	8003da8 <HAL_RCC_GetSysClockFreq+0x40>
 8003d8c:	2b08      	cmp	r3, #8
 8003d8e:	f200 80a1 	bhi.w	8003ed4 <HAL_RCC_GetSysClockFreq+0x16c>
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d002      	beq.n	8003d9c <HAL_RCC_GetSysClockFreq+0x34>
 8003d96:	2b04      	cmp	r3, #4
 8003d98:	d003      	beq.n	8003da2 <HAL_RCC_GetSysClockFreq+0x3a>
 8003d9a:	e09b      	b.n	8003ed4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003d9c:	4b53      	ldr	r3, [pc, #332]	; (8003eec <HAL_RCC_GetSysClockFreq+0x184>)
 8003d9e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003da0:	e09b      	b.n	8003eda <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003da2:	4b53      	ldr	r3, [pc, #332]	; (8003ef0 <HAL_RCC_GetSysClockFreq+0x188>)
 8003da4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003da6:	e098      	b.n	8003eda <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003da8:	4b4f      	ldr	r3, [pc, #316]	; (8003ee8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003db0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003db2:	4b4d      	ldr	r3, [pc, #308]	; (8003ee8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d028      	beq.n	8003e10 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003dbe:	4b4a      	ldr	r3, [pc, #296]	; (8003ee8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	099b      	lsrs	r3, r3, #6
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	623b      	str	r3, [r7, #32]
 8003dc8:	627a      	str	r2, [r7, #36]	; 0x24
 8003dca:	6a3b      	ldr	r3, [r7, #32]
 8003dcc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003dd0:	2100      	movs	r1, #0
 8003dd2:	4b47      	ldr	r3, [pc, #284]	; (8003ef0 <HAL_RCC_GetSysClockFreq+0x188>)
 8003dd4:	fb03 f201 	mul.w	r2, r3, r1
 8003dd8:	2300      	movs	r3, #0
 8003dda:	fb00 f303 	mul.w	r3, r0, r3
 8003dde:	4413      	add	r3, r2
 8003de0:	4a43      	ldr	r2, [pc, #268]	; (8003ef0 <HAL_RCC_GetSysClockFreq+0x188>)
 8003de2:	fba0 1202 	umull	r1, r2, r0, r2
 8003de6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003de8:	460a      	mov	r2, r1
 8003dea:	62ba      	str	r2, [r7, #40]	; 0x28
 8003dec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003dee:	4413      	add	r3, r2
 8003df0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003df2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003df4:	2200      	movs	r2, #0
 8003df6:	61bb      	str	r3, [r7, #24]
 8003df8:	61fa      	str	r2, [r7, #28]
 8003dfa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003dfe:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003e02:	f7fc ff29 	bl	8000c58 <__aeabi_uldivmod>
 8003e06:	4602      	mov	r2, r0
 8003e08:	460b      	mov	r3, r1
 8003e0a:	4613      	mov	r3, r2
 8003e0c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e0e:	e053      	b.n	8003eb8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e10:	4b35      	ldr	r3, [pc, #212]	; (8003ee8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	099b      	lsrs	r3, r3, #6
 8003e16:	2200      	movs	r2, #0
 8003e18:	613b      	str	r3, [r7, #16]
 8003e1a:	617a      	str	r2, [r7, #20]
 8003e1c:	693b      	ldr	r3, [r7, #16]
 8003e1e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003e22:	f04f 0b00 	mov.w	fp, #0
 8003e26:	4652      	mov	r2, sl
 8003e28:	465b      	mov	r3, fp
 8003e2a:	f04f 0000 	mov.w	r0, #0
 8003e2e:	f04f 0100 	mov.w	r1, #0
 8003e32:	0159      	lsls	r1, r3, #5
 8003e34:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e38:	0150      	lsls	r0, r2, #5
 8003e3a:	4602      	mov	r2, r0
 8003e3c:	460b      	mov	r3, r1
 8003e3e:	ebb2 080a 	subs.w	r8, r2, sl
 8003e42:	eb63 090b 	sbc.w	r9, r3, fp
 8003e46:	f04f 0200 	mov.w	r2, #0
 8003e4a:	f04f 0300 	mov.w	r3, #0
 8003e4e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003e52:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003e56:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003e5a:	ebb2 0408 	subs.w	r4, r2, r8
 8003e5e:	eb63 0509 	sbc.w	r5, r3, r9
 8003e62:	f04f 0200 	mov.w	r2, #0
 8003e66:	f04f 0300 	mov.w	r3, #0
 8003e6a:	00eb      	lsls	r3, r5, #3
 8003e6c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003e70:	00e2      	lsls	r2, r4, #3
 8003e72:	4614      	mov	r4, r2
 8003e74:	461d      	mov	r5, r3
 8003e76:	eb14 030a 	adds.w	r3, r4, sl
 8003e7a:	603b      	str	r3, [r7, #0]
 8003e7c:	eb45 030b 	adc.w	r3, r5, fp
 8003e80:	607b      	str	r3, [r7, #4]
 8003e82:	f04f 0200 	mov.w	r2, #0
 8003e86:	f04f 0300 	mov.w	r3, #0
 8003e8a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003e8e:	4629      	mov	r1, r5
 8003e90:	028b      	lsls	r3, r1, #10
 8003e92:	4621      	mov	r1, r4
 8003e94:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003e98:	4621      	mov	r1, r4
 8003e9a:	028a      	lsls	r2, r1, #10
 8003e9c:	4610      	mov	r0, r2
 8003e9e:	4619      	mov	r1, r3
 8003ea0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	60bb      	str	r3, [r7, #8]
 8003ea6:	60fa      	str	r2, [r7, #12]
 8003ea8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003eac:	f7fc fed4 	bl	8000c58 <__aeabi_uldivmod>
 8003eb0:	4602      	mov	r2, r0
 8003eb2:	460b      	mov	r3, r1
 8003eb4:	4613      	mov	r3, r2
 8003eb6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003eb8:	4b0b      	ldr	r3, [pc, #44]	; (8003ee8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	0c1b      	lsrs	r3, r3, #16
 8003ebe:	f003 0303 	and.w	r3, r3, #3
 8003ec2:	3301      	adds	r3, #1
 8003ec4:	005b      	lsls	r3, r3, #1
 8003ec6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003ec8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003eca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ecc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ed0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003ed2:	e002      	b.n	8003eda <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003ed4:	4b05      	ldr	r3, [pc, #20]	; (8003eec <HAL_RCC_GetSysClockFreq+0x184>)
 8003ed6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003ed8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003eda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003edc:	4618      	mov	r0, r3
 8003ede:	3740      	adds	r7, #64	; 0x40
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ee6:	bf00      	nop
 8003ee8:	40023800 	.word	0x40023800
 8003eec:	00f42400 	.word	0x00f42400
 8003ef0:	017d7840 	.word	0x017d7840

08003ef4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ef8:	4b03      	ldr	r3, [pc, #12]	; (8003f08 <HAL_RCC_GetHCLKFreq+0x14>)
 8003efa:	681b      	ldr	r3, [r3, #0]
}
 8003efc:	4618      	mov	r0, r3
 8003efe:	46bd      	mov	sp, r7
 8003f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f04:	4770      	bx	lr
 8003f06:	bf00      	nop
 8003f08:	20000004 	.word	0x20000004

08003f0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003f10:	f7ff fff0 	bl	8003ef4 <HAL_RCC_GetHCLKFreq>
 8003f14:	4602      	mov	r2, r0
 8003f16:	4b05      	ldr	r3, [pc, #20]	; (8003f2c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003f18:	689b      	ldr	r3, [r3, #8]
 8003f1a:	0a9b      	lsrs	r3, r3, #10
 8003f1c:	f003 0307 	and.w	r3, r3, #7
 8003f20:	4903      	ldr	r1, [pc, #12]	; (8003f30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f22:	5ccb      	ldrb	r3, [r1, r3]
 8003f24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f28:	4618      	mov	r0, r3
 8003f2a:	bd80      	pop	{r7, pc}
 8003f2c:	40023800 	.word	0x40023800
 8003f30:	0800b7c8 	.word	0x0800b7c8

08003f34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003f38:	f7ff ffdc 	bl	8003ef4 <HAL_RCC_GetHCLKFreq>
 8003f3c:	4602      	mov	r2, r0
 8003f3e:	4b05      	ldr	r3, [pc, #20]	; (8003f54 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003f40:	689b      	ldr	r3, [r3, #8]
 8003f42:	0b5b      	lsrs	r3, r3, #13
 8003f44:	f003 0307 	and.w	r3, r3, #7
 8003f48:	4903      	ldr	r1, [pc, #12]	; (8003f58 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f4a:	5ccb      	ldrb	r3, [r1, r3]
 8003f4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f50:	4618      	mov	r0, r3
 8003f52:	bd80      	pop	{r7, pc}
 8003f54:	40023800 	.word	0x40023800
 8003f58:	0800b7c8 	.word	0x0800b7c8

08003f5c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b082      	sub	sp, #8
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d101      	bne.n	8003f6e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	e07b      	b.n	8004066 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d108      	bne.n	8003f88 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f7e:	d009      	beq.n	8003f94 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2200      	movs	r2, #0
 8003f84:	61da      	str	r2, [r3, #28]
 8003f86:	e005      	b.n	8003f94 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2200      	movs	r2, #0
 8003f92:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2200      	movs	r2, #0
 8003f98:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003fa0:	b2db      	uxtb	r3, r3
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d106      	bne.n	8003fb4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003fae:	6878      	ldr	r0, [r7, #4]
 8003fb0:	f7fe fdc4 	bl	8002b3c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2202      	movs	r2, #2
 8003fb8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	681a      	ldr	r2, [r3, #0]
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003fca:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	689b      	ldr	r3, [r3, #8]
 8003fd8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003fdc:	431a      	orrs	r2, r3
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	68db      	ldr	r3, [r3, #12]
 8003fe2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003fe6:	431a      	orrs	r2, r3
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	691b      	ldr	r3, [r3, #16]
 8003fec:	f003 0302 	and.w	r3, r3, #2
 8003ff0:	431a      	orrs	r2, r3
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	695b      	ldr	r3, [r3, #20]
 8003ff6:	f003 0301 	and.w	r3, r3, #1
 8003ffa:	431a      	orrs	r2, r3
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	699b      	ldr	r3, [r3, #24]
 8004000:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004004:	431a      	orrs	r2, r3
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	69db      	ldr	r3, [r3, #28]
 800400a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800400e:	431a      	orrs	r2, r3
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6a1b      	ldr	r3, [r3, #32]
 8004014:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004018:	ea42 0103 	orr.w	r1, r2, r3
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004020:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	430a      	orrs	r2, r1
 800402a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	699b      	ldr	r3, [r3, #24]
 8004030:	0c1b      	lsrs	r3, r3, #16
 8004032:	f003 0104 	and.w	r1, r3, #4
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800403a:	f003 0210 	and.w	r2, r3, #16
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	430a      	orrs	r2, r1
 8004044:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	69da      	ldr	r2, [r3, #28]
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004054:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2200      	movs	r2, #0
 800405a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2201      	movs	r2, #1
 8004060:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004064:	2300      	movs	r3, #0
}
 8004066:	4618      	mov	r0, r3
 8004068:	3708      	adds	r7, #8
 800406a:	46bd      	mov	sp, r7
 800406c:	bd80      	pop	{r7, pc}

0800406e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800406e:	b580      	push	{r7, lr}
 8004070:	b088      	sub	sp, #32
 8004072:	af00      	add	r7, sp, #0
 8004074:	60f8      	str	r0, [r7, #12]
 8004076:	60b9      	str	r1, [r7, #8]
 8004078:	603b      	str	r3, [r7, #0]
 800407a:	4613      	mov	r3, r2
 800407c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800407e:	2300      	movs	r3, #0
 8004080:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004088:	2b01      	cmp	r3, #1
 800408a:	d101      	bne.n	8004090 <HAL_SPI_Transmit+0x22>
 800408c:	2302      	movs	r3, #2
 800408e:	e126      	b.n	80042de <HAL_SPI_Transmit+0x270>
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	2201      	movs	r2, #1
 8004094:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004098:	f7ff f854 	bl	8003144 <HAL_GetTick>
 800409c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800409e:	88fb      	ldrh	r3, [r7, #6]
 80040a0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80040a8:	b2db      	uxtb	r3, r3
 80040aa:	2b01      	cmp	r3, #1
 80040ac:	d002      	beq.n	80040b4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80040ae:	2302      	movs	r3, #2
 80040b0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80040b2:	e10b      	b.n	80042cc <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d002      	beq.n	80040c0 <HAL_SPI_Transmit+0x52>
 80040ba:	88fb      	ldrh	r3, [r7, #6]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d102      	bne.n	80040c6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80040c0:	2301      	movs	r3, #1
 80040c2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80040c4:	e102      	b.n	80042cc <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	2203      	movs	r2, #3
 80040ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	2200      	movs	r2, #0
 80040d2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	68ba      	ldr	r2, [r7, #8]
 80040d8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	88fa      	ldrh	r2, [r7, #6]
 80040de:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	88fa      	ldrh	r2, [r7, #6]
 80040e4:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	2200      	movs	r2, #0
 80040ea:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	2200      	movs	r2, #0
 80040f0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	2200      	movs	r2, #0
 80040f6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	2200      	movs	r2, #0
 80040fc:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	2200      	movs	r2, #0
 8004102:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	689b      	ldr	r3, [r3, #8]
 8004108:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800410c:	d10f      	bne.n	800412e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	681a      	ldr	r2, [r3, #0]
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800411c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	681a      	ldr	r2, [r3, #0]
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800412c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004138:	2b40      	cmp	r3, #64	; 0x40
 800413a:	d007      	beq.n	800414c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	681a      	ldr	r2, [r3, #0]
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800414a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	68db      	ldr	r3, [r3, #12]
 8004150:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004154:	d14b      	bne.n	80041ee <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d002      	beq.n	8004164 <HAL_SPI_Transmit+0xf6>
 800415e:	8afb      	ldrh	r3, [r7, #22]
 8004160:	2b01      	cmp	r3, #1
 8004162:	d13e      	bne.n	80041e2 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004168:	881a      	ldrh	r2, [r3, #0]
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004174:	1c9a      	adds	r2, r3, #2
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800417e:	b29b      	uxth	r3, r3
 8004180:	3b01      	subs	r3, #1
 8004182:	b29a      	uxth	r2, r3
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004188:	e02b      	b.n	80041e2 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	689b      	ldr	r3, [r3, #8]
 8004190:	f003 0302 	and.w	r3, r3, #2
 8004194:	2b02      	cmp	r3, #2
 8004196:	d112      	bne.n	80041be <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800419c:	881a      	ldrh	r2, [r3, #0]
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041a8:	1c9a      	adds	r2, r3, #2
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041b2:	b29b      	uxth	r3, r3
 80041b4:	3b01      	subs	r3, #1
 80041b6:	b29a      	uxth	r2, r3
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	86da      	strh	r2, [r3, #54]	; 0x36
 80041bc:	e011      	b.n	80041e2 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80041be:	f7fe ffc1 	bl	8003144 <HAL_GetTick>
 80041c2:	4602      	mov	r2, r0
 80041c4:	69bb      	ldr	r3, [r7, #24]
 80041c6:	1ad3      	subs	r3, r2, r3
 80041c8:	683a      	ldr	r2, [r7, #0]
 80041ca:	429a      	cmp	r2, r3
 80041cc:	d803      	bhi.n	80041d6 <HAL_SPI_Transmit+0x168>
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041d4:	d102      	bne.n	80041dc <HAL_SPI_Transmit+0x16e>
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d102      	bne.n	80041e2 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80041dc:	2303      	movs	r3, #3
 80041de:	77fb      	strb	r3, [r7, #31]
          goto error;
 80041e0:	e074      	b.n	80042cc <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041e6:	b29b      	uxth	r3, r3
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d1ce      	bne.n	800418a <HAL_SPI_Transmit+0x11c>
 80041ec:	e04c      	b.n	8004288 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d002      	beq.n	80041fc <HAL_SPI_Transmit+0x18e>
 80041f6:	8afb      	ldrh	r3, [r7, #22]
 80041f8:	2b01      	cmp	r3, #1
 80041fa:	d140      	bne.n	800427e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	330c      	adds	r3, #12
 8004206:	7812      	ldrb	r2, [r2, #0]
 8004208:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800420e:	1c5a      	adds	r2, r3, #1
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004218:	b29b      	uxth	r3, r3
 800421a:	3b01      	subs	r3, #1
 800421c:	b29a      	uxth	r2, r3
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004222:	e02c      	b.n	800427e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	689b      	ldr	r3, [r3, #8]
 800422a:	f003 0302 	and.w	r3, r3, #2
 800422e:	2b02      	cmp	r3, #2
 8004230:	d113      	bne.n	800425a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	330c      	adds	r3, #12
 800423c:	7812      	ldrb	r2, [r2, #0]
 800423e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004244:	1c5a      	adds	r2, r3, #1
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800424e:	b29b      	uxth	r3, r3
 8004250:	3b01      	subs	r3, #1
 8004252:	b29a      	uxth	r2, r3
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	86da      	strh	r2, [r3, #54]	; 0x36
 8004258:	e011      	b.n	800427e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800425a:	f7fe ff73 	bl	8003144 <HAL_GetTick>
 800425e:	4602      	mov	r2, r0
 8004260:	69bb      	ldr	r3, [r7, #24]
 8004262:	1ad3      	subs	r3, r2, r3
 8004264:	683a      	ldr	r2, [r7, #0]
 8004266:	429a      	cmp	r2, r3
 8004268:	d803      	bhi.n	8004272 <HAL_SPI_Transmit+0x204>
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004270:	d102      	bne.n	8004278 <HAL_SPI_Transmit+0x20a>
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d102      	bne.n	800427e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004278:	2303      	movs	r3, #3
 800427a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800427c:	e026      	b.n	80042cc <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004282:	b29b      	uxth	r3, r3
 8004284:	2b00      	cmp	r3, #0
 8004286:	d1cd      	bne.n	8004224 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004288:	69ba      	ldr	r2, [r7, #24]
 800428a:	6839      	ldr	r1, [r7, #0]
 800428c:	68f8      	ldr	r0, [r7, #12]
 800428e:	f000 fbcb 	bl	8004a28 <SPI_EndRxTxTransaction>
 8004292:	4603      	mov	r3, r0
 8004294:	2b00      	cmp	r3, #0
 8004296:	d002      	beq.n	800429e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	2220      	movs	r2, #32
 800429c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	689b      	ldr	r3, [r3, #8]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d10a      	bne.n	80042bc <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80042a6:	2300      	movs	r3, #0
 80042a8:	613b      	str	r3, [r7, #16]
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	68db      	ldr	r3, [r3, #12]
 80042b0:	613b      	str	r3, [r7, #16]
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	689b      	ldr	r3, [r3, #8]
 80042b8:	613b      	str	r3, [r7, #16]
 80042ba:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d002      	beq.n	80042ca <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80042c4:	2301      	movs	r3, #1
 80042c6:	77fb      	strb	r3, [r7, #31]
 80042c8:	e000      	b.n	80042cc <HAL_SPI_Transmit+0x25e>
  }

error:
 80042ca:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	2201      	movs	r2, #1
 80042d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	2200      	movs	r2, #0
 80042d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80042dc:	7ffb      	ldrb	r3, [r7, #31]
}
 80042de:	4618      	mov	r0, r3
 80042e0:	3720      	adds	r7, #32
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bd80      	pop	{r7, pc}

080042e6 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042e6:	b580      	push	{r7, lr}
 80042e8:	b088      	sub	sp, #32
 80042ea:	af02      	add	r7, sp, #8
 80042ec:	60f8      	str	r0, [r7, #12]
 80042ee:	60b9      	str	r1, [r7, #8]
 80042f0:	603b      	str	r3, [r7, #0]
 80042f2:	4613      	mov	r3, r2
 80042f4:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80042f6:	2300      	movs	r3, #0
 80042f8:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004302:	d112      	bne.n	800432a <HAL_SPI_Receive+0x44>
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	689b      	ldr	r3, [r3, #8]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d10e      	bne.n	800432a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	2204      	movs	r2, #4
 8004310:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004314:	88fa      	ldrh	r2, [r7, #6]
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	9300      	str	r3, [sp, #0]
 800431a:	4613      	mov	r3, r2
 800431c:	68ba      	ldr	r2, [r7, #8]
 800431e:	68b9      	ldr	r1, [r7, #8]
 8004320:	68f8      	ldr	r0, [r7, #12]
 8004322:	f000 f8f1 	bl	8004508 <HAL_SPI_TransmitReceive>
 8004326:	4603      	mov	r3, r0
 8004328:	e0ea      	b.n	8004500 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004330:	2b01      	cmp	r3, #1
 8004332:	d101      	bne.n	8004338 <HAL_SPI_Receive+0x52>
 8004334:	2302      	movs	r3, #2
 8004336:	e0e3      	b.n	8004500 <HAL_SPI_Receive+0x21a>
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	2201      	movs	r2, #1
 800433c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004340:	f7fe ff00 	bl	8003144 <HAL_GetTick>
 8004344:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800434c:	b2db      	uxtb	r3, r3
 800434e:	2b01      	cmp	r3, #1
 8004350:	d002      	beq.n	8004358 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004352:	2302      	movs	r3, #2
 8004354:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004356:	e0ca      	b.n	80044ee <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d002      	beq.n	8004364 <HAL_SPI_Receive+0x7e>
 800435e:	88fb      	ldrh	r3, [r7, #6]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d102      	bne.n	800436a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004364:	2301      	movs	r3, #1
 8004366:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004368:	e0c1      	b.n	80044ee <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	2204      	movs	r2, #4
 800436e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	2200      	movs	r2, #0
 8004376:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	68ba      	ldr	r2, [r7, #8]
 800437c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	88fa      	ldrh	r2, [r7, #6]
 8004382:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	88fa      	ldrh	r2, [r7, #6]
 8004388:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	2200      	movs	r2, #0
 800438e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	2200      	movs	r2, #0
 8004394:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	2200      	movs	r2, #0
 800439a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	2200      	movs	r2, #0
 80043a0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	2200      	movs	r2, #0
 80043a6:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	689b      	ldr	r3, [r3, #8]
 80043ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043b0:	d10f      	bne.n	80043d2 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	681a      	ldr	r2, [r3, #0]
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80043c0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	681a      	ldr	r2, [r3, #0]
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80043d0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043dc:	2b40      	cmp	r3, #64	; 0x40
 80043de:	d007      	beq.n	80043f0 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	681a      	ldr	r2, [r3, #0]
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80043ee:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	68db      	ldr	r3, [r3, #12]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d162      	bne.n	80044be <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80043f8:	e02e      	b.n	8004458 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	689b      	ldr	r3, [r3, #8]
 8004400:	f003 0301 	and.w	r3, r3, #1
 8004404:	2b01      	cmp	r3, #1
 8004406:	d115      	bne.n	8004434 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f103 020c 	add.w	r2, r3, #12
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004414:	7812      	ldrb	r2, [r2, #0]
 8004416:	b2d2      	uxtb	r2, r2
 8004418:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800441e:	1c5a      	adds	r2, r3, #1
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004428:	b29b      	uxth	r3, r3
 800442a:	3b01      	subs	r3, #1
 800442c:	b29a      	uxth	r2, r3
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004432:	e011      	b.n	8004458 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004434:	f7fe fe86 	bl	8003144 <HAL_GetTick>
 8004438:	4602      	mov	r2, r0
 800443a:	693b      	ldr	r3, [r7, #16]
 800443c:	1ad3      	subs	r3, r2, r3
 800443e:	683a      	ldr	r2, [r7, #0]
 8004440:	429a      	cmp	r2, r3
 8004442:	d803      	bhi.n	800444c <HAL_SPI_Receive+0x166>
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	f1b3 3fff 	cmp.w	r3, #4294967295
 800444a:	d102      	bne.n	8004452 <HAL_SPI_Receive+0x16c>
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d102      	bne.n	8004458 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8004452:	2303      	movs	r3, #3
 8004454:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004456:	e04a      	b.n	80044ee <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800445c:	b29b      	uxth	r3, r3
 800445e:	2b00      	cmp	r3, #0
 8004460:	d1cb      	bne.n	80043fa <HAL_SPI_Receive+0x114>
 8004462:	e031      	b.n	80044c8 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	689b      	ldr	r3, [r3, #8]
 800446a:	f003 0301 	and.w	r3, r3, #1
 800446e:	2b01      	cmp	r3, #1
 8004470:	d113      	bne.n	800449a <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	68da      	ldr	r2, [r3, #12]
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800447c:	b292      	uxth	r2, r2
 800447e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004484:	1c9a      	adds	r2, r3, #2
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800448e:	b29b      	uxth	r3, r3
 8004490:	3b01      	subs	r3, #1
 8004492:	b29a      	uxth	r2, r3
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004498:	e011      	b.n	80044be <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800449a:	f7fe fe53 	bl	8003144 <HAL_GetTick>
 800449e:	4602      	mov	r2, r0
 80044a0:	693b      	ldr	r3, [r7, #16]
 80044a2:	1ad3      	subs	r3, r2, r3
 80044a4:	683a      	ldr	r2, [r7, #0]
 80044a6:	429a      	cmp	r2, r3
 80044a8:	d803      	bhi.n	80044b2 <HAL_SPI_Receive+0x1cc>
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044b0:	d102      	bne.n	80044b8 <HAL_SPI_Receive+0x1d2>
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d102      	bne.n	80044be <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80044b8:	2303      	movs	r3, #3
 80044ba:	75fb      	strb	r3, [r7, #23]
          goto error;
 80044bc:	e017      	b.n	80044ee <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044c2:	b29b      	uxth	r3, r3
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d1cd      	bne.n	8004464 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80044c8:	693a      	ldr	r2, [r7, #16]
 80044ca:	6839      	ldr	r1, [r7, #0]
 80044cc:	68f8      	ldr	r0, [r7, #12]
 80044ce:	f000 fa45 	bl	800495c <SPI_EndRxTransaction>
 80044d2:	4603      	mov	r3, r0
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d002      	beq.n	80044de <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	2220      	movs	r2, #32
 80044dc:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d002      	beq.n	80044ec <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80044e6:	2301      	movs	r3, #1
 80044e8:	75fb      	strb	r3, [r7, #23]
 80044ea:	e000      	b.n	80044ee <HAL_SPI_Receive+0x208>
  }

error :
 80044ec:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	2201      	movs	r2, #1
 80044f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	2200      	movs	r2, #0
 80044fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80044fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8004500:	4618      	mov	r0, r3
 8004502:	3718      	adds	r7, #24
 8004504:	46bd      	mov	sp, r7
 8004506:	bd80      	pop	{r7, pc}

08004508 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b08c      	sub	sp, #48	; 0x30
 800450c:	af00      	add	r7, sp, #0
 800450e:	60f8      	str	r0, [r7, #12]
 8004510:	60b9      	str	r1, [r7, #8]
 8004512:	607a      	str	r2, [r7, #4]
 8004514:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004516:	2301      	movs	r3, #1
 8004518:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800451a:	2300      	movs	r3, #0
 800451c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004526:	2b01      	cmp	r3, #1
 8004528:	d101      	bne.n	800452e <HAL_SPI_TransmitReceive+0x26>
 800452a:	2302      	movs	r3, #2
 800452c:	e18a      	b.n	8004844 <HAL_SPI_TransmitReceive+0x33c>
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	2201      	movs	r2, #1
 8004532:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004536:	f7fe fe05 	bl	8003144 <HAL_GetTick>
 800453a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004542:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	685b      	ldr	r3, [r3, #4]
 800454a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800454c:	887b      	ldrh	r3, [r7, #2]
 800454e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004550:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004554:	2b01      	cmp	r3, #1
 8004556:	d00f      	beq.n	8004578 <HAL_SPI_TransmitReceive+0x70>
 8004558:	69fb      	ldr	r3, [r7, #28]
 800455a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800455e:	d107      	bne.n	8004570 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	689b      	ldr	r3, [r3, #8]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d103      	bne.n	8004570 <HAL_SPI_TransmitReceive+0x68>
 8004568:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800456c:	2b04      	cmp	r3, #4
 800456e:	d003      	beq.n	8004578 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004570:	2302      	movs	r3, #2
 8004572:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004576:	e15b      	b.n	8004830 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d005      	beq.n	800458a <HAL_SPI_TransmitReceive+0x82>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d002      	beq.n	800458a <HAL_SPI_TransmitReceive+0x82>
 8004584:	887b      	ldrh	r3, [r7, #2]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d103      	bne.n	8004592 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800458a:	2301      	movs	r3, #1
 800458c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004590:	e14e      	b.n	8004830 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004598:	b2db      	uxtb	r3, r3
 800459a:	2b04      	cmp	r3, #4
 800459c:	d003      	beq.n	80045a6 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	2205      	movs	r2, #5
 80045a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	2200      	movs	r2, #0
 80045aa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	687a      	ldr	r2, [r7, #4]
 80045b0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	887a      	ldrh	r2, [r7, #2]
 80045b6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	887a      	ldrh	r2, [r7, #2]
 80045bc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	68ba      	ldr	r2, [r7, #8]
 80045c2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	887a      	ldrh	r2, [r7, #2]
 80045c8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	887a      	ldrh	r2, [r7, #2]
 80045ce:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	2200      	movs	r2, #0
 80045d4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	2200      	movs	r2, #0
 80045da:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045e6:	2b40      	cmp	r3, #64	; 0x40
 80045e8:	d007      	beq.n	80045fa <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	681a      	ldr	r2, [r3, #0]
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80045f8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	68db      	ldr	r3, [r3, #12]
 80045fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004602:	d178      	bne.n	80046f6 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d002      	beq.n	8004612 <HAL_SPI_TransmitReceive+0x10a>
 800460c:	8b7b      	ldrh	r3, [r7, #26]
 800460e:	2b01      	cmp	r3, #1
 8004610:	d166      	bne.n	80046e0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004616:	881a      	ldrh	r2, [r3, #0]
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004622:	1c9a      	adds	r2, r3, #2
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800462c:	b29b      	uxth	r3, r3
 800462e:	3b01      	subs	r3, #1
 8004630:	b29a      	uxth	r2, r3
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004636:	e053      	b.n	80046e0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	689b      	ldr	r3, [r3, #8]
 800463e:	f003 0302 	and.w	r3, r3, #2
 8004642:	2b02      	cmp	r3, #2
 8004644:	d11b      	bne.n	800467e <HAL_SPI_TransmitReceive+0x176>
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800464a:	b29b      	uxth	r3, r3
 800464c:	2b00      	cmp	r3, #0
 800464e:	d016      	beq.n	800467e <HAL_SPI_TransmitReceive+0x176>
 8004650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004652:	2b01      	cmp	r3, #1
 8004654:	d113      	bne.n	800467e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800465a:	881a      	ldrh	r2, [r3, #0]
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004666:	1c9a      	adds	r2, r3, #2
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004670:	b29b      	uxth	r3, r3
 8004672:	3b01      	subs	r3, #1
 8004674:	b29a      	uxth	r2, r3
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800467a:	2300      	movs	r3, #0
 800467c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	689b      	ldr	r3, [r3, #8]
 8004684:	f003 0301 	and.w	r3, r3, #1
 8004688:	2b01      	cmp	r3, #1
 800468a:	d119      	bne.n	80046c0 <HAL_SPI_TransmitReceive+0x1b8>
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004690:	b29b      	uxth	r3, r3
 8004692:	2b00      	cmp	r3, #0
 8004694:	d014      	beq.n	80046c0 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	68da      	ldr	r2, [r3, #12]
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046a0:	b292      	uxth	r2, r2
 80046a2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046a8:	1c9a      	adds	r2, r3, #2
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046b2:	b29b      	uxth	r3, r3
 80046b4:	3b01      	subs	r3, #1
 80046b6:	b29a      	uxth	r2, r3
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80046bc:	2301      	movs	r3, #1
 80046be:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80046c0:	f7fe fd40 	bl	8003144 <HAL_GetTick>
 80046c4:	4602      	mov	r2, r0
 80046c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046c8:	1ad3      	subs	r3, r2, r3
 80046ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80046cc:	429a      	cmp	r2, r3
 80046ce:	d807      	bhi.n	80046e0 <HAL_SPI_TransmitReceive+0x1d8>
 80046d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046d6:	d003      	beq.n	80046e0 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80046d8:	2303      	movs	r3, #3
 80046da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80046de:	e0a7      	b.n	8004830 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80046e4:	b29b      	uxth	r3, r3
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d1a6      	bne.n	8004638 <HAL_SPI_TransmitReceive+0x130>
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046ee:	b29b      	uxth	r3, r3
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d1a1      	bne.n	8004638 <HAL_SPI_TransmitReceive+0x130>
 80046f4:	e07c      	b.n	80047f0 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d002      	beq.n	8004704 <HAL_SPI_TransmitReceive+0x1fc>
 80046fe:	8b7b      	ldrh	r3, [r7, #26]
 8004700:	2b01      	cmp	r3, #1
 8004702:	d16b      	bne.n	80047dc <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	330c      	adds	r3, #12
 800470e:	7812      	ldrb	r2, [r2, #0]
 8004710:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004716:	1c5a      	adds	r2, r3, #1
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004720:	b29b      	uxth	r3, r3
 8004722:	3b01      	subs	r3, #1
 8004724:	b29a      	uxth	r2, r3
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800472a:	e057      	b.n	80047dc <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	689b      	ldr	r3, [r3, #8]
 8004732:	f003 0302 	and.w	r3, r3, #2
 8004736:	2b02      	cmp	r3, #2
 8004738:	d11c      	bne.n	8004774 <HAL_SPI_TransmitReceive+0x26c>
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800473e:	b29b      	uxth	r3, r3
 8004740:	2b00      	cmp	r3, #0
 8004742:	d017      	beq.n	8004774 <HAL_SPI_TransmitReceive+0x26c>
 8004744:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004746:	2b01      	cmp	r3, #1
 8004748:	d114      	bne.n	8004774 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	330c      	adds	r3, #12
 8004754:	7812      	ldrb	r2, [r2, #0]
 8004756:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800475c:	1c5a      	adds	r2, r3, #1
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004766:	b29b      	uxth	r3, r3
 8004768:	3b01      	subs	r3, #1
 800476a:	b29a      	uxth	r2, r3
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004770:	2300      	movs	r3, #0
 8004772:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	689b      	ldr	r3, [r3, #8]
 800477a:	f003 0301 	and.w	r3, r3, #1
 800477e:	2b01      	cmp	r3, #1
 8004780:	d119      	bne.n	80047b6 <HAL_SPI_TransmitReceive+0x2ae>
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004786:	b29b      	uxth	r3, r3
 8004788:	2b00      	cmp	r3, #0
 800478a:	d014      	beq.n	80047b6 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	68da      	ldr	r2, [r3, #12]
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004796:	b2d2      	uxtb	r2, r2
 8004798:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800479e:	1c5a      	adds	r2, r3, #1
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047a8:	b29b      	uxth	r3, r3
 80047aa:	3b01      	subs	r3, #1
 80047ac:	b29a      	uxth	r2, r3
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80047b2:	2301      	movs	r3, #1
 80047b4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80047b6:	f7fe fcc5 	bl	8003144 <HAL_GetTick>
 80047ba:	4602      	mov	r2, r0
 80047bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047be:	1ad3      	subs	r3, r2, r3
 80047c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80047c2:	429a      	cmp	r2, r3
 80047c4:	d803      	bhi.n	80047ce <HAL_SPI_TransmitReceive+0x2c6>
 80047c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047cc:	d102      	bne.n	80047d4 <HAL_SPI_TransmitReceive+0x2cc>
 80047ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d103      	bne.n	80047dc <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80047d4:	2303      	movs	r3, #3
 80047d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80047da:	e029      	b.n	8004830 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80047e0:	b29b      	uxth	r3, r3
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d1a2      	bne.n	800472c <HAL_SPI_TransmitReceive+0x224>
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047ea:	b29b      	uxth	r3, r3
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d19d      	bne.n	800472c <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80047f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047f2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80047f4:	68f8      	ldr	r0, [r7, #12]
 80047f6:	f000 f917 	bl	8004a28 <SPI_EndRxTxTransaction>
 80047fa:	4603      	mov	r3, r0
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d006      	beq.n	800480e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004800:	2301      	movs	r3, #1
 8004802:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	2220      	movs	r2, #32
 800480a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800480c:	e010      	b.n	8004830 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	689b      	ldr	r3, [r3, #8]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d10b      	bne.n	800482e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004816:	2300      	movs	r3, #0
 8004818:	617b      	str	r3, [r7, #20]
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	68db      	ldr	r3, [r3, #12]
 8004820:	617b      	str	r3, [r7, #20]
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	689b      	ldr	r3, [r3, #8]
 8004828:	617b      	str	r3, [r7, #20]
 800482a:	697b      	ldr	r3, [r7, #20]
 800482c:	e000      	b.n	8004830 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800482e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	2201      	movs	r2, #1
 8004834:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	2200      	movs	r2, #0
 800483c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004840:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004844:	4618      	mov	r0, r3
 8004846:	3730      	adds	r7, #48	; 0x30
 8004848:	46bd      	mov	sp, r7
 800484a:	bd80      	pop	{r7, pc}

0800484c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b088      	sub	sp, #32
 8004850:	af00      	add	r7, sp, #0
 8004852:	60f8      	str	r0, [r7, #12]
 8004854:	60b9      	str	r1, [r7, #8]
 8004856:	603b      	str	r3, [r7, #0]
 8004858:	4613      	mov	r3, r2
 800485a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800485c:	f7fe fc72 	bl	8003144 <HAL_GetTick>
 8004860:	4602      	mov	r2, r0
 8004862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004864:	1a9b      	subs	r3, r3, r2
 8004866:	683a      	ldr	r2, [r7, #0]
 8004868:	4413      	add	r3, r2
 800486a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800486c:	f7fe fc6a 	bl	8003144 <HAL_GetTick>
 8004870:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004872:	4b39      	ldr	r3, [pc, #228]	; (8004958 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	015b      	lsls	r3, r3, #5
 8004878:	0d1b      	lsrs	r3, r3, #20
 800487a:	69fa      	ldr	r2, [r7, #28]
 800487c:	fb02 f303 	mul.w	r3, r2, r3
 8004880:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004882:	e054      	b.n	800492e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	f1b3 3fff 	cmp.w	r3, #4294967295
 800488a:	d050      	beq.n	800492e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800488c:	f7fe fc5a 	bl	8003144 <HAL_GetTick>
 8004890:	4602      	mov	r2, r0
 8004892:	69bb      	ldr	r3, [r7, #24]
 8004894:	1ad3      	subs	r3, r2, r3
 8004896:	69fa      	ldr	r2, [r7, #28]
 8004898:	429a      	cmp	r2, r3
 800489a:	d902      	bls.n	80048a2 <SPI_WaitFlagStateUntilTimeout+0x56>
 800489c:	69fb      	ldr	r3, [r7, #28]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d13d      	bne.n	800491e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	685a      	ldr	r2, [r3, #4]
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80048b0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	685b      	ldr	r3, [r3, #4]
 80048b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80048ba:	d111      	bne.n	80048e0 <SPI_WaitFlagStateUntilTimeout+0x94>
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	689b      	ldr	r3, [r3, #8]
 80048c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048c4:	d004      	beq.n	80048d0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	689b      	ldr	r3, [r3, #8]
 80048ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048ce:	d107      	bne.n	80048e0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	681a      	ldr	r2, [r3, #0]
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80048de:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048e8:	d10f      	bne.n	800490a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	681a      	ldr	r2, [r3, #0]
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80048f8:	601a      	str	r2, [r3, #0]
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	681a      	ldr	r2, [r3, #0]
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004908:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	2201      	movs	r2, #1
 800490e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	2200      	movs	r2, #0
 8004916:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800491a:	2303      	movs	r3, #3
 800491c:	e017      	b.n	800494e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800491e:	697b      	ldr	r3, [r7, #20]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d101      	bne.n	8004928 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004924:	2300      	movs	r3, #0
 8004926:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004928:	697b      	ldr	r3, [r7, #20]
 800492a:	3b01      	subs	r3, #1
 800492c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	689a      	ldr	r2, [r3, #8]
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	4013      	ands	r3, r2
 8004938:	68ba      	ldr	r2, [r7, #8]
 800493a:	429a      	cmp	r2, r3
 800493c:	bf0c      	ite	eq
 800493e:	2301      	moveq	r3, #1
 8004940:	2300      	movne	r3, #0
 8004942:	b2db      	uxtb	r3, r3
 8004944:	461a      	mov	r2, r3
 8004946:	79fb      	ldrb	r3, [r7, #7]
 8004948:	429a      	cmp	r2, r3
 800494a:	d19b      	bne.n	8004884 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800494c:	2300      	movs	r3, #0
}
 800494e:	4618      	mov	r0, r3
 8004950:	3720      	adds	r7, #32
 8004952:	46bd      	mov	sp, r7
 8004954:	bd80      	pop	{r7, pc}
 8004956:	bf00      	nop
 8004958:	20000004 	.word	0x20000004

0800495c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b086      	sub	sp, #24
 8004960:	af02      	add	r7, sp, #8
 8004962:	60f8      	str	r0, [r7, #12]
 8004964:	60b9      	str	r1, [r7, #8]
 8004966:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	685b      	ldr	r3, [r3, #4]
 800496c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004970:	d111      	bne.n	8004996 <SPI_EndRxTransaction+0x3a>
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	689b      	ldr	r3, [r3, #8]
 8004976:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800497a:	d004      	beq.n	8004986 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	689b      	ldr	r3, [r3, #8]
 8004980:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004984:	d107      	bne.n	8004996 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	681a      	ldr	r2, [r3, #0]
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004994:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	685b      	ldr	r3, [r3, #4]
 800499a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800499e:	d12a      	bne.n	80049f6 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	689b      	ldr	r3, [r3, #8]
 80049a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049a8:	d012      	beq.n	80049d0 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	9300      	str	r3, [sp, #0]
 80049ae:	68bb      	ldr	r3, [r7, #8]
 80049b0:	2200      	movs	r2, #0
 80049b2:	2180      	movs	r1, #128	; 0x80
 80049b4:	68f8      	ldr	r0, [r7, #12]
 80049b6:	f7ff ff49 	bl	800484c <SPI_WaitFlagStateUntilTimeout>
 80049ba:	4603      	mov	r3, r0
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d02d      	beq.n	8004a1c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049c4:	f043 0220 	orr.w	r2, r3, #32
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80049cc:	2303      	movs	r3, #3
 80049ce:	e026      	b.n	8004a1e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	9300      	str	r3, [sp, #0]
 80049d4:	68bb      	ldr	r3, [r7, #8]
 80049d6:	2200      	movs	r2, #0
 80049d8:	2101      	movs	r1, #1
 80049da:	68f8      	ldr	r0, [r7, #12]
 80049dc:	f7ff ff36 	bl	800484c <SPI_WaitFlagStateUntilTimeout>
 80049e0:	4603      	mov	r3, r0
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d01a      	beq.n	8004a1c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049ea:	f043 0220 	orr.w	r2, r3, #32
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80049f2:	2303      	movs	r3, #3
 80049f4:	e013      	b.n	8004a1e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	9300      	str	r3, [sp, #0]
 80049fa:	68bb      	ldr	r3, [r7, #8]
 80049fc:	2200      	movs	r2, #0
 80049fe:	2101      	movs	r1, #1
 8004a00:	68f8      	ldr	r0, [r7, #12]
 8004a02:	f7ff ff23 	bl	800484c <SPI_WaitFlagStateUntilTimeout>
 8004a06:	4603      	mov	r3, r0
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d007      	beq.n	8004a1c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a10:	f043 0220 	orr.w	r2, r3, #32
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004a18:	2303      	movs	r3, #3
 8004a1a:	e000      	b.n	8004a1e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004a1c:	2300      	movs	r3, #0
}
 8004a1e:	4618      	mov	r0, r3
 8004a20:	3710      	adds	r7, #16
 8004a22:	46bd      	mov	sp, r7
 8004a24:	bd80      	pop	{r7, pc}
	...

08004a28 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b088      	sub	sp, #32
 8004a2c:	af02      	add	r7, sp, #8
 8004a2e:	60f8      	str	r0, [r7, #12]
 8004a30:	60b9      	str	r1, [r7, #8]
 8004a32:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004a34:	4b1b      	ldr	r3, [pc, #108]	; (8004aa4 <SPI_EndRxTxTransaction+0x7c>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4a1b      	ldr	r2, [pc, #108]	; (8004aa8 <SPI_EndRxTxTransaction+0x80>)
 8004a3a:	fba2 2303 	umull	r2, r3, r2, r3
 8004a3e:	0d5b      	lsrs	r3, r3, #21
 8004a40:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004a44:	fb02 f303 	mul.w	r3, r2, r3
 8004a48:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	685b      	ldr	r3, [r3, #4]
 8004a4e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a52:	d112      	bne.n	8004a7a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	9300      	str	r3, [sp, #0]
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	2180      	movs	r1, #128	; 0x80
 8004a5e:	68f8      	ldr	r0, [r7, #12]
 8004a60:	f7ff fef4 	bl	800484c <SPI_WaitFlagStateUntilTimeout>
 8004a64:	4603      	mov	r3, r0
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d016      	beq.n	8004a98 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a6e:	f043 0220 	orr.w	r2, r3, #32
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004a76:	2303      	movs	r3, #3
 8004a78:	e00f      	b.n	8004a9a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004a7a:	697b      	ldr	r3, [r7, #20]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d00a      	beq.n	8004a96 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004a80:	697b      	ldr	r3, [r7, #20]
 8004a82:	3b01      	subs	r3, #1
 8004a84:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	689b      	ldr	r3, [r3, #8]
 8004a8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a90:	2b80      	cmp	r3, #128	; 0x80
 8004a92:	d0f2      	beq.n	8004a7a <SPI_EndRxTxTransaction+0x52>
 8004a94:	e000      	b.n	8004a98 <SPI_EndRxTxTransaction+0x70>
        break;
 8004a96:	bf00      	nop
  }

  return HAL_OK;
 8004a98:	2300      	movs	r3, #0
}
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	3718      	adds	r7, #24
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	bd80      	pop	{r7, pc}
 8004aa2:	bf00      	nop
 8004aa4:	20000004 	.word	0x20000004
 8004aa8:	165e9f81 	.word	0x165e9f81

08004aac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b082      	sub	sp, #8
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d101      	bne.n	8004abe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004aba:	2301      	movs	r3, #1
 8004abc:	e03f      	b.n	8004b3e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ac4:	b2db      	uxtb	r3, r3
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d106      	bne.n	8004ad8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2200      	movs	r2, #0
 8004ace:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004ad2:	6878      	ldr	r0, [r7, #4]
 8004ad4:	f7fe fa2a 	bl	8002f2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2224      	movs	r2, #36	; 0x24
 8004adc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	68da      	ldr	r2, [r3, #12]
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004aee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004af0:	6878      	ldr	r0, [r7, #4]
 8004af2:	f000 f929 	bl	8004d48 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	691a      	ldr	r2, [r3, #16]
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004b04:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	695a      	ldr	r2, [r3, #20]
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004b14:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	68da      	ldr	r2, [r3, #12]
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004b24:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2220      	movs	r2, #32
 8004b30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2220      	movs	r2, #32
 8004b38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004b3c:	2300      	movs	r3, #0
}
 8004b3e:	4618      	mov	r0, r3
 8004b40:	3708      	adds	r7, #8
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bd80      	pop	{r7, pc}

08004b46 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b46:	b580      	push	{r7, lr}
 8004b48:	b08a      	sub	sp, #40	; 0x28
 8004b4a:	af02      	add	r7, sp, #8
 8004b4c:	60f8      	str	r0, [r7, #12]
 8004b4e:	60b9      	str	r1, [r7, #8]
 8004b50:	603b      	str	r3, [r7, #0]
 8004b52:	4613      	mov	r3, r2
 8004b54:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004b56:	2300      	movs	r3, #0
 8004b58:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b60:	b2db      	uxtb	r3, r3
 8004b62:	2b20      	cmp	r3, #32
 8004b64:	d17c      	bne.n	8004c60 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b66:	68bb      	ldr	r3, [r7, #8]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d002      	beq.n	8004b72 <HAL_UART_Transmit+0x2c>
 8004b6c:	88fb      	ldrh	r3, [r7, #6]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d101      	bne.n	8004b76 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004b72:	2301      	movs	r3, #1
 8004b74:	e075      	b.n	8004c62 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b7c:	2b01      	cmp	r3, #1
 8004b7e:	d101      	bne.n	8004b84 <HAL_UART_Transmit+0x3e>
 8004b80:	2302      	movs	r3, #2
 8004b82:	e06e      	b.n	8004c62 <HAL_UART_Transmit+0x11c>
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	2201      	movs	r2, #1
 8004b88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	2200      	movs	r2, #0
 8004b90:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	2221      	movs	r2, #33	; 0x21
 8004b96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004b9a:	f7fe fad3 	bl	8003144 <HAL_GetTick>
 8004b9e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	88fa      	ldrh	r2, [r7, #6]
 8004ba4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	88fa      	ldrh	r2, [r7, #6]
 8004baa:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	689b      	ldr	r3, [r3, #8]
 8004bb0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bb4:	d108      	bne.n	8004bc8 <HAL_UART_Transmit+0x82>
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	691b      	ldr	r3, [r3, #16]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d104      	bne.n	8004bc8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004bc2:	68bb      	ldr	r3, [r7, #8]
 8004bc4:	61bb      	str	r3, [r7, #24]
 8004bc6:	e003      	b.n	8004bd0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004bc8:	68bb      	ldr	r3, [r7, #8]
 8004bca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004bcc:	2300      	movs	r3, #0
 8004bce:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004bd8:	e02a      	b.n	8004c30 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	9300      	str	r3, [sp, #0]
 8004bde:	697b      	ldr	r3, [r7, #20]
 8004be0:	2200      	movs	r2, #0
 8004be2:	2180      	movs	r1, #128	; 0x80
 8004be4:	68f8      	ldr	r0, [r7, #12]
 8004be6:	f000 f840 	bl	8004c6a <UART_WaitOnFlagUntilTimeout>
 8004bea:	4603      	mov	r3, r0
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d001      	beq.n	8004bf4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004bf0:	2303      	movs	r3, #3
 8004bf2:	e036      	b.n	8004c62 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004bf4:	69fb      	ldr	r3, [r7, #28]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d10b      	bne.n	8004c12 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004bfa:	69bb      	ldr	r3, [r7, #24]
 8004bfc:	881b      	ldrh	r3, [r3, #0]
 8004bfe:	461a      	mov	r2, r3
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c08:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004c0a:	69bb      	ldr	r3, [r7, #24]
 8004c0c:	3302      	adds	r3, #2
 8004c0e:	61bb      	str	r3, [r7, #24]
 8004c10:	e007      	b.n	8004c22 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004c12:	69fb      	ldr	r3, [r7, #28]
 8004c14:	781a      	ldrb	r2, [r3, #0]
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004c1c:	69fb      	ldr	r3, [r7, #28]
 8004c1e:	3301      	adds	r3, #1
 8004c20:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004c26:	b29b      	uxth	r3, r3
 8004c28:	3b01      	subs	r3, #1
 8004c2a:	b29a      	uxth	r2, r3
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004c34:	b29b      	uxth	r3, r3
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d1cf      	bne.n	8004bda <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	9300      	str	r3, [sp, #0]
 8004c3e:	697b      	ldr	r3, [r7, #20]
 8004c40:	2200      	movs	r2, #0
 8004c42:	2140      	movs	r1, #64	; 0x40
 8004c44:	68f8      	ldr	r0, [r7, #12]
 8004c46:	f000 f810 	bl	8004c6a <UART_WaitOnFlagUntilTimeout>
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d001      	beq.n	8004c54 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004c50:	2303      	movs	r3, #3
 8004c52:	e006      	b.n	8004c62 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	2220      	movs	r2, #32
 8004c58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	e000      	b.n	8004c62 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004c60:	2302      	movs	r3, #2
  }
}
 8004c62:	4618      	mov	r0, r3
 8004c64:	3720      	adds	r7, #32
 8004c66:	46bd      	mov	sp, r7
 8004c68:	bd80      	pop	{r7, pc}

08004c6a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004c6a:	b580      	push	{r7, lr}
 8004c6c:	b090      	sub	sp, #64	; 0x40
 8004c6e:	af00      	add	r7, sp, #0
 8004c70:	60f8      	str	r0, [r7, #12]
 8004c72:	60b9      	str	r1, [r7, #8]
 8004c74:	603b      	str	r3, [r7, #0]
 8004c76:	4613      	mov	r3, r2
 8004c78:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c7a:	e050      	b.n	8004d1e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c82:	d04c      	beq.n	8004d1e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004c84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d007      	beq.n	8004c9a <UART_WaitOnFlagUntilTimeout+0x30>
 8004c8a:	f7fe fa5b 	bl	8003144 <HAL_GetTick>
 8004c8e:	4602      	mov	r2, r0
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	1ad3      	subs	r3, r2, r3
 8004c94:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004c96:	429a      	cmp	r2, r3
 8004c98:	d241      	bcs.n	8004d1e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	330c      	adds	r3, #12
 8004ca0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ca4:	e853 3f00 	ldrex	r3, [r3]
 8004ca8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cac:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004cb0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	330c      	adds	r3, #12
 8004cb8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004cba:	637a      	str	r2, [r7, #52]	; 0x34
 8004cbc:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cbe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004cc0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004cc2:	e841 2300 	strex	r3, r2, [r1]
 8004cc6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004cc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d1e5      	bne.n	8004c9a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	3314      	adds	r3, #20
 8004cd4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cd6:	697b      	ldr	r3, [r7, #20]
 8004cd8:	e853 3f00 	ldrex	r3, [r3]
 8004cdc:	613b      	str	r3, [r7, #16]
   return(result);
 8004cde:	693b      	ldr	r3, [r7, #16]
 8004ce0:	f023 0301 	bic.w	r3, r3, #1
 8004ce4:	63bb      	str	r3, [r7, #56]	; 0x38
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	3314      	adds	r3, #20
 8004cec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004cee:	623a      	str	r2, [r7, #32]
 8004cf0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cf2:	69f9      	ldr	r1, [r7, #28]
 8004cf4:	6a3a      	ldr	r2, [r7, #32]
 8004cf6:	e841 2300 	strex	r3, r2, [r1]
 8004cfa:	61bb      	str	r3, [r7, #24]
   return(result);
 8004cfc:	69bb      	ldr	r3, [r7, #24]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d1e5      	bne.n	8004cce <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	2220      	movs	r2, #32
 8004d06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	2220      	movs	r2, #32
 8004d0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	2200      	movs	r2, #0
 8004d16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004d1a:	2303      	movs	r3, #3
 8004d1c:	e00f      	b.n	8004d3e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	681a      	ldr	r2, [r3, #0]
 8004d24:	68bb      	ldr	r3, [r7, #8]
 8004d26:	4013      	ands	r3, r2
 8004d28:	68ba      	ldr	r2, [r7, #8]
 8004d2a:	429a      	cmp	r2, r3
 8004d2c:	bf0c      	ite	eq
 8004d2e:	2301      	moveq	r3, #1
 8004d30:	2300      	movne	r3, #0
 8004d32:	b2db      	uxtb	r3, r3
 8004d34:	461a      	mov	r2, r3
 8004d36:	79fb      	ldrb	r3, [r7, #7]
 8004d38:	429a      	cmp	r2, r3
 8004d3a:	d09f      	beq.n	8004c7c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004d3c:	2300      	movs	r3, #0
}
 8004d3e:	4618      	mov	r0, r3
 8004d40:	3740      	adds	r7, #64	; 0x40
 8004d42:	46bd      	mov	sp, r7
 8004d44:	bd80      	pop	{r7, pc}
	...

08004d48 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004d48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d4c:	b0c0      	sub	sp, #256	; 0x100
 8004d4e:	af00      	add	r7, sp, #0
 8004d50:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	691b      	ldr	r3, [r3, #16]
 8004d5c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004d60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d64:	68d9      	ldr	r1, [r3, #12]
 8004d66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d6a:	681a      	ldr	r2, [r3, #0]
 8004d6c:	ea40 0301 	orr.w	r3, r0, r1
 8004d70:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004d72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d76:	689a      	ldr	r2, [r3, #8]
 8004d78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d7c:	691b      	ldr	r3, [r3, #16]
 8004d7e:	431a      	orrs	r2, r3
 8004d80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d84:	695b      	ldr	r3, [r3, #20]
 8004d86:	431a      	orrs	r2, r3
 8004d88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d8c:	69db      	ldr	r3, [r3, #28]
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004d94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	68db      	ldr	r3, [r3, #12]
 8004d9c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004da0:	f021 010c 	bic.w	r1, r1, #12
 8004da4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004da8:	681a      	ldr	r2, [r3, #0]
 8004daa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004dae:	430b      	orrs	r3, r1
 8004db0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004db2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	695b      	ldr	r3, [r3, #20]
 8004dba:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004dbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dc2:	6999      	ldr	r1, [r3, #24]
 8004dc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dc8:	681a      	ldr	r2, [r3, #0]
 8004dca:	ea40 0301 	orr.w	r3, r0, r1
 8004dce:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004dd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dd4:	681a      	ldr	r2, [r3, #0]
 8004dd6:	4b8f      	ldr	r3, [pc, #572]	; (8005014 <UART_SetConfig+0x2cc>)
 8004dd8:	429a      	cmp	r2, r3
 8004dda:	d005      	beq.n	8004de8 <UART_SetConfig+0xa0>
 8004ddc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004de0:	681a      	ldr	r2, [r3, #0]
 8004de2:	4b8d      	ldr	r3, [pc, #564]	; (8005018 <UART_SetConfig+0x2d0>)
 8004de4:	429a      	cmp	r2, r3
 8004de6:	d104      	bne.n	8004df2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004de8:	f7ff f8a4 	bl	8003f34 <HAL_RCC_GetPCLK2Freq>
 8004dec:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004df0:	e003      	b.n	8004dfa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004df2:	f7ff f88b 	bl	8003f0c <HAL_RCC_GetPCLK1Freq>
 8004df6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004dfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dfe:	69db      	ldr	r3, [r3, #28]
 8004e00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e04:	f040 810c 	bne.w	8005020 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004e08:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004e12:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004e16:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004e1a:	4622      	mov	r2, r4
 8004e1c:	462b      	mov	r3, r5
 8004e1e:	1891      	adds	r1, r2, r2
 8004e20:	65b9      	str	r1, [r7, #88]	; 0x58
 8004e22:	415b      	adcs	r3, r3
 8004e24:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004e26:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004e2a:	4621      	mov	r1, r4
 8004e2c:	eb12 0801 	adds.w	r8, r2, r1
 8004e30:	4629      	mov	r1, r5
 8004e32:	eb43 0901 	adc.w	r9, r3, r1
 8004e36:	f04f 0200 	mov.w	r2, #0
 8004e3a:	f04f 0300 	mov.w	r3, #0
 8004e3e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004e42:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004e46:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004e4a:	4690      	mov	r8, r2
 8004e4c:	4699      	mov	r9, r3
 8004e4e:	4623      	mov	r3, r4
 8004e50:	eb18 0303 	adds.w	r3, r8, r3
 8004e54:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004e58:	462b      	mov	r3, r5
 8004e5a:	eb49 0303 	adc.w	r3, r9, r3
 8004e5e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004e62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e66:	685b      	ldr	r3, [r3, #4]
 8004e68:	2200      	movs	r2, #0
 8004e6a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004e6e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004e72:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004e76:	460b      	mov	r3, r1
 8004e78:	18db      	adds	r3, r3, r3
 8004e7a:	653b      	str	r3, [r7, #80]	; 0x50
 8004e7c:	4613      	mov	r3, r2
 8004e7e:	eb42 0303 	adc.w	r3, r2, r3
 8004e82:	657b      	str	r3, [r7, #84]	; 0x54
 8004e84:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004e88:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004e8c:	f7fb fee4 	bl	8000c58 <__aeabi_uldivmod>
 8004e90:	4602      	mov	r2, r0
 8004e92:	460b      	mov	r3, r1
 8004e94:	4b61      	ldr	r3, [pc, #388]	; (800501c <UART_SetConfig+0x2d4>)
 8004e96:	fba3 2302 	umull	r2, r3, r3, r2
 8004e9a:	095b      	lsrs	r3, r3, #5
 8004e9c:	011c      	lsls	r4, r3, #4
 8004e9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004ea8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004eac:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004eb0:	4642      	mov	r2, r8
 8004eb2:	464b      	mov	r3, r9
 8004eb4:	1891      	adds	r1, r2, r2
 8004eb6:	64b9      	str	r1, [r7, #72]	; 0x48
 8004eb8:	415b      	adcs	r3, r3
 8004eba:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ebc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004ec0:	4641      	mov	r1, r8
 8004ec2:	eb12 0a01 	adds.w	sl, r2, r1
 8004ec6:	4649      	mov	r1, r9
 8004ec8:	eb43 0b01 	adc.w	fp, r3, r1
 8004ecc:	f04f 0200 	mov.w	r2, #0
 8004ed0:	f04f 0300 	mov.w	r3, #0
 8004ed4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004ed8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004edc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004ee0:	4692      	mov	sl, r2
 8004ee2:	469b      	mov	fp, r3
 8004ee4:	4643      	mov	r3, r8
 8004ee6:	eb1a 0303 	adds.w	r3, sl, r3
 8004eea:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004eee:	464b      	mov	r3, r9
 8004ef0:	eb4b 0303 	adc.w	r3, fp, r3
 8004ef4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004ef8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004efc:	685b      	ldr	r3, [r3, #4]
 8004efe:	2200      	movs	r2, #0
 8004f00:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004f04:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004f08:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004f0c:	460b      	mov	r3, r1
 8004f0e:	18db      	adds	r3, r3, r3
 8004f10:	643b      	str	r3, [r7, #64]	; 0x40
 8004f12:	4613      	mov	r3, r2
 8004f14:	eb42 0303 	adc.w	r3, r2, r3
 8004f18:	647b      	str	r3, [r7, #68]	; 0x44
 8004f1a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004f1e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004f22:	f7fb fe99 	bl	8000c58 <__aeabi_uldivmod>
 8004f26:	4602      	mov	r2, r0
 8004f28:	460b      	mov	r3, r1
 8004f2a:	4611      	mov	r1, r2
 8004f2c:	4b3b      	ldr	r3, [pc, #236]	; (800501c <UART_SetConfig+0x2d4>)
 8004f2e:	fba3 2301 	umull	r2, r3, r3, r1
 8004f32:	095b      	lsrs	r3, r3, #5
 8004f34:	2264      	movs	r2, #100	; 0x64
 8004f36:	fb02 f303 	mul.w	r3, r2, r3
 8004f3a:	1acb      	subs	r3, r1, r3
 8004f3c:	00db      	lsls	r3, r3, #3
 8004f3e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004f42:	4b36      	ldr	r3, [pc, #216]	; (800501c <UART_SetConfig+0x2d4>)
 8004f44:	fba3 2302 	umull	r2, r3, r3, r2
 8004f48:	095b      	lsrs	r3, r3, #5
 8004f4a:	005b      	lsls	r3, r3, #1
 8004f4c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004f50:	441c      	add	r4, r3
 8004f52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f56:	2200      	movs	r2, #0
 8004f58:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004f5c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004f60:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004f64:	4642      	mov	r2, r8
 8004f66:	464b      	mov	r3, r9
 8004f68:	1891      	adds	r1, r2, r2
 8004f6a:	63b9      	str	r1, [r7, #56]	; 0x38
 8004f6c:	415b      	adcs	r3, r3
 8004f6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f70:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004f74:	4641      	mov	r1, r8
 8004f76:	1851      	adds	r1, r2, r1
 8004f78:	6339      	str	r1, [r7, #48]	; 0x30
 8004f7a:	4649      	mov	r1, r9
 8004f7c:	414b      	adcs	r3, r1
 8004f7e:	637b      	str	r3, [r7, #52]	; 0x34
 8004f80:	f04f 0200 	mov.w	r2, #0
 8004f84:	f04f 0300 	mov.w	r3, #0
 8004f88:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004f8c:	4659      	mov	r1, fp
 8004f8e:	00cb      	lsls	r3, r1, #3
 8004f90:	4651      	mov	r1, sl
 8004f92:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f96:	4651      	mov	r1, sl
 8004f98:	00ca      	lsls	r2, r1, #3
 8004f9a:	4610      	mov	r0, r2
 8004f9c:	4619      	mov	r1, r3
 8004f9e:	4603      	mov	r3, r0
 8004fa0:	4642      	mov	r2, r8
 8004fa2:	189b      	adds	r3, r3, r2
 8004fa4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004fa8:	464b      	mov	r3, r9
 8004faa:	460a      	mov	r2, r1
 8004fac:	eb42 0303 	adc.w	r3, r2, r3
 8004fb0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004fb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fb8:	685b      	ldr	r3, [r3, #4]
 8004fba:	2200      	movs	r2, #0
 8004fbc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004fc0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004fc4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004fc8:	460b      	mov	r3, r1
 8004fca:	18db      	adds	r3, r3, r3
 8004fcc:	62bb      	str	r3, [r7, #40]	; 0x28
 8004fce:	4613      	mov	r3, r2
 8004fd0:	eb42 0303 	adc.w	r3, r2, r3
 8004fd4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004fd6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004fda:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004fde:	f7fb fe3b 	bl	8000c58 <__aeabi_uldivmod>
 8004fe2:	4602      	mov	r2, r0
 8004fe4:	460b      	mov	r3, r1
 8004fe6:	4b0d      	ldr	r3, [pc, #52]	; (800501c <UART_SetConfig+0x2d4>)
 8004fe8:	fba3 1302 	umull	r1, r3, r3, r2
 8004fec:	095b      	lsrs	r3, r3, #5
 8004fee:	2164      	movs	r1, #100	; 0x64
 8004ff0:	fb01 f303 	mul.w	r3, r1, r3
 8004ff4:	1ad3      	subs	r3, r2, r3
 8004ff6:	00db      	lsls	r3, r3, #3
 8004ff8:	3332      	adds	r3, #50	; 0x32
 8004ffa:	4a08      	ldr	r2, [pc, #32]	; (800501c <UART_SetConfig+0x2d4>)
 8004ffc:	fba2 2303 	umull	r2, r3, r2, r3
 8005000:	095b      	lsrs	r3, r3, #5
 8005002:	f003 0207 	and.w	r2, r3, #7
 8005006:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	4422      	add	r2, r4
 800500e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005010:	e105      	b.n	800521e <UART_SetConfig+0x4d6>
 8005012:	bf00      	nop
 8005014:	40011000 	.word	0x40011000
 8005018:	40011400 	.word	0x40011400
 800501c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005020:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005024:	2200      	movs	r2, #0
 8005026:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800502a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800502e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005032:	4642      	mov	r2, r8
 8005034:	464b      	mov	r3, r9
 8005036:	1891      	adds	r1, r2, r2
 8005038:	6239      	str	r1, [r7, #32]
 800503a:	415b      	adcs	r3, r3
 800503c:	627b      	str	r3, [r7, #36]	; 0x24
 800503e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005042:	4641      	mov	r1, r8
 8005044:	1854      	adds	r4, r2, r1
 8005046:	4649      	mov	r1, r9
 8005048:	eb43 0501 	adc.w	r5, r3, r1
 800504c:	f04f 0200 	mov.w	r2, #0
 8005050:	f04f 0300 	mov.w	r3, #0
 8005054:	00eb      	lsls	r3, r5, #3
 8005056:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800505a:	00e2      	lsls	r2, r4, #3
 800505c:	4614      	mov	r4, r2
 800505e:	461d      	mov	r5, r3
 8005060:	4643      	mov	r3, r8
 8005062:	18e3      	adds	r3, r4, r3
 8005064:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005068:	464b      	mov	r3, r9
 800506a:	eb45 0303 	adc.w	r3, r5, r3
 800506e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005072:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005076:	685b      	ldr	r3, [r3, #4]
 8005078:	2200      	movs	r2, #0
 800507a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800507e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005082:	f04f 0200 	mov.w	r2, #0
 8005086:	f04f 0300 	mov.w	r3, #0
 800508a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800508e:	4629      	mov	r1, r5
 8005090:	008b      	lsls	r3, r1, #2
 8005092:	4621      	mov	r1, r4
 8005094:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005098:	4621      	mov	r1, r4
 800509a:	008a      	lsls	r2, r1, #2
 800509c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80050a0:	f7fb fdda 	bl	8000c58 <__aeabi_uldivmod>
 80050a4:	4602      	mov	r2, r0
 80050a6:	460b      	mov	r3, r1
 80050a8:	4b60      	ldr	r3, [pc, #384]	; (800522c <UART_SetConfig+0x4e4>)
 80050aa:	fba3 2302 	umull	r2, r3, r3, r2
 80050ae:	095b      	lsrs	r3, r3, #5
 80050b0:	011c      	lsls	r4, r3, #4
 80050b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80050b6:	2200      	movs	r2, #0
 80050b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80050bc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80050c0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80050c4:	4642      	mov	r2, r8
 80050c6:	464b      	mov	r3, r9
 80050c8:	1891      	adds	r1, r2, r2
 80050ca:	61b9      	str	r1, [r7, #24]
 80050cc:	415b      	adcs	r3, r3
 80050ce:	61fb      	str	r3, [r7, #28]
 80050d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80050d4:	4641      	mov	r1, r8
 80050d6:	1851      	adds	r1, r2, r1
 80050d8:	6139      	str	r1, [r7, #16]
 80050da:	4649      	mov	r1, r9
 80050dc:	414b      	adcs	r3, r1
 80050de:	617b      	str	r3, [r7, #20]
 80050e0:	f04f 0200 	mov.w	r2, #0
 80050e4:	f04f 0300 	mov.w	r3, #0
 80050e8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80050ec:	4659      	mov	r1, fp
 80050ee:	00cb      	lsls	r3, r1, #3
 80050f0:	4651      	mov	r1, sl
 80050f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80050f6:	4651      	mov	r1, sl
 80050f8:	00ca      	lsls	r2, r1, #3
 80050fa:	4610      	mov	r0, r2
 80050fc:	4619      	mov	r1, r3
 80050fe:	4603      	mov	r3, r0
 8005100:	4642      	mov	r2, r8
 8005102:	189b      	adds	r3, r3, r2
 8005104:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005108:	464b      	mov	r3, r9
 800510a:	460a      	mov	r2, r1
 800510c:	eb42 0303 	adc.w	r3, r2, r3
 8005110:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005114:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005118:	685b      	ldr	r3, [r3, #4]
 800511a:	2200      	movs	r2, #0
 800511c:	67bb      	str	r3, [r7, #120]	; 0x78
 800511e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005120:	f04f 0200 	mov.w	r2, #0
 8005124:	f04f 0300 	mov.w	r3, #0
 8005128:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800512c:	4649      	mov	r1, r9
 800512e:	008b      	lsls	r3, r1, #2
 8005130:	4641      	mov	r1, r8
 8005132:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005136:	4641      	mov	r1, r8
 8005138:	008a      	lsls	r2, r1, #2
 800513a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800513e:	f7fb fd8b 	bl	8000c58 <__aeabi_uldivmod>
 8005142:	4602      	mov	r2, r0
 8005144:	460b      	mov	r3, r1
 8005146:	4b39      	ldr	r3, [pc, #228]	; (800522c <UART_SetConfig+0x4e4>)
 8005148:	fba3 1302 	umull	r1, r3, r3, r2
 800514c:	095b      	lsrs	r3, r3, #5
 800514e:	2164      	movs	r1, #100	; 0x64
 8005150:	fb01 f303 	mul.w	r3, r1, r3
 8005154:	1ad3      	subs	r3, r2, r3
 8005156:	011b      	lsls	r3, r3, #4
 8005158:	3332      	adds	r3, #50	; 0x32
 800515a:	4a34      	ldr	r2, [pc, #208]	; (800522c <UART_SetConfig+0x4e4>)
 800515c:	fba2 2303 	umull	r2, r3, r2, r3
 8005160:	095b      	lsrs	r3, r3, #5
 8005162:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005166:	441c      	add	r4, r3
 8005168:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800516c:	2200      	movs	r2, #0
 800516e:	673b      	str	r3, [r7, #112]	; 0x70
 8005170:	677a      	str	r2, [r7, #116]	; 0x74
 8005172:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005176:	4642      	mov	r2, r8
 8005178:	464b      	mov	r3, r9
 800517a:	1891      	adds	r1, r2, r2
 800517c:	60b9      	str	r1, [r7, #8]
 800517e:	415b      	adcs	r3, r3
 8005180:	60fb      	str	r3, [r7, #12]
 8005182:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005186:	4641      	mov	r1, r8
 8005188:	1851      	adds	r1, r2, r1
 800518a:	6039      	str	r1, [r7, #0]
 800518c:	4649      	mov	r1, r9
 800518e:	414b      	adcs	r3, r1
 8005190:	607b      	str	r3, [r7, #4]
 8005192:	f04f 0200 	mov.w	r2, #0
 8005196:	f04f 0300 	mov.w	r3, #0
 800519a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800519e:	4659      	mov	r1, fp
 80051a0:	00cb      	lsls	r3, r1, #3
 80051a2:	4651      	mov	r1, sl
 80051a4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80051a8:	4651      	mov	r1, sl
 80051aa:	00ca      	lsls	r2, r1, #3
 80051ac:	4610      	mov	r0, r2
 80051ae:	4619      	mov	r1, r3
 80051b0:	4603      	mov	r3, r0
 80051b2:	4642      	mov	r2, r8
 80051b4:	189b      	adds	r3, r3, r2
 80051b6:	66bb      	str	r3, [r7, #104]	; 0x68
 80051b8:	464b      	mov	r3, r9
 80051ba:	460a      	mov	r2, r1
 80051bc:	eb42 0303 	adc.w	r3, r2, r3
 80051c0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80051c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051c6:	685b      	ldr	r3, [r3, #4]
 80051c8:	2200      	movs	r2, #0
 80051ca:	663b      	str	r3, [r7, #96]	; 0x60
 80051cc:	667a      	str	r2, [r7, #100]	; 0x64
 80051ce:	f04f 0200 	mov.w	r2, #0
 80051d2:	f04f 0300 	mov.w	r3, #0
 80051d6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80051da:	4649      	mov	r1, r9
 80051dc:	008b      	lsls	r3, r1, #2
 80051de:	4641      	mov	r1, r8
 80051e0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80051e4:	4641      	mov	r1, r8
 80051e6:	008a      	lsls	r2, r1, #2
 80051e8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80051ec:	f7fb fd34 	bl	8000c58 <__aeabi_uldivmod>
 80051f0:	4602      	mov	r2, r0
 80051f2:	460b      	mov	r3, r1
 80051f4:	4b0d      	ldr	r3, [pc, #52]	; (800522c <UART_SetConfig+0x4e4>)
 80051f6:	fba3 1302 	umull	r1, r3, r3, r2
 80051fa:	095b      	lsrs	r3, r3, #5
 80051fc:	2164      	movs	r1, #100	; 0x64
 80051fe:	fb01 f303 	mul.w	r3, r1, r3
 8005202:	1ad3      	subs	r3, r2, r3
 8005204:	011b      	lsls	r3, r3, #4
 8005206:	3332      	adds	r3, #50	; 0x32
 8005208:	4a08      	ldr	r2, [pc, #32]	; (800522c <UART_SetConfig+0x4e4>)
 800520a:	fba2 2303 	umull	r2, r3, r2, r3
 800520e:	095b      	lsrs	r3, r3, #5
 8005210:	f003 020f 	and.w	r2, r3, #15
 8005214:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	4422      	add	r2, r4
 800521c:	609a      	str	r2, [r3, #8]
}
 800521e:	bf00      	nop
 8005220:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005224:	46bd      	mov	sp, r7
 8005226:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800522a:	bf00      	nop
 800522c:	51eb851f 	.word	0x51eb851f

08005230 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8005234:	4904      	ldr	r1, [pc, #16]	; (8005248 <MX_FATFS_Init+0x18>)
 8005236:	4805      	ldr	r0, [pc, #20]	; (800524c <MX_FATFS_Init+0x1c>)
 8005238:	f003 f974 	bl	8008524 <FATFS_LinkDriver>
 800523c:	4603      	mov	r3, r0
 800523e:	461a      	mov	r2, r3
 8005240:	4b03      	ldr	r3, [pc, #12]	; (8005250 <MX_FATFS_Init+0x20>)
 8005242:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8005244:	bf00      	nop
 8005246:	bd80      	pop	{r7, pc}
 8005248:	2000036c 	.word	0x2000036c
 800524c:	20000010 	.word	0x20000010
 8005250:	20000368 	.word	0x20000368

08005254 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8005254:	b480      	push	{r7}
 8005256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8005258:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800525a:	4618      	mov	r0, r3
 800525c:	46bd      	mov	sp, r7
 800525e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005262:	4770      	bx	lr

08005264 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b082      	sub	sp, #8
 8005268:	af00      	add	r7, sp, #0
 800526a:	4603      	mov	r3, r0
 800526c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize(pdrv);
 800526e:	79fb      	ldrb	r3, [r7, #7]
 8005270:	4618      	mov	r0, r3
 8005272:	f7fc fc75 	bl	8001b60 <SD_disk_initialize>
 8005276:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8005278:	4618      	mov	r0, r3
 800527a:	3708      	adds	r7, #8
 800527c:	46bd      	mov	sp, r7
 800527e:	bd80      	pop	{r7, pc}

08005280 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b082      	sub	sp, #8
 8005284:	af00      	add	r7, sp, #0
 8005286:	4603      	mov	r3, r0
 8005288:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status(pdrv);
 800528a:	79fb      	ldrb	r3, [r7, #7]
 800528c:	4618      	mov	r0, r3
 800528e:	f7fc fd4d 	bl	8001d2c <SD_disk_status>
 8005292:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8005294:	4618      	mov	r0, r3
 8005296:	3708      	adds	r7, #8
 8005298:	46bd      	mov	sp, r7
 800529a:	bd80      	pop	{r7, pc}

0800529c <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b084      	sub	sp, #16
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	60b9      	str	r1, [r7, #8]
 80052a4:	607a      	str	r2, [r7, #4]
 80052a6:	603b      	str	r3, [r7, #0]
 80052a8:	4603      	mov	r3, r0
 80052aa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read(pdrv, buff, sector, count);
 80052ac:	7bf8      	ldrb	r0, [r7, #15]
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	687a      	ldr	r2, [r7, #4]
 80052b2:	68b9      	ldr	r1, [r7, #8]
 80052b4:	f7fc fd50 	bl	8001d58 <SD_disk_read>
 80052b8:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 80052ba:	4618      	mov	r0, r3
 80052bc:	3710      	adds	r7, #16
 80052be:	46bd      	mov	sp, r7
 80052c0:	bd80      	pop	{r7, pc}

080052c2 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80052c2:	b580      	push	{r7, lr}
 80052c4:	b084      	sub	sp, #16
 80052c6:	af00      	add	r7, sp, #0
 80052c8:	60b9      	str	r1, [r7, #8]
 80052ca:	607a      	str	r2, [r7, #4]
 80052cc:	603b      	str	r3, [r7, #0]
 80052ce:	4603      	mov	r3, r0
 80052d0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write(pdrv, buff, sector, count);
 80052d2:	7bf8      	ldrb	r0, [r7, #15]
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	687a      	ldr	r2, [r7, #4]
 80052d8:	68b9      	ldr	r1, [r7, #8]
 80052da:	f7fc fda7 	bl	8001e2c <SD_disk_write>
 80052de:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 80052e0:	4618      	mov	r0, r3
 80052e2:	3710      	adds	r7, #16
 80052e4:	46bd      	mov	sp, r7
 80052e6:	bd80      	pop	{r7, pc}

080052e8 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b082      	sub	sp, #8
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	4603      	mov	r3, r0
 80052f0:	603a      	str	r2, [r7, #0]
 80052f2:	71fb      	strb	r3, [r7, #7]
 80052f4:	460b      	mov	r3, r1
 80052f6:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl(pdrv, cmd, buff);
 80052f8:	79b9      	ldrb	r1, [r7, #6]
 80052fa:	79fb      	ldrb	r3, [r7, #7]
 80052fc:	683a      	ldr	r2, [r7, #0]
 80052fe:	4618      	mov	r0, r3
 8005300:	f7fc fe18 	bl	8001f34 <SD_disk_ioctl>
 8005304:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8005306:	4618      	mov	r0, r3
 8005308:	3708      	adds	r7, #8
 800530a:	46bd      	mov	sp, r7
 800530c:	bd80      	pop	{r7, pc}
	...

08005310 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b084      	sub	sp, #16
 8005314:	af00      	add	r7, sp, #0
 8005316:	4603      	mov	r3, r0
 8005318:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800531a:	79fb      	ldrb	r3, [r7, #7]
 800531c:	4a08      	ldr	r2, [pc, #32]	; (8005340 <disk_status+0x30>)
 800531e:	009b      	lsls	r3, r3, #2
 8005320:	4413      	add	r3, r2
 8005322:	685b      	ldr	r3, [r3, #4]
 8005324:	685b      	ldr	r3, [r3, #4]
 8005326:	79fa      	ldrb	r2, [r7, #7]
 8005328:	4905      	ldr	r1, [pc, #20]	; (8005340 <disk_status+0x30>)
 800532a:	440a      	add	r2, r1
 800532c:	7a12      	ldrb	r2, [r2, #8]
 800532e:	4610      	mov	r0, r2
 8005330:	4798      	blx	r3
 8005332:	4603      	mov	r3, r0
 8005334:	73fb      	strb	r3, [r7, #15]
  return stat;
 8005336:	7bfb      	ldrb	r3, [r7, #15]
}
 8005338:	4618      	mov	r0, r3
 800533a:	3710      	adds	r7, #16
 800533c:	46bd      	mov	sp, r7
 800533e:	bd80      	pop	{r7, pc}
 8005340:	20000598 	.word	0x20000598

08005344 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b084      	sub	sp, #16
 8005348:	af00      	add	r7, sp, #0
 800534a:	4603      	mov	r3, r0
 800534c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800534e:	2300      	movs	r3, #0
 8005350:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8005352:	79fb      	ldrb	r3, [r7, #7]
 8005354:	4a0d      	ldr	r2, [pc, #52]	; (800538c <disk_initialize+0x48>)
 8005356:	5cd3      	ldrb	r3, [r2, r3]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d111      	bne.n	8005380 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800535c:	79fb      	ldrb	r3, [r7, #7]
 800535e:	4a0b      	ldr	r2, [pc, #44]	; (800538c <disk_initialize+0x48>)
 8005360:	2101      	movs	r1, #1
 8005362:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8005364:	79fb      	ldrb	r3, [r7, #7]
 8005366:	4a09      	ldr	r2, [pc, #36]	; (800538c <disk_initialize+0x48>)
 8005368:	009b      	lsls	r3, r3, #2
 800536a:	4413      	add	r3, r2
 800536c:	685b      	ldr	r3, [r3, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	79fa      	ldrb	r2, [r7, #7]
 8005372:	4906      	ldr	r1, [pc, #24]	; (800538c <disk_initialize+0x48>)
 8005374:	440a      	add	r2, r1
 8005376:	7a12      	ldrb	r2, [r2, #8]
 8005378:	4610      	mov	r0, r2
 800537a:	4798      	blx	r3
 800537c:	4603      	mov	r3, r0
 800537e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8005380:	7bfb      	ldrb	r3, [r7, #15]
}
 8005382:	4618      	mov	r0, r3
 8005384:	3710      	adds	r7, #16
 8005386:	46bd      	mov	sp, r7
 8005388:	bd80      	pop	{r7, pc}
 800538a:	bf00      	nop
 800538c:	20000598 	.word	0x20000598

08005390 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8005390:	b590      	push	{r4, r7, lr}
 8005392:	b087      	sub	sp, #28
 8005394:	af00      	add	r7, sp, #0
 8005396:	60b9      	str	r1, [r7, #8]
 8005398:	607a      	str	r2, [r7, #4]
 800539a:	603b      	str	r3, [r7, #0]
 800539c:	4603      	mov	r3, r0
 800539e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80053a0:	7bfb      	ldrb	r3, [r7, #15]
 80053a2:	4a0a      	ldr	r2, [pc, #40]	; (80053cc <disk_read+0x3c>)
 80053a4:	009b      	lsls	r3, r3, #2
 80053a6:	4413      	add	r3, r2
 80053a8:	685b      	ldr	r3, [r3, #4]
 80053aa:	689c      	ldr	r4, [r3, #8]
 80053ac:	7bfb      	ldrb	r3, [r7, #15]
 80053ae:	4a07      	ldr	r2, [pc, #28]	; (80053cc <disk_read+0x3c>)
 80053b0:	4413      	add	r3, r2
 80053b2:	7a18      	ldrb	r0, [r3, #8]
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	687a      	ldr	r2, [r7, #4]
 80053b8:	68b9      	ldr	r1, [r7, #8]
 80053ba:	47a0      	blx	r4
 80053bc:	4603      	mov	r3, r0
 80053be:	75fb      	strb	r3, [r7, #23]
  return res;
 80053c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80053c2:	4618      	mov	r0, r3
 80053c4:	371c      	adds	r7, #28
 80053c6:	46bd      	mov	sp, r7
 80053c8:	bd90      	pop	{r4, r7, pc}
 80053ca:	bf00      	nop
 80053cc:	20000598 	.word	0x20000598

080053d0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80053d0:	b590      	push	{r4, r7, lr}
 80053d2:	b087      	sub	sp, #28
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	60b9      	str	r1, [r7, #8]
 80053d8:	607a      	str	r2, [r7, #4]
 80053da:	603b      	str	r3, [r7, #0]
 80053dc:	4603      	mov	r3, r0
 80053de:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80053e0:	7bfb      	ldrb	r3, [r7, #15]
 80053e2:	4a0a      	ldr	r2, [pc, #40]	; (800540c <disk_write+0x3c>)
 80053e4:	009b      	lsls	r3, r3, #2
 80053e6:	4413      	add	r3, r2
 80053e8:	685b      	ldr	r3, [r3, #4]
 80053ea:	68dc      	ldr	r4, [r3, #12]
 80053ec:	7bfb      	ldrb	r3, [r7, #15]
 80053ee:	4a07      	ldr	r2, [pc, #28]	; (800540c <disk_write+0x3c>)
 80053f0:	4413      	add	r3, r2
 80053f2:	7a18      	ldrb	r0, [r3, #8]
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	687a      	ldr	r2, [r7, #4]
 80053f8:	68b9      	ldr	r1, [r7, #8]
 80053fa:	47a0      	blx	r4
 80053fc:	4603      	mov	r3, r0
 80053fe:	75fb      	strb	r3, [r7, #23]
  return res;
 8005400:	7dfb      	ldrb	r3, [r7, #23]
}
 8005402:	4618      	mov	r0, r3
 8005404:	371c      	adds	r7, #28
 8005406:	46bd      	mov	sp, r7
 8005408:	bd90      	pop	{r4, r7, pc}
 800540a:	bf00      	nop
 800540c:	20000598 	.word	0x20000598

08005410 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b084      	sub	sp, #16
 8005414:	af00      	add	r7, sp, #0
 8005416:	4603      	mov	r3, r0
 8005418:	603a      	str	r2, [r7, #0]
 800541a:	71fb      	strb	r3, [r7, #7]
 800541c:	460b      	mov	r3, r1
 800541e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8005420:	79fb      	ldrb	r3, [r7, #7]
 8005422:	4a09      	ldr	r2, [pc, #36]	; (8005448 <disk_ioctl+0x38>)
 8005424:	009b      	lsls	r3, r3, #2
 8005426:	4413      	add	r3, r2
 8005428:	685b      	ldr	r3, [r3, #4]
 800542a:	691b      	ldr	r3, [r3, #16]
 800542c:	79fa      	ldrb	r2, [r7, #7]
 800542e:	4906      	ldr	r1, [pc, #24]	; (8005448 <disk_ioctl+0x38>)
 8005430:	440a      	add	r2, r1
 8005432:	7a10      	ldrb	r0, [r2, #8]
 8005434:	79b9      	ldrb	r1, [r7, #6]
 8005436:	683a      	ldr	r2, [r7, #0]
 8005438:	4798      	blx	r3
 800543a:	4603      	mov	r3, r0
 800543c:	73fb      	strb	r3, [r7, #15]
  return res;
 800543e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005440:	4618      	mov	r0, r3
 8005442:	3710      	adds	r7, #16
 8005444:	46bd      	mov	sp, r7
 8005446:	bd80      	pop	{r7, pc}
 8005448:	20000598 	.word	0x20000598

0800544c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800544c:	b480      	push	{r7}
 800544e:	b085      	sub	sp, #20
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	3301      	adds	r3, #1
 8005458:	781b      	ldrb	r3, [r3, #0]
 800545a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800545c:	89fb      	ldrh	r3, [r7, #14]
 800545e:	021b      	lsls	r3, r3, #8
 8005460:	b21a      	sxth	r2, r3
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	781b      	ldrb	r3, [r3, #0]
 8005466:	b21b      	sxth	r3, r3
 8005468:	4313      	orrs	r3, r2
 800546a:	b21b      	sxth	r3, r3
 800546c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800546e:	89fb      	ldrh	r3, [r7, #14]
}
 8005470:	4618      	mov	r0, r3
 8005472:	3714      	adds	r7, #20
 8005474:	46bd      	mov	sp, r7
 8005476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547a:	4770      	bx	lr

0800547c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800547c:	b480      	push	{r7}
 800547e:	b085      	sub	sp, #20
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	3303      	adds	r3, #3
 8005488:	781b      	ldrb	r3, [r3, #0]
 800548a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	021b      	lsls	r3, r3, #8
 8005490:	687a      	ldr	r2, [r7, #4]
 8005492:	3202      	adds	r2, #2
 8005494:	7812      	ldrb	r2, [r2, #0]
 8005496:	4313      	orrs	r3, r2
 8005498:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	021b      	lsls	r3, r3, #8
 800549e:	687a      	ldr	r2, [r7, #4]
 80054a0:	3201      	adds	r2, #1
 80054a2:	7812      	ldrb	r2, [r2, #0]
 80054a4:	4313      	orrs	r3, r2
 80054a6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	021b      	lsls	r3, r3, #8
 80054ac:	687a      	ldr	r2, [r7, #4]
 80054ae:	7812      	ldrb	r2, [r2, #0]
 80054b0:	4313      	orrs	r3, r2
 80054b2:	60fb      	str	r3, [r7, #12]
	return rv;
 80054b4:	68fb      	ldr	r3, [r7, #12]
}
 80054b6:	4618      	mov	r0, r3
 80054b8:	3714      	adds	r7, #20
 80054ba:	46bd      	mov	sp, r7
 80054bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c0:	4770      	bx	lr

080054c2 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80054c2:	b480      	push	{r7}
 80054c4:	b083      	sub	sp, #12
 80054c6:	af00      	add	r7, sp, #0
 80054c8:	6078      	str	r0, [r7, #4]
 80054ca:	460b      	mov	r3, r1
 80054cc:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	1c5a      	adds	r2, r3, #1
 80054d2:	607a      	str	r2, [r7, #4]
 80054d4:	887a      	ldrh	r2, [r7, #2]
 80054d6:	b2d2      	uxtb	r2, r2
 80054d8:	701a      	strb	r2, [r3, #0]
 80054da:	887b      	ldrh	r3, [r7, #2]
 80054dc:	0a1b      	lsrs	r3, r3, #8
 80054de:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	1c5a      	adds	r2, r3, #1
 80054e4:	607a      	str	r2, [r7, #4]
 80054e6:	887a      	ldrh	r2, [r7, #2]
 80054e8:	b2d2      	uxtb	r2, r2
 80054ea:	701a      	strb	r2, [r3, #0]
}
 80054ec:	bf00      	nop
 80054ee:	370c      	adds	r7, #12
 80054f0:	46bd      	mov	sp, r7
 80054f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f6:	4770      	bx	lr

080054f8 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80054f8:	b480      	push	{r7}
 80054fa:	b083      	sub	sp, #12
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
 8005500:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	1c5a      	adds	r2, r3, #1
 8005506:	607a      	str	r2, [r7, #4]
 8005508:	683a      	ldr	r2, [r7, #0]
 800550a:	b2d2      	uxtb	r2, r2
 800550c:	701a      	strb	r2, [r3, #0]
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	0a1b      	lsrs	r3, r3, #8
 8005512:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	1c5a      	adds	r2, r3, #1
 8005518:	607a      	str	r2, [r7, #4]
 800551a:	683a      	ldr	r2, [r7, #0]
 800551c:	b2d2      	uxtb	r2, r2
 800551e:	701a      	strb	r2, [r3, #0]
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	0a1b      	lsrs	r3, r3, #8
 8005524:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	1c5a      	adds	r2, r3, #1
 800552a:	607a      	str	r2, [r7, #4]
 800552c:	683a      	ldr	r2, [r7, #0]
 800552e:	b2d2      	uxtb	r2, r2
 8005530:	701a      	strb	r2, [r3, #0]
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	0a1b      	lsrs	r3, r3, #8
 8005536:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	1c5a      	adds	r2, r3, #1
 800553c:	607a      	str	r2, [r7, #4]
 800553e:	683a      	ldr	r2, [r7, #0]
 8005540:	b2d2      	uxtb	r2, r2
 8005542:	701a      	strb	r2, [r3, #0]
}
 8005544:	bf00      	nop
 8005546:	370c      	adds	r7, #12
 8005548:	46bd      	mov	sp, r7
 800554a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554e:	4770      	bx	lr

08005550 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8005550:	b480      	push	{r7}
 8005552:	b087      	sub	sp, #28
 8005554:	af00      	add	r7, sp, #0
 8005556:	60f8      	str	r0, [r7, #12]
 8005558:	60b9      	str	r1, [r7, #8]
 800555a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8005560:	68bb      	ldr	r3, [r7, #8]
 8005562:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d00d      	beq.n	8005586 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800556a:	693a      	ldr	r2, [r7, #16]
 800556c:	1c53      	adds	r3, r2, #1
 800556e:	613b      	str	r3, [r7, #16]
 8005570:	697b      	ldr	r3, [r7, #20]
 8005572:	1c59      	adds	r1, r3, #1
 8005574:	6179      	str	r1, [r7, #20]
 8005576:	7812      	ldrb	r2, [r2, #0]
 8005578:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	3b01      	subs	r3, #1
 800557e:	607b      	str	r3, [r7, #4]
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d1f1      	bne.n	800556a <mem_cpy+0x1a>
	}
}
 8005586:	bf00      	nop
 8005588:	371c      	adds	r7, #28
 800558a:	46bd      	mov	sp, r7
 800558c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005590:	4770      	bx	lr

08005592 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8005592:	b480      	push	{r7}
 8005594:	b087      	sub	sp, #28
 8005596:	af00      	add	r7, sp, #0
 8005598:	60f8      	str	r0, [r7, #12]
 800559a:	60b9      	str	r1, [r7, #8]
 800559c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80055a2:	697b      	ldr	r3, [r7, #20]
 80055a4:	1c5a      	adds	r2, r3, #1
 80055a6:	617a      	str	r2, [r7, #20]
 80055a8:	68ba      	ldr	r2, [r7, #8]
 80055aa:	b2d2      	uxtb	r2, r2
 80055ac:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	3b01      	subs	r3, #1
 80055b2:	607b      	str	r3, [r7, #4]
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d1f3      	bne.n	80055a2 <mem_set+0x10>
}
 80055ba:	bf00      	nop
 80055bc:	bf00      	nop
 80055be:	371c      	adds	r7, #28
 80055c0:	46bd      	mov	sp, r7
 80055c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c6:	4770      	bx	lr

080055c8 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80055c8:	b480      	push	{r7}
 80055ca:	b089      	sub	sp, #36	; 0x24
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	60f8      	str	r0, [r7, #12]
 80055d0:	60b9      	str	r1, [r7, #8]
 80055d2:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	61fb      	str	r3, [r7, #28]
 80055d8:	68bb      	ldr	r3, [r7, #8]
 80055da:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80055dc:	2300      	movs	r3, #0
 80055de:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80055e0:	69fb      	ldr	r3, [r7, #28]
 80055e2:	1c5a      	adds	r2, r3, #1
 80055e4:	61fa      	str	r2, [r7, #28]
 80055e6:	781b      	ldrb	r3, [r3, #0]
 80055e8:	4619      	mov	r1, r3
 80055ea:	69bb      	ldr	r3, [r7, #24]
 80055ec:	1c5a      	adds	r2, r3, #1
 80055ee:	61ba      	str	r2, [r7, #24]
 80055f0:	781b      	ldrb	r3, [r3, #0]
 80055f2:	1acb      	subs	r3, r1, r3
 80055f4:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	3b01      	subs	r3, #1
 80055fa:	607b      	str	r3, [r7, #4]
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d002      	beq.n	8005608 <mem_cmp+0x40>
 8005602:	697b      	ldr	r3, [r7, #20]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d0eb      	beq.n	80055e0 <mem_cmp+0x18>

	return r;
 8005608:	697b      	ldr	r3, [r7, #20]
}
 800560a:	4618      	mov	r0, r3
 800560c:	3724      	adds	r7, #36	; 0x24
 800560e:	46bd      	mov	sp, r7
 8005610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005614:	4770      	bx	lr

08005616 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8005616:	b480      	push	{r7}
 8005618:	b083      	sub	sp, #12
 800561a:	af00      	add	r7, sp, #0
 800561c:	6078      	str	r0, [r7, #4]
 800561e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8005620:	e002      	b.n	8005628 <chk_chr+0x12>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	3301      	adds	r3, #1
 8005626:	607b      	str	r3, [r7, #4]
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	781b      	ldrb	r3, [r3, #0]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d005      	beq.n	800563c <chk_chr+0x26>
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	781b      	ldrb	r3, [r3, #0]
 8005634:	461a      	mov	r2, r3
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	4293      	cmp	r3, r2
 800563a:	d1f2      	bne.n	8005622 <chk_chr+0xc>
	return *str;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	781b      	ldrb	r3, [r3, #0]
}
 8005640:	4618      	mov	r0, r3
 8005642:	370c      	adds	r7, #12
 8005644:	46bd      	mov	sp, r7
 8005646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564a:	4770      	bx	lr

0800564c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800564c:	b480      	push	{r7}
 800564e:	b085      	sub	sp, #20
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
 8005654:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005656:	2300      	movs	r3, #0
 8005658:	60bb      	str	r3, [r7, #8]
 800565a:	68bb      	ldr	r3, [r7, #8]
 800565c:	60fb      	str	r3, [r7, #12]
 800565e:	e029      	b.n	80056b4 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8005660:	4a27      	ldr	r2, [pc, #156]	; (8005700 <chk_lock+0xb4>)
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	011b      	lsls	r3, r3, #4
 8005666:	4413      	add	r3, r2
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d01d      	beq.n	80056aa <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800566e:	4a24      	ldr	r2, [pc, #144]	; (8005700 <chk_lock+0xb4>)
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	011b      	lsls	r3, r3, #4
 8005674:	4413      	add	r3, r2
 8005676:	681a      	ldr	r2, [r3, #0]
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	429a      	cmp	r2, r3
 800567e:	d116      	bne.n	80056ae <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8005680:	4a1f      	ldr	r2, [pc, #124]	; (8005700 <chk_lock+0xb4>)
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	011b      	lsls	r3, r3, #4
 8005686:	4413      	add	r3, r2
 8005688:	3304      	adds	r3, #4
 800568a:	681a      	ldr	r2, [r3, #0]
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005690:	429a      	cmp	r2, r3
 8005692:	d10c      	bne.n	80056ae <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005694:	4a1a      	ldr	r2, [pc, #104]	; (8005700 <chk_lock+0xb4>)
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	011b      	lsls	r3, r3, #4
 800569a:	4413      	add	r3, r2
 800569c:	3308      	adds	r3, #8
 800569e:	681a      	ldr	r2, [r3, #0]
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80056a4:	429a      	cmp	r2, r3
 80056a6:	d102      	bne.n	80056ae <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80056a8:	e007      	b.n	80056ba <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80056aa:	2301      	movs	r3, #1
 80056ac:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	3301      	adds	r3, #1
 80056b2:	60fb      	str	r3, [r7, #12]
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	2b01      	cmp	r3, #1
 80056b8:	d9d2      	bls.n	8005660 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	2b02      	cmp	r3, #2
 80056be:	d109      	bne.n	80056d4 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80056c0:	68bb      	ldr	r3, [r7, #8]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d102      	bne.n	80056cc <chk_lock+0x80>
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	2b02      	cmp	r3, #2
 80056ca:	d101      	bne.n	80056d0 <chk_lock+0x84>
 80056cc:	2300      	movs	r3, #0
 80056ce:	e010      	b.n	80056f2 <chk_lock+0xa6>
 80056d0:	2312      	movs	r3, #18
 80056d2:	e00e      	b.n	80056f2 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d108      	bne.n	80056ec <chk_lock+0xa0>
 80056da:	4a09      	ldr	r2, [pc, #36]	; (8005700 <chk_lock+0xb4>)
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	011b      	lsls	r3, r3, #4
 80056e0:	4413      	add	r3, r2
 80056e2:	330c      	adds	r3, #12
 80056e4:	881b      	ldrh	r3, [r3, #0]
 80056e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056ea:	d101      	bne.n	80056f0 <chk_lock+0xa4>
 80056ec:	2310      	movs	r3, #16
 80056ee:	e000      	b.n	80056f2 <chk_lock+0xa6>
 80056f0:	2300      	movs	r3, #0
}
 80056f2:	4618      	mov	r0, r3
 80056f4:	3714      	adds	r7, #20
 80056f6:	46bd      	mov	sp, r7
 80056f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fc:	4770      	bx	lr
 80056fe:	bf00      	nop
 8005700:	20000378 	.word	0x20000378

08005704 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8005704:	b480      	push	{r7}
 8005706:	b083      	sub	sp, #12
 8005708:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800570a:	2300      	movs	r3, #0
 800570c:	607b      	str	r3, [r7, #4]
 800570e:	e002      	b.n	8005716 <enq_lock+0x12>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	3301      	adds	r3, #1
 8005714:	607b      	str	r3, [r7, #4]
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2b01      	cmp	r3, #1
 800571a:	d806      	bhi.n	800572a <enq_lock+0x26>
 800571c:	4a09      	ldr	r2, [pc, #36]	; (8005744 <enq_lock+0x40>)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	011b      	lsls	r3, r3, #4
 8005722:	4413      	add	r3, r2
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d1f2      	bne.n	8005710 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2b02      	cmp	r3, #2
 800572e:	bf14      	ite	ne
 8005730:	2301      	movne	r3, #1
 8005732:	2300      	moveq	r3, #0
 8005734:	b2db      	uxtb	r3, r3
}
 8005736:	4618      	mov	r0, r3
 8005738:	370c      	adds	r7, #12
 800573a:	46bd      	mov	sp, r7
 800573c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005740:	4770      	bx	lr
 8005742:	bf00      	nop
 8005744:	20000378 	.word	0x20000378

08005748 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005748:	b480      	push	{r7}
 800574a:	b085      	sub	sp, #20
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
 8005750:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005752:	2300      	movs	r3, #0
 8005754:	60fb      	str	r3, [r7, #12]
 8005756:	e01f      	b.n	8005798 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8005758:	4a41      	ldr	r2, [pc, #260]	; (8005860 <inc_lock+0x118>)
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	011b      	lsls	r3, r3, #4
 800575e:	4413      	add	r3, r2
 8005760:	681a      	ldr	r2, [r3, #0]
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	429a      	cmp	r2, r3
 8005768:	d113      	bne.n	8005792 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800576a:	4a3d      	ldr	r2, [pc, #244]	; (8005860 <inc_lock+0x118>)
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	011b      	lsls	r3, r3, #4
 8005770:	4413      	add	r3, r2
 8005772:	3304      	adds	r3, #4
 8005774:	681a      	ldr	r2, [r3, #0]
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800577a:	429a      	cmp	r2, r3
 800577c:	d109      	bne.n	8005792 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800577e:	4a38      	ldr	r2, [pc, #224]	; (8005860 <inc_lock+0x118>)
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	011b      	lsls	r3, r3, #4
 8005784:	4413      	add	r3, r2
 8005786:	3308      	adds	r3, #8
 8005788:	681a      	ldr	r2, [r3, #0]
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800578e:	429a      	cmp	r2, r3
 8005790:	d006      	beq.n	80057a0 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	3301      	adds	r3, #1
 8005796:	60fb      	str	r3, [r7, #12]
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	2b01      	cmp	r3, #1
 800579c:	d9dc      	bls.n	8005758 <inc_lock+0x10>
 800579e:	e000      	b.n	80057a2 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80057a0:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	2b02      	cmp	r3, #2
 80057a6:	d132      	bne.n	800580e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80057a8:	2300      	movs	r3, #0
 80057aa:	60fb      	str	r3, [r7, #12]
 80057ac:	e002      	b.n	80057b4 <inc_lock+0x6c>
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	3301      	adds	r3, #1
 80057b2:	60fb      	str	r3, [r7, #12]
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	2b01      	cmp	r3, #1
 80057b8:	d806      	bhi.n	80057c8 <inc_lock+0x80>
 80057ba:	4a29      	ldr	r2, [pc, #164]	; (8005860 <inc_lock+0x118>)
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	011b      	lsls	r3, r3, #4
 80057c0:	4413      	add	r3, r2
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d1f2      	bne.n	80057ae <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	2b02      	cmp	r3, #2
 80057cc:	d101      	bne.n	80057d2 <inc_lock+0x8a>
 80057ce:	2300      	movs	r3, #0
 80057d0:	e040      	b.n	8005854 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681a      	ldr	r2, [r3, #0]
 80057d6:	4922      	ldr	r1, [pc, #136]	; (8005860 <inc_lock+0x118>)
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	011b      	lsls	r3, r3, #4
 80057dc:	440b      	add	r3, r1
 80057de:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	689a      	ldr	r2, [r3, #8]
 80057e4:	491e      	ldr	r1, [pc, #120]	; (8005860 <inc_lock+0x118>)
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	011b      	lsls	r3, r3, #4
 80057ea:	440b      	add	r3, r1
 80057ec:	3304      	adds	r3, #4
 80057ee:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	695a      	ldr	r2, [r3, #20]
 80057f4:	491a      	ldr	r1, [pc, #104]	; (8005860 <inc_lock+0x118>)
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	011b      	lsls	r3, r3, #4
 80057fa:	440b      	add	r3, r1
 80057fc:	3308      	adds	r3, #8
 80057fe:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8005800:	4a17      	ldr	r2, [pc, #92]	; (8005860 <inc_lock+0x118>)
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	011b      	lsls	r3, r3, #4
 8005806:	4413      	add	r3, r2
 8005808:	330c      	adds	r3, #12
 800580a:	2200      	movs	r2, #0
 800580c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d009      	beq.n	8005828 <inc_lock+0xe0>
 8005814:	4a12      	ldr	r2, [pc, #72]	; (8005860 <inc_lock+0x118>)
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	011b      	lsls	r3, r3, #4
 800581a:	4413      	add	r3, r2
 800581c:	330c      	adds	r3, #12
 800581e:	881b      	ldrh	r3, [r3, #0]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d001      	beq.n	8005828 <inc_lock+0xe0>
 8005824:	2300      	movs	r3, #0
 8005826:	e015      	b.n	8005854 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d108      	bne.n	8005840 <inc_lock+0xf8>
 800582e:	4a0c      	ldr	r2, [pc, #48]	; (8005860 <inc_lock+0x118>)
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	011b      	lsls	r3, r3, #4
 8005834:	4413      	add	r3, r2
 8005836:	330c      	adds	r3, #12
 8005838:	881b      	ldrh	r3, [r3, #0]
 800583a:	3301      	adds	r3, #1
 800583c:	b29a      	uxth	r2, r3
 800583e:	e001      	b.n	8005844 <inc_lock+0xfc>
 8005840:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005844:	4906      	ldr	r1, [pc, #24]	; (8005860 <inc_lock+0x118>)
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	011b      	lsls	r3, r3, #4
 800584a:	440b      	add	r3, r1
 800584c:	330c      	adds	r3, #12
 800584e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	3301      	adds	r3, #1
}
 8005854:	4618      	mov	r0, r3
 8005856:	3714      	adds	r7, #20
 8005858:	46bd      	mov	sp, r7
 800585a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585e:	4770      	bx	lr
 8005860:	20000378 	.word	0x20000378

08005864 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8005864:	b480      	push	{r7}
 8005866:	b085      	sub	sp, #20
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	3b01      	subs	r3, #1
 8005870:	607b      	str	r3, [r7, #4]
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2b01      	cmp	r3, #1
 8005876:	d825      	bhi.n	80058c4 <dec_lock+0x60>
		n = Files[i].ctr;
 8005878:	4a17      	ldr	r2, [pc, #92]	; (80058d8 <dec_lock+0x74>)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	011b      	lsls	r3, r3, #4
 800587e:	4413      	add	r3, r2
 8005880:	330c      	adds	r3, #12
 8005882:	881b      	ldrh	r3, [r3, #0]
 8005884:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8005886:	89fb      	ldrh	r3, [r7, #14]
 8005888:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800588c:	d101      	bne.n	8005892 <dec_lock+0x2e>
 800588e:	2300      	movs	r3, #0
 8005890:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8005892:	89fb      	ldrh	r3, [r7, #14]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d002      	beq.n	800589e <dec_lock+0x3a>
 8005898:	89fb      	ldrh	r3, [r7, #14]
 800589a:	3b01      	subs	r3, #1
 800589c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800589e:	4a0e      	ldr	r2, [pc, #56]	; (80058d8 <dec_lock+0x74>)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	011b      	lsls	r3, r3, #4
 80058a4:	4413      	add	r3, r2
 80058a6:	330c      	adds	r3, #12
 80058a8:	89fa      	ldrh	r2, [r7, #14]
 80058aa:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80058ac:	89fb      	ldrh	r3, [r7, #14]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d105      	bne.n	80058be <dec_lock+0x5a>
 80058b2:	4a09      	ldr	r2, [pc, #36]	; (80058d8 <dec_lock+0x74>)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	011b      	lsls	r3, r3, #4
 80058b8:	4413      	add	r3, r2
 80058ba:	2200      	movs	r2, #0
 80058bc:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80058be:	2300      	movs	r3, #0
 80058c0:	737b      	strb	r3, [r7, #13]
 80058c2:	e001      	b.n	80058c8 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80058c4:	2302      	movs	r3, #2
 80058c6:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80058c8:	7b7b      	ldrb	r3, [r7, #13]
}
 80058ca:	4618      	mov	r0, r3
 80058cc:	3714      	adds	r7, #20
 80058ce:	46bd      	mov	sp, r7
 80058d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d4:	4770      	bx	lr
 80058d6:	bf00      	nop
 80058d8:	20000378 	.word	0x20000378

080058dc <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80058dc:	b480      	push	{r7}
 80058de:	b085      	sub	sp, #20
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80058e4:	2300      	movs	r3, #0
 80058e6:	60fb      	str	r3, [r7, #12]
 80058e8:	e010      	b.n	800590c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80058ea:	4a0d      	ldr	r2, [pc, #52]	; (8005920 <clear_lock+0x44>)
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	011b      	lsls	r3, r3, #4
 80058f0:	4413      	add	r3, r2
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	687a      	ldr	r2, [r7, #4]
 80058f6:	429a      	cmp	r2, r3
 80058f8:	d105      	bne.n	8005906 <clear_lock+0x2a>
 80058fa:	4a09      	ldr	r2, [pc, #36]	; (8005920 <clear_lock+0x44>)
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	011b      	lsls	r3, r3, #4
 8005900:	4413      	add	r3, r2
 8005902:	2200      	movs	r2, #0
 8005904:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	3301      	adds	r3, #1
 800590a:	60fb      	str	r3, [r7, #12]
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	2b01      	cmp	r3, #1
 8005910:	d9eb      	bls.n	80058ea <clear_lock+0xe>
	}
}
 8005912:	bf00      	nop
 8005914:	bf00      	nop
 8005916:	3714      	adds	r7, #20
 8005918:	46bd      	mov	sp, r7
 800591a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591e:	4770      	bx	lr
 8005920:	20000378 	.word	0x20000378

08005924 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8005924:	b580      	push	{r7, lr}
 8005926:	b086      	sub	sp, #24
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800592c:	2300      	movs	r3, #0
 800592e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	78db      	ldrb	r3, [r3, #3]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d034      	beq.n	80059a2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800593c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	7858      	ldrb	r0, [r3, #1]
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005948:	2301      	movs	r3, #1
 800594a:	697a      	ldr	r2, [r7, #20]
 800594c:	f7ff fd40 	bl	80053d0 <disk_write>
 8005950:	4603      	mov	r3, r0
 8005952:	2b00      	cmp	r3, #0
 8005954:	d002      	beq.n	800595c <sync_window+0x38>
			res = FR_DISK_ERR;
 8005956:	2301      	movs	r3, #1
 8005958:	73fb      	strb	r3, [r7, #15]
 800595a:	e022      	b.n	80059a2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2200      	movs	r2, #0
 8005960:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005966:	697a      	ldr	r2, [r7, #20]
 8005968:	1ad2      	subs	r2, r2, r3
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6a1b      	ldr	r3, [r3, #32]
 800596e:	429a      	cmp	r2, r3
 8005970:	d217      	bcs.n	80059a2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	789b      	ldrb	r3, [r3, #2]
 8005976:	613b      	str	r3, [r7, #16]
 8005978:	e010      	b.n	800599c <sync_window+0x78>
					wsect += fs->fsize;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6a1b      	ldr	r3, [r3, #32]
 800597e:	697a      	ldr	r2, [r7, #20]
 8005980:	4413      	add	r3, r2
 8005982:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	7858      	ldrb	r0, [r3, #1]
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800598e:	2301      	movs	r3, #1
 8005990:	697a      	ldr	r2, [r7, #20]
 8005992:	f7ff fd1d 	bl	80053d0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005996:	693b      	ldr	r3, [r7, #16]
 8005998:	3b01      	subs	r3, #1
 800599a:	613b      	str	r3, [r7, #16]
 800599c:	693b      	ldr	r3, [r7, #16]
 800599e:	2b01      	cmp	r3, #1
 80059a0:	d8eb      	bhi.n	800597a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80059a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80059a4:	4618      	mov	r0, r3
 80059a6:	3718      	adds	r7, #24
 80059a8:	46bd      	mov	sp, r7
 80059aa:	bd80      	pop	{r7, pc}

080059ac <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b084      	sub	sp, #16
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
 80059b4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80059b6:	2300      	movs	r3, #0
 80059b8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059be:	683a      	ldr	r2, [r7, #0]
 80059c0:	429a      	cmp	r2, r3
 80059c2:	d01b      	beq.n	80059fc <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80059c4:	6878      	ldr	r0, [r7, #4]
 80059c6:	f7ff ffad 	bl	8005924 <sync_window>
 80059ca:	4603      	mov	r3, r0
 80059cc:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80059ce:	7bfb      	ldrb	r3, [r7, #15]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d113      	bne.n	80059fc <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	7858      	ldrb	r0, [r3, #1]
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80059de:	2301      	movs	r3, #1
 80059e0:	683a      	ldr	r2, [r7, #0]
 80059e2:	f7ff fcd5 	bl	8005390 <disk_read>
 80059e6:	4603      	mov	r3, r0
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d004      	beq.n	80059f6 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80059ec:	f04f 33ff 	mov.w	r3, #4294967295
 80059f0:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80059f2:	2301      	movs	r3, #1
 80059f4:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	683a      	ldr	r2, [r7, #0]
 80059fa:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 80059fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80059fe:	4618      	mov	r0, r3
 8005a00:	3710      	adds	r7, #16
 8005a02:	46bd      	mov	sp, r7
 8005a04:	bd80      	pop	{r7, pc}
	...

08005a08 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b084      	sub	sp, #16
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8005a10:	6878      	ldr	r0, [r7, #4]
 8005a12:	f7ff ff87 	bl	8005924 <sync_window>
 8005a16:	4603      	mov	r3, r0
 8005a18:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8005a1a:	7bfb      	ldrb	r3, [r7, #15]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d159      	bne.n	8005ad4 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	781b      	ldrb	r3, [r3, #0]
 8005a24:	2b03      	cmp	r3, #3
 8005a26:	d149      	bne.n	8005abc <sync_fs+0xb4>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	791b      	ldrb	r3, [r3, #4]
 8005a2c:	2b01      	cmp	r3, #1
 8005a2e:	d145      	bne.n	8005abc <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	899b      	ldrh	r3, [r3, #12]
 8005a3a:	461a      	mov	r2, r3
 8005a3c:	2100      	movs	r1, #0
 8005a3e:	f7ff fda8 	bl	8005592 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	3338      	adds	r3, #56	; 0x38
 8005a46:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8005a4a:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8005a4e:	4618      	mov	r0, r3
 8005a50:	f7ff fd37 	bl	80054c2 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	3338      	adds	r3, #56	; 0x38
 8005a58:	4921      	ldr	r1, [pc, #132]	; (8005ae0 <sync_fs+0xd8>)
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	f7ff fd4c 	bl	80054f8 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	3338      	adds	r3, #56	; 0x38
 8005a64:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8005a68:	491e      	ldr	r1, [pc, #120]	; (8005ae4 <sync_fs+0xdc>)
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	f7ff fd44 	bl	80054f8 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	3338      	adds	r3, #56	; 0x38
 8005a74:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	699b      	ldr	r3, [r3, #24]
 8005a7c:	4619      	mov	r1, r3
 8005a7e:	4610      	mov	r0, r2
 8005a80:	f7ff fd3a 	bl	80054f8 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	3338      	adds	r3, #56	; 0x38
 8005a88:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	695b      	ldr	r3, [r3, #20]
 8005a90:	4619      	mov	r1, r3
 8005a92:	4610      	mov	r0, r2
 8005a94:	f7ff fd30 	bl	80054f8 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a9c:	1c5a      	adds	r2, r3, #1
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	7858      	ldrb	r0, [r3, #1]
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ab0:	2301      	movs	r3, #1
 8005ab2:	f7ff fc8d 	bl	80053d0 <disk_write>
			fs->fsi_flag = 0;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2200      	movs	r2, #0
 8005aba:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	785b      	ldrb	r3, [r3, #1]
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	2100      	movs	r1, #0
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	f7ff fca3 	bl	8005410 <disk_ioctl>
 8005aca:	4603      	mov	r3, r0
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d001      	beq.n	8005ad4 <sync_fs+0xcc>
 8005ad0:	2301      	movs	r3, #1
 8005ad2:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8005ad4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	3710      	adds	r7, #16
 8005ada:	46bd      	mov	sp, r7
 8005adc:	bd80      	pop	{r7, pc}
 8005ade:	bf00      	nop
 8005ae0:	41615252 	.word	0x41615252
 8005ae4:	61417272 	.word	0x61417272

08005ae8 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8005ae8:	b480      	push	{r7}
 8005aea:	b083      	sub	sp, #12
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
 8005af0:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	3b02      	subs	r3, #2
 8005af6:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	69db      	ldr	r3, [r3, #28]
 8005afc:	3b02      	subs	r3, #2
 8005afe:	683a      	ldr	r2, [r7, #0]
 8005b00:	429a      	cmp	r2, r3
 8005b02:	d301      	bcc.n	8005b08 <clust2sect+0x20>
 8005b04:	2300      	movs	r3, #0
 8005b06:	e008      	b.n	8005b1a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	895b      	ldrh	r3, [r3, #10]
 8005b0c:	461a      	mov	r2, r3
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	fb03 f202 	mul.w	r2, r3, r2
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b18:	4413      	add	r3, r2
}
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	370c      	adds	r7, #12
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b24:	4770      	bx	lr

08005b26 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8005b26:	b580      	push	{r7, lr}
 8005b28:	b086      	sub	sp, #24
 8005b2a:	af00      	add	r7, sp, #0
 8005b2c:	6078      	str	r0, [r7, #4]
 8005b2e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	2b01      	cmp	r3, #1
 8005b3a:	d904      	bls.n	8005b46 <get_fat+0x20>
 8005b3c:	693b      	ldr	r3, [r7, #16]
 8005b3e:	69db      	ldr	r3, [r3, #28]
 8005b40:	683a      	ldr	r2, [r7, #0]
 8005b42:	429a      	cmp	r2, r3
 8005b44:	d302      	bcc.n	8005b4c <get_fat+0x26>
		val = 1;	/* Internal error */
 8005b46:	2301      	movs	r3, #1
 8005b48:	617b      	str	r3, [r7, #20]
 8005b4a:	e0bb      	b.n	8005cc4 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8005b4c:	f04f 33ff 	mov.w	r3, #4294967295
 8005b50:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8005b52:	693b      	ldr	r3, [r7, #16]
 8005b54:	781b      	ldrb	r3, [r3, #0]
 8005b56:	2b03      	cmp	r3, #3
 8005b58:	f000 8083 	beq.w	8005c62 <get_fat+0x13c>
 8005b5c:	2b03      	cmp	r3, #3
 8005b5e:	f300 80a7 	bgt.w	8005cb0 <get_fat+0x18a>
 8005b62:	2b01      	cmp	r3, #1
 8005b64:	d002      	beq.n	8005b6c <get_fat+0x46>
 8005b66:	2b02      	cmp	r3, #2
 8005b68:	d056      	beq.n	8005c18 <get_fat+0xf2>
 8005b6a:	e0a1      	b.n	8005cb0 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	60fb      	str	r3, [r7, #12]
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	085b      	lsrs	r3, r3, #1
 8005b74:	68fa      	ldr	r2, [r7, #12]
 8005b76:	4413      	add	r3, r2
 8005b78:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005b7a:	693b      	ldr	r3, [r7, #16]
 8005b7c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005b7e:	693b      	ldr	r3, [r7, #16]
 8005b80:	899b      	ldrh	r3, [r3, #12]
 8005b82:	4619      	mov	r1, r3
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	fbb3 f3f1 	udiv	r3, r3, r1
 8005b8a:	4413      	add	r3, r2
 8005b8c:	4619      	mov	r1, r3
 8005b8e:	6938      	ldr	r0, [r7, #16]
 8005b90:	f7ff ff0c 	bl	80059ac <move_window>
 8005b94:	4603      	mov	r3, r0
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	f040 808d 	bne.w	8005cb6 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	1c5a      	adds	r2, r3, #1
 8005ba0:	60fa      	str	r2, [r7, #12]
 8005ba2:	693a      	ldr	r2, [r7, #16]
 8005ba4:	8992      	ldrh	r2, [r2, #12]
 8005ba6:	fbb3 f1f2 	udiv	r1, r3, r2
 8005baa:	fb01 f202 	mul.w	r2, r1, r2
 8005bae:	1a9b      	subs	r3, r3, r2
 8005bb0:	693a      	ldr	r2, [r7, #16]
 8005bb2:	4413      	add	r3, r2
 8005bb4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005bb8:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005bba:	693b      	ldr	r3, [r7, #16]
 8005bbc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005bbe:	693b      	ldr	r3, [r7, #16]
 8005bc0:	899b      	ldrh	r3, [r3, #12]
 8005bc2:	4619      	mov	r1, r3
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	fbb3 f3f1 	udiv	r3, r3, r1
 8005bca:	4413      	add	r3, r2
 8005bcc:	4619      	mov	r1, r3
 8005bce:	6938      	ldr	r0, [r7, #16]
 8005bd0:	f7ff feec 	bl	80059ac <move_window>
 8005bd4:	4603      	mov	r3, r0
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d16f      	bne.n	8005cba <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 8005bda:	693b      	ldr	r3, [r7, #16]
 8005bdc:	899b      	ldrh	r3, [r3, #12]
 8005bde:	461a      	mov	r2, r3
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	fbb3 f1f2 	udiv	r1, r3, r2
 8005be6:	fb01 f202 	mul.w	r2, r1, r2
 8005bea:	1a9b      	subs	r3, r3, r2
 8005bec:	693a      	ldr	r2, [r7, #16]
 8005bee:	4413      	add	r3, r2
 8005bf0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005bf4:	021b      	lsls	r3, r3, #8
 8005bf6:	461a      	mov	r2, r3
 8005bf8:	68bb      	ldr	r3, [r7, #8]
 8005bfa:	4313      	orrs	r3, r2
 8005bfc:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	f003 0301 	and.w	r3, r3, #1
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d002      	beq.n	8005c0e <get_fat+0xe8>
 8005c08:	68bb      	ldr	r3, [r7, #8]
 8005c0a:	091b      	lsrs	r3, r3, #4
 8005c0c:	e002      	b.n	8005c14 <get_fat+0xee>
 8005c0e:	68bb      	ldr	r3, [r7, #8]
 8005c10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c14:	617b      	str	r3, [r7, #20]
			break;
 8005c16:	e055      	b.n	8005cc4 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005c18:	693b      	ldr	r3, [r7, #16]
 8005c1a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005c1c:	693b      	ldr	r3, [r7, #16]
 8005c1e:	899b      	ldrh	r3, [r3, #12]
 8005c20:	085b      	lsrs	r3, r3, #1
 8005c22:	b29b      	uxth	r3, r3
 8005c24:	4619      	mov	r1, r3
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	fbb3 f3f1 	udiv	r3, r3, r1
 8005c2c:	4413      	add	r3, r2
 8005c2e:	4619      	mov	r1, r3
 8005c30:	6938      	ldr	r0, [r7, #16]
 8005c32:	f7ff febb 	bl	80059ac <move_window>
 8005c36:	4603      	mov	r3, r0
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d140      	bne.n	8005cbe <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8005c3c:	693b      	ldr	r3, [r7, #16]
 8005c3e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	005b      	lsls	r3, r3, #1
 8005c46:	693a      	ldr	r2, [r7, #16]
 8005c48:	8992      	ldrh	r2, [r2, #12]
 8005c4a:	fbb3 f0f2 	udiv	r0, r3, r2
 8005c4e:	fb00 f202 	mul.w	r2, r0, r2
 8005c52:	1a9b      	subs	r3, r3, r2
 8005c54:	440b      	add	r3, r1
 8005c56:	4618      	mov	r0, r3
 8005c58:	f7ff fbf8 	bl	800544c <ld_word>
 8005c5c:	4603      	mov	r3, r0
 8005c5e:	617b      	str	r3, [r7, #20]
			break;
 8005c60:	e030      	b.n	8005cc4 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005c62:	693b      	ldr	r3, [r7, #16]
 8005c64:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005c66:	693b      	ldr	r3, [r7, #16]
 8005c68:	899b      	ldrh	r3, [r3, #12]
 8005c6a:	089b      	lsrs	r3, r3, #2
 8005c6c:	b29b      	uxth	r3, r3
 8005c6e:	4619      	mov	r1, r3
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	fbb3 f3f1 	udiv	r3, r3, r1
 8005c76:	4413      	add	r3, r2
 8005c78:	4619      	mov	r1, r3
 8005c7a:	6938      	ldr	r0, [r7, #16]
 8005c7c:	f7ff fe96 	bl	80059ac <move_window>
 8005c80:	4603      	mov	r3, r0
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d11d      	bne.n	8005cc2 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8005c86:	693b      	ldr	r3, [r7, #16]
 8005c88:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	009b      	lsls	r3, r3, #2
 8005c90:	693a      	ldr	r2, [r7, #16]
 8005c92:	8992      	ldrh	r2, [r2, #12]
 8005c94:	fbb3 f0f2 	udiv	r0, r3, r2
 8005c98:	fb00 f202 	mul.w	r2, r0, r2
 8005c9c:	1a9b      	subs	r3, r3, r2
 8005c9e:	440b      	add	r3, r1
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	f7ff fbeb 	bl	800547c <ld_dword>
 8005ca6:	4603      	mov	r3, r0
 8005ca8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005cac:	617b      	str	r3, [r7, #20]
			break;
 8005cae:	e009      	b.n	8005cc4 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8005cb0:	2301      	movs	r3, #1
 8005cb2:	617b      	str	r3, [r7, #20]
 8005cb4:	e006      	b.n	8005cc4 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005cb6:	bf00      	nop
 8005cb8:	e004      	b.n	8005cc4 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005cba:	bf00      	nop
 8005cbc:	e002      	b.n	8005cc4 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005cbe:	bf00      	nop
 8005cc0:	e000      	b.n	8005cc4 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005cc2:	bf00      	nop
		}
	}

	return val;
 8005cc4:	697b      	ldr	r3, [r7, #20]
}
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	3718      	adds	r7, #24
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	bd80      	pop	{r7, pc}

08005cce <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8005cce:	b590      	push	{r4, r7, lr}
 8005cd0:	b089      	sub	sp, #36	; 0x24
 8005cd2:	af00      	add	r7, sp, #0
 8005cd4:	60f8      	str	r0, [r7, #12]
 8005cd6:	60b9      	str	r1, [r7, #8]
 8005cd8:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8005cda:	2302      	movs	r3, #2
 8005cdc:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8005cde:	68bb      	ldr	r3, [r7, #8]
 8005ce0:	2b01      	cmp	r3, #1
 8005ce2:	f240 8102 	bls.w	8005eea <put_fat+0x21c>
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	69db      	ldr	r3, [r3, #28]
 8005cea:	68ba      	ldr	r2, [r7, #8]
 8005cec:	429a      	cmp	r2, r3
 8005cee:	f080 80fc 	bcs.w	8005eea <put_fat+0x21c>
		switch (fs->fs_type) {
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	781b      	ldrb	r3, [r3, #0]
 8005cf6:	2b03      	cmp	r3, #3
 8005cf8:	f000 80b6 	beq.w	8005e68 <put_fat+0x19a>
 8005cfc:	2b03      	cmp	r3, #3
 8005cfe:	f300 80fd 	bgt.w	8005efc <put_fat+0x22e>
 8005d02:	2b01      	cmp	r3, #1
 8005d04:	d003      	beq.n	8005d0e <put_fat+0x40>
 8005d06:	2b02      	cmp	r3, #2
 8005d08:	f000 8083 	beq.w	8005e12 <put_fat+0x144>
 8005d0c:	e0f6      	b.n	8005efc <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8005d0e:	68bb      	ldr	r3, [r7, #8]
 8005d10:	61bb      	str	r3, [r7, #24]
 8005d12:	69bb      	ldr	r3, [r7, #24]
 8005d14:	085b      	lsrs	r3, r3, #1
 8005d16:	69ba      	ldr	r2, [r7, #24]
 8005d18:	4413      	add	r3, r2
 8005d1a:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	899b      	ldrh	r3, [r3, #12]
 8005d24:	4619      	mov	r1, r3
 8005d26:	69bb      	ldr	r3, [r7, #24]
 8005d28:	fbb3 f3f1 	udiv	r3, r3, r1
 8005d2c:	4413      	add	r3, r2
 8005d2e:	4619      	mov	r1, r3
 8005d30:	68f8      	ldr	r0, [r7, #12]
 8005d32:	f7ff fe3b 	bl	80059ac <move_window>
 8005d36:	4603      	mov	r3, r0
 8005d38:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005d3a:	7ffb      	ldrb	r3, [r7, #31]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	f040 80d6 	bne.w	8005eee <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005d48:	69bb      	ldr	r3, [r7, #24]
 8005d4a:	1c5a      	adds	r2, r3, #1
 8005d4c:	61ba      	str	r2, [r7, #24]
 8005d4e:	68fa      	ldr	r2, [r7, #12]
 8005d50:	8992      	ldrh	r2, [r2, #12]
 8005d52:	fbb3 f0f2 	udiv	r0, r3, r2
 8005d56:	fb00 f202 	mul.w	r2, r0, r2
 8005d5a:	1a9b      	subs	r3, r3, r2
 8005d5c:	440b      	add	r3, r1
 8005d5e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8005d60:	68bb      	ldr	r3, [r7, #8]
 8005d62:	f003 0301 	and.w	r3, r3, #1
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d00d      	beq.n	8005d86 <put_fat+0xb8>
 8005d6a:	697b      	ldr	r3, [r7, #20]
 8005d6c:	781b      	ldrb	r3, [r3, #0]
 8005d6e:	b25b      	sxtb	r3, r3
 8005d70:	f003 030f 	and.w	r3, r3, #15
 8005d74:	b25a      	sxtb	r2, r3
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	b2db      	uxtb	r3, r3
 8005d7a:	011b      	lsls	r3, r3, #4
 8005d7c:	b25b      	sxtb	r3, r3
 8005d7e:	4313      	orrs	r3, r2
 8005d80:	b25b      	sxtb	r3, r3
 8005d82:	b2db      	uxtb	r3, r3
 8005d84:	e001      	b.n	8005d8a <put_fat+0xbc>
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	b2db      	uxtb	r3, r3
 8005d8a:	697a      	ldr	r2, [r7, #20]
 8005d8c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	2201      	movs	r2, #1
 8005d92:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	899b      	ldrh	r3, [r3, #12]
 8005d9c:	4619      	mov	r1, r3
 8005d9e:	69bb      	ldr	r3, [r7, #24]
 8005da0:	fbb3 f3f1 	udiv	r3, r3, r1
 8005da4:	4413      	add	r3, r2
 8005da6:	4619      	mov	r1, r3
 8005da8:	68f8      	ldr	r0, [r7, #12]
 8005daa:	f7ff fdff 	bl	80059ac <move_window>
 8005dae:	4603      	mov	r3, r0
 8005db0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005db2:	7ffb      	ldrb	r3, [r7, #31]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	f040 809c 	bne.w	8005ef2 <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	899b      	ldrh	r3, [r3, #12]
 8005dc4:	461a      	mov	r2, r3
 8005dc6:	69bb      	ldr	r3, [r7, #24]
 8005dc8:	fbb3 f0f2 	udiv	r0, r3, r2
 8005dcc:	fb00 f202 	mul.w	r2, r0, r2
 8005dd0:	1a9b      	subs	r3, r3, r2
 8005dd2:	440b      	add	r3, r1
 8005dd4:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8005dd6:	68bb      	ldr	r3, [r7, #8]
 8005dd8:	f003 0301 	and.w	r3, r3, #1
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d003      	beq.n	8005de8 <put_fat+0x11a>
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	091b      	lsrs	r3, r3, #4
 8005de4:	b2db      	uxtb	r3, r3
 8005de6:	e00e      	b.n	8005e06 <put_fat+0x138>
 8005de8:	697b      	ldr	r3, [r7, #20]
 8005dea:	781b      	ldrb	r3, [r3, #0]
 8005dec:	b25b      	sxtb	r3, r3
 8005dee:	f023 030f 	bic.w	r3, r3, #15
 8005df2:	b25a      	sxtb	r2, r3
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	0a1b      	lsrs	r3, r3, #8
 8005df8:	b25b      	sxtb	r3, r3
 8005dfa:	f003 030f 	and.w	r3, r3, #15
 8005dfe:	b25b      	sxtb	r3, r3
 8005e00:	4313      	orrs	r3, r2
 8005e02:	b25b      	sxtb	r3, r3
 8005e04:	b2db      	uxtb	r3, r3
 8005e06:	697a      	ldr	r2, [r7, #20]
 8005e08:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	2201      	movs	r2, #1
 8005e0e:	70da      	strb	r2, [r3, #3]
			break;
 8005e10:	e074      	b.n	8005efc <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	899b      	ldrh	r3, [r3, #12]
 8005e1a:	085b      	lsrs	r3, r3, #1
 8005e1c:	b29b      	uxth	r3, r3
 8005e1e:	4619      	mov	r1, r3
 8005e20:	68bb      	ldr	r3, [r7, #8]
 8005e22:	fbb3 f3f1 	udiv	r3, r3, r1
 8005e26:	4413      	add	r3, r2
 8005e28:	4619      	mov	r1, r3
 8005e2a:	68f8      	ldr	r0, [r7, #12]
 8005e2c:	f7ff fdbe 	bl	80059ac <move_window>
 8005e30:	4603      	mov	r3, r0
 8005e32:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005e34:	7ffb      	ldrb	r3, [r7, #31]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d15d      	bne.n	8005ef6 <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005e40:	68bb      	ldr	r3, [r7, #8]
 8005e42:	005b      	lsls	r3, r3, #1
 8005e44:	68fa      	ldr	r2, [r7, #12]
 8005e46:	8992      	ldrh	r2, [r2, #12]
 8005e48:	fbb3 f0f2 	udiv	r0, r3, r2
 8005e4c:	fb00 f202 	mul.w	r2, r0, r2
 8005e50:	1a9b      	subs	r3, r3, r2
 8005e52:	440b      	add	r3, r1
 8005e54:	687a      	ldr	r2, [r7, #4]
 8005e56:	b292      	uxth	r2, r2
 8005e58:	4611      	mov	r1, r2
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	f7ff fb31 	bl	80054c2 <st_word>
			fs->wflag = 1;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	2201      	movs	r2, #1
 8005e64:	70da      	strb	r2, [r3, #3]
			break;
 8005e66:	e049      	b.n	8005efc <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	899b      	ldrh	r3, [r3, #12]
 8005e70:	089b      	lsrs	r3, r3, #2
 8005e72:	b29b      	uxth	r3, r3
 8005e74:	4619      	mov	r1, r3
 8005e76:	68bb      	ldr	r3, [r7, #8]
 8005e78:	fbb3 f3f1 	udiv	r3, r3, r1
 8005e7c:	4413      	add	r3, r2
 8005e7e:	4619      	mov	r1, r3
 8005e80:	68f8      	ldr	r0, [r7, #12]
 8005e82:	f7ff fd93 	bl	80059ac <move_window>
 8005e86:	4603      	mov	r3, r0
 8005e88:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005e8a:	7ffb      	ldrb	r3, [r7, #31]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d134      	bne.n	8005efa <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005e9c:	68bb      	ldr	r3, [r7, #8]
 8005e9e:	009b      	lsls	r3, r3, #2
 8005ea0:	68fa      	ldr	r2, [r7, #12]
 8005ea2:	8992      	ldrh	r2, [r2, #12]
 8005ea4:	fbb3 f0f2 	udiv	r0, r3, r2
 8005ea8:	fb00 f202 	mul.w	r2, r0, r2
 8005eac:	1a9b      	subs	r3, r3, r2
 8005eae:	440b      	add	r3, r1
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	f7ff fae3 	bl	800547c <ld_dword>
 8005eb6:	4603      	mov	r3, r0
 8005eb8:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8005ebc:	4323      	orrs	r3, r4
 8005ebe:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005ec6:	68bb      	ldr	r3, [r7, #8]
 8005ec8:	009b      	lsls	r3, r3, #2
 8005eca:	68fa      	ldr	r2, [r7, #12]
 8005ecc:	8992      	ldrh	r2, [r2, #12]
 8005ece:	fbb3 f0f2 	udiv	r0, r3, r2
 8005ed2:	fb00 f202 	mul.w	r2, r0, r2
 8005ed6:	1a9b      	subs	r3, r3, r2
 8005ed8:	440b      	add	r3, r1
 8005eda:	6879      	ldr	r1, [r7, #4]
 8005edc:	4618      	mov	r0, r3
 8005ede:	f7ff fb0b 	bl	80054f8 <st_dword>
			fs->wflag = 1;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	2201      	movs	r2, #1
 8005ee6:	70da      	strb	r2, [r3, #3]
			break;
 8005ee8:	e008      	b.n	8005efc <put_fat+0x22e>
		}
	}
 8005eea:	bf00      	nop
 8005eec:	e006      	b.n	8005efc <put_fat+0x22e>
			if (res != FR_OK) break;
 8005eee:	bf00      	nop
 8005ef0:	e004      	b.n	8005efc <put_fat+0x22e>
			if (res != FR_OK) break;
 8005ef2:	bf00      	nop
 8005ef4:	e002      	b.n	8005efc <put_fat+0x22e>
			if (res != FR_OK) break;
 8005ef6:	bf00      	nop
 8005ef8:	e000      	b.n	8005efc <put_fat+0x22e>
			if (res != FR_OK) break;
 8005efa:	bf00      	nop
	return res;
 8005efc:	7ffb      	ldrb	r3, [r7, #31]
}
 8005efe:	4618      	mov	r0, r3
 8005f00:	3724      	adds	r7, #36	; 0x24
 8005f02:	46bd      	mov	sp, r7
 8005f04:	bd90      	pop	{r4, r7, pc}

08005f06 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8005f06:	b580      	push	{r7, lr}
 8005f08:	b088      	sub	sp, #32
 8005f0a:	af00      	add	r7, sp, #0
 8005f0c:	60f8      	str	r0, [r7, #12]
 8005f0e:	60b9      	str	r1, [r7, #8]
 8005f10:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8005f12:	2300      	movs	r3, #0
 8005f14:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8005f1c:	68bb      	ldr	r3, [r7, #8]
 8005f1e:	2b01      	cmp	r3, #1
 8005f20:	d904      	bls.n	8005f2c <remove_chain+0x26>
 8005f22:	69bb      	ldr	r3, [r7, #24]
 8005f24:	69db      	ldr	r3, [r3, #28]
 8005f26:	68ba      	ldr	r2, [r7, #8]
 8005f28:	429a      	cmp	r2, r3
 8005f2a:	d301      	bcc.n	8005f30 <remove_chain+0x2a>
 8005f2c:	2302      	movs	r3, #2
 8005f2e:	e04b      	b.n	8005fc8 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d00c      	beq.n	8005f50 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8005f36:	f04f 32ff 	mov.w	r2, #4294967295
 8005f3a:	6879      	ldr	r1, [r7, #4]
 8005f3c:	69b8      	ldr	r0, [r7, #24]
 8005f3e:	f7ff fec6 	bl	8005cce <put_fat>
 8005f42:	4603      	mov	r3, r0
 8005f44:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8005f46:	7ffb      	ldrb	r3, [r7, #31]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d001      	beq.n	8005f50 <remove_chain+0x4a>
 8005f4c:	7ffb      	ldrb	r3, [r7, #31]
 8005f4e:	e03b      	b.n	8005fc8 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8005f50:	68b9      	ldr	r1, [r7, #8]
 8005f52:	68f8      	ldr	r0, [r7, #12]
 8005f54:	f7ff fde7 	bl	8005b26 <get_fat>
 8005f58:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8005f5a:	697b      	ldr	r3, [r7, #20]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d031      	beq.n	8005fc4 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8005f60:	697b      	ldr	r3, [r7, #20]
 8005f62:	2b01      	cmp	r3, #1
 8005f64:	d101      	bne.n	8005f6a <remove_chain+0x64>
 8005f66:	2302      	movs	r3, #2
 8005f68:	e02e      	b.n	8005fc8 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8005f6a:	697b      	ldr	r3, [r7, #20]
 8005f6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f70:	d101      	bne.n	8005f76 <remove_chain+0x70>
 8005f72:	2301      	movs	r3, #1
 8005f74:	e028      	b.n	8005fc8 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8005f76:	2200      	movs	r2, #0
 8005f78:	68b9      	ldr	r1, [r7, #8]
 8005f7a:	69b8      	ldr	r0, [r7, #24]
 8005f7c:	f7ff fea7 	bl	8005cce <put_fat>
 8005f80:	4603      	mov	r3, r0
 8005f82:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8005f84:	7ffb      	ldrb	r3, [r7, #31]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d001      	beq.n	8005f8e <remove_chain+0x88>
 8005f8a:	7ffb      	ldrb	r3, [r7, #31]
 8005f8c:	e01c      	b.n	8005fc8 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8005f8e:	69bb      	ldr	r3, [r7, #24]
 8005f90:	699a      	ldr	r2, [r3, #24]
 8005f92:	69bb      	ldr	r3, [r7, #24]
 8005f94:	69db      	ldr	r3, [r3, #28]
 8005f96:	3b02      	subs	r3, #2
 8005f98:	429a      	cmp	r2, r3
 8005f9a:	d20b      	bcs.n	8005fb4 <remove_chain+0xae>
			fs->free_clst++;
 8005f9c:	69bb      	ldr	r3, [r7, #24]
 8005f9e:	699b      	ldr	r3, [r3, #24]
 8005fa0:	1c5a      	adds	r2, r3, #1
 8005fa2:	69bb      	ldr	r3, [r7, #24]
 8005fa4:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8005fa6:	69bb      	ldr	r3, [r7, #24]
 8005fa8:	791b      	ldrb	r3, [r3, #4]
 8005faa:	f043 0301 	orr.w	r3, r3, #1
 8005fae:	b2da      	uxtb	r2, r3
 8005fb0:	69bb      	ldr	r3, [r7, #24]
 8005fb2:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8005fb4:	697b      	ldr	r3, [r7, #20]
 8005fb6:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8005fb8:	69bb      	ldr	r3, [r7, #24]
 8005fba:	69db      	ldr	r3, [r3, #28]
 8005fbc:	68ba      	ldr	r2, [r7, #8]
 8005fbe:	429a      	cmp	r2, r3
 8005fc0:	d3c6      	bcc.n	8005f50 <remove_chain+0x4a>
 8005fc2:	e000      	b.n	8005fc6 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8005fc4:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8005fc6:	2300      	movs	r3, #0
}
 8005fc8:	4618      	mov	r0, r3
 8005fca:	3720      	adds	r7, #32
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	bd80      	pop	{r7, pc}

08005fd0 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b088      	sub	sp, #32
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
 8005fd8:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d10d      	bne.n	8006002 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8005fe6:	693b      	ldr	r3, [r7, #16]
 8005fe8:	695b      	ldr	r3, [r3, #20]
 8005fea:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8005fec:	69bb      	ldr	r3, [r7, #24]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d004      	beq.n	8005ffc <create_chain+0x2c>
 8005ff2:	693b      	ldr	r3, [r7, #16]
 8005ff4:	69db      	ldr	r3, [r3, #28]
 8005ff6:	69ba      	ldr	r2, [r7, #24]
 8005ff8:	429a      	cmp	r2, r3
 8005ffa:	d31b      	bcc.n	8006034 <create_chain+0x64>
 8005ffc:	2301      	movs	r3, #1
 8005ffe:	61bb      	str	r3, [r7, #24]
 8006000:	e018      	b.n	8006034 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8006002:	6839      	ldr	r1, [r7, #0]
 8006004:	6878      	ldr	r0, [r7, #4]
 8006006:	f7ff fd8e 	bl	8005b26 <get_fat>
 800600a:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	2b01      	cmp	r3, #1
 8006010:	d801      	bhi.n	8006016 <create_chain+0x46>
 8006012:	2301      	movs	r3, #1
 8006014:	e070      	b.n	80060f8 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	f1b3 3fff 	cmp.w	r3, #4294967295
 800601c:	d101      	bne.n	8006022 <create_chain+0x52>
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	e06a      	b.n	80060f8 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8006022:	693b      	ldr	r3, [r7, #16]
 8006024:	69db      	ldr	r3, [r3, #28]
 8006026:	68fa      	ldr	r2, [r7, #12]
 8006028:	429a      	cmp	r2, r3
 800602a:	d201      	bcs.n	8006030 <create_chain+0x60>
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	e063      	b.n	80060f8 <create_chain+0x128>
		scl = clst;
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8006034:	69bb      	ldr	r3, [r7, #24]
 8006036:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8006038:	69fb      	ldr	r3, [r7, #28]
 800603a:	3301      	adds	r3, #1
 800603c:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800603e:	693b      	ldr	r3, [r7, #16]
 8006040:	69db      	ldr	r3, [r3, #28]
 8006042:	69fa      	ldr	r2, [r7, #28]
 8006044:	429a      	cmp	r2, r3
 8006046:	d307      	bcc.n	8006058 <create_chain+0x88>
				ncl = 2;
 8006048:	2302      	movs	r3, #2
 800604a:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800604c:	69fa      	ldr	r2, [r7, #28]
 800604e:	69bb      	ldr	r3, [r7, #24]
 8006050:	429a      	cmp	r2, r3
 8006052:	d901      	bls.n	8006058 <create_chain+0x88>
 8006054:	2300      	movs	r3, #0
 8006056:	e04f      	b.n	80060f8 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8006058:	69f9      	ldr	r1, [r7, #28]
 800605a:	6878      	ldr	r0, [r7, #4]
 800605c:	f7ff fd63 	bl	8005b26 <get_fat>
 8006060:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d00e      	beq.n	8006086 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	2b01      	cmp	r3, #1
 800606c:	d003      	beq.n	8006076 <create_chain+0xa6>
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006074:	d101      	bne.n	800607a <create_chain+0xaa>
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	e03e      	b.n	80060f8 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800607a:	69fa      	ldr	r2, [r7, #28]
 800607c:	69bb      	ldr	r3, [r7, #24]
 800607e:	429a      	cmp	r2, r3
 8006080:	d1da      	bne.n	8006038 <create_chain+0x68>
 8006082:	2300      	movs	r3, #0
 8006084:	e038      	b.n	80060f8 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8006086:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8006088:	f04f 32ff 	mov.w	r2, #4294967295
 800608c:	69f9      	ldr	r1, [r7, #28]
 800608e:	6938      	ldr	r0, [r7, #16]
 8006090:	f7ff fe1d 	bl	8005cce <put_fat>
 8006094:	4603      	mov	r3, r0
 8006096:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8006098:	7dfb      	ldrb	r3, [r7, #23]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d109      	bne.n	80060b2 <create_chain+0xe2>
 800609e:	683b      	ldr	r3, [r7, #0]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d006      	beq.n	80060b2 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80060a4:	69fa      	ldr	r2, [r7, #28]
 80060a6:	6839      	ldr	r1, [r7, #0]
 80060a8:	6938      	ldr	r0, [r7, #16]
 80060aa:	f7ff fe10 	bl	8005cce <put_fat>
 80060ae:	4603      	mov	r3, r0
 80060b0:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80060b2:	7dfb      	ldrb	r3, [r7, #23]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d116      	bne.n	80060e6 <create_chain+0x116>
		fs->last_clst = ncl;
 80060b8:	693b      	ldr	r3, [r7, #16]
 80060ba:	69fa      	ldr	r2, [r7, #28]
 80060bc:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80060be:	693b      	ldr	r3, [r7, #16]
 80060c0:	699a      	ldr	r2, [r3, #24]
 80060c2:	693b      	ldr	r3, [r7, #16]
 80060c4:	69db      	ldr	r3, [r3, #28]
 80060c6:	3b02      	subs	r3, #2
 80060c8:	429a      	cmp	r2, r3
 80060ca:	d804      	bhi.n	80060d6 <create_chain+0x106>
 80060cc:	693b      	ldr	r3, [r7, #16]
 80060ce:	699b      	ldr	r3, [r3, #24]
 80060d0:	1e5a      	subs	r2, r3, #1
 80060d2:	693b      	ldr	r3, [r7, #16]
 80060d4:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 80060d6:	693b      	ldr	r3, [r7, #16]
 80060d8:	791b      	ldrb	r3, [r3, #4]
 80060da:	f043 0301 	orr.w	r3, r3, #1
 80060de:	b2da      	uxtb	r2, r3
 80060e0:	693b      	ldr	r3, [r7, #16]
 80060e2:	711a      	strb	r2, [r3, #4]
 80060e4:	e007      	b.n	80060f6 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80060e6:	7dfb      	ldrb	r3, [r7, #23]
 80060e8:	2b01      	cmp	r3, #1
 80060ea:	d102      	bne.n	80060f2 <create_chain+0x122>
 80060ec:	f04f 33ff 	mov.w	r3, #4294967295
 80060f0:	e000      	b.n	80060f4 <create_chain+0x124>
 80060f2:	2301      	movs	r3, #1
 80060f4:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80060f6:	69fb      	ldr	r3, [r7, #28]
}
 80060f8:	4618      	mov	r0, r3
 80060fa:	3720      	adds	r7, #32
 80060fc:	46bd      	mov	sp, r7
 80060fe:	bd80      	pop	{r7, pc}

08006100 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8006100:	b480      	push	{r7}
 8006102:	b087      	sub	sp, #28
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
 8006108:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006114:	3304      	adds	r3, #4
 8006116:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	899b      	ldrh	r3, [r3, #12]
 800611c:	461a      	mov	r2, r3
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	fbb3 f3f2 	udiv	r3, r3, r2
 8006124:	68fa      	ldr	r2, [r7, #12]
 8006126:	8952      	ldrh	r2, [r2, #10]
 8006128:	fbb3 f3f2 	udiv	r3, r3, r2
 800612c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800612e:	693b      	ldr	r3, [r7, #16]
 8006130:	1d1a      	adds	r2, r3, #4
 8006132:	613a      	str	r2, [r7, #16]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d101      	bne.n	8006142 <clmt_clust+0x42>
 800613e:	2300      	movs	r3, #0
 8006140:	e010      	b.n	8006164 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8006142:	697a      	ldr	r2, [r7, #20]
 8006144:	68bb      	ldr	r3, [r7, #8]
 8006146:	429a      	cmp	r2, r3
 8006148:	d307      	bcc.n	800615a <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800614a:	697a      	ldr	r2, [r7, #20]
 800614c:	68bb      	ldr	r3, [r7, #8]
 800614e:	1ad3      	subs	r3, r2, r3
 8006150:	617b      	str	r3, [r7, #20]
 8006152:	693b      	ldr	r3, [r7, #16]
 8006154:	3304      	adds	r3, #4
 8006156:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006158:	e7e9      	b.n	800612e <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800615a:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800615c:	693b      	ldr	r3, [r7, #16]
 800615e:	681a      	ldr	r2, [r3, #0]
 8006160:	697b      	ldr	r3, [r7, #20]
 8006162:	4413      	add	r3, r2
}
 8006164:	4618      	mov	r0, r3
 8006166:	371c      	adds	r7, #28
 8006168:	46bd      	mov	sp, r7
 800616a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616e:	4770      	bx	lr

08006170 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8006170:	b580      	push	{r7, lr}
 8006172:	b086      	sub	sp, #24
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
 8006178:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006186:	d204      	bcs.n	8006192 <dir_sdi+0x22>
 8006188:	683b      	ldr	r3, [r7, #0]
 800618a:	f003 031f 	and.w	r3, r3, #31
 800618e:	2b00      	cmp	r3, #0
 8006190:	d001      	beq.n	8006196 <dir_sdi+0x26>
		return FR_INT_ERR;
 8006192:	2302      	movs	r3, #2
 8006194:	e071      	b.n	800627a <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	683a      	ldr	r2, [r7, #0]
 800619a:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	689b      	ldr	r3, [r3, #8]
 80061a0:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80061a2:	697b      	ldr	r3, [r7, #20]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d106      	bne.n	80061b6 <dir_sdi+0x46>
 80061a8:	693b      	ldr	r3, [r7, #16]
 80061aa:	781b      	ldrb	r3, [r3, #0]
 80061ac:	2b02      	cmp	r3, #2
 80061ae:	d902      	bls.n	80061b6 <dir_sdi+0x46>
		clst = fs->dirbase;
 80061b0:	693b      	ldr	r3, [r7, #16]
 80061b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061b4:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80061b6:	697b      	ldr	r3, [r7, #20]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d10c      	bne.n	80061d6 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	095b      	lsrs	r3, r3, #5
 80061c0:	693a      	ldr	r2, [r7, #16]
 80061c2:	8912      	ldrh	r2, [r2, #8]
 80061c4:	4293      	cmp	r3, r2
 80061c6:	d301      	bcc.n	80061cc <dir_sdi+0x5c>
 80061c8:	2302      	movs	r3, #2
 80061ca:	e056      	b.n	800627a <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 80061cc:	693b      	ldr	r3, [r7, #16]
 80061ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	61da      	str	r2, [r3, #28]
 80061d4:	e02d      	b.n	8006232 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80061d6:	693b      	ldr	r3, [r7, #16]
 80061d8:	895b      	ldrh	r3, [r3, #10]
 80061da:	461a      	mov	r2, r3
 80061dc:	693b      	ldr	r3, [r7, #16]
 80061de:	899b      	ldrh	r3, [r3, #12]
 80061e0:	fb02 f303 	mul.w	r3, r2, r3
 80061e4:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80061e6:	e019      	b.n	800621c <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	6979      	ldr	r1, [r7, #20]
 80061ec:	4618      	mov	r0, r3
 80061ee:	f7ff fc9a 	bl	8005b26 <get_fat>
 80061f2:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80061f4:	697b      	ldr	r3, [r7, #20]
 80061f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061fa:	d101      	bne.n	8006200 <dir_sdi+0x90>
 80061fc:	2301      	movs	r3, #1
 80061fe:	e03c      	b.n	800627a <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8006200:	697b      	ldr	r3, [r7, #20]
 8006202:	2b01      	cmp	r3, #1
 8006204:	d904      	bls.n	8006210 <dir_sdi+0xa0>
 8006206:	693b      	ldr	r3, [r7, #16]
 8006208:	69db      	ldr	r3, [r3, #28]
 800620a:	697a      	ldr	r2, [r7, #20]
 800620c:	429a      	cmp	r2, r3
 800620e:	d301      	bcc.n	8006214 <dir_sdi+0xa4>
 8006210:	2302      	movs	r3, #2
 8006212:	e032      	b.n	800627a <dir_sdi+0x10a>
			ofs -= csz;
 8006214:	683a      	ldr	r2, [r7, #0]
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	1ad3      	subs	r3, r2, r3
 800621a:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800621c:	683a      	ldr	r2, [r7, #0]
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	429a      	cmp	r2, r3
 8006222:	d2e1      	bcs.n	80061e8 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8006224:	6979      	ldr	r1, [r7, #20]
 8006226:	6938      	ldr	r0, [r7, #16]
 8006228:	f7ff fc5e 	bl	8005ae8 <clust2sect>
 800622c:	4602      	mov	r2, r0
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	697a      	ldr	r2, [r7, #20]
 8006236:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	69db      	ldr	r3, [r3, #28]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d101      	bne.n	8006244 <dir_sdi+0xd4>
 8006240:	2302      	movs	r3, #2
 8006242:	e01a      	b.n	800627a <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	69da      	ldr	r2, [r3, #28]
 8006248:	693b      	ldr	r3, [r7, #16]
 800624a:	899b      	ldrh	r3, [r3, #12]
 800624c:	4619      	mov	r1, r3
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	fbb3 f3f1 	udiv	r3, r3, r1
 8006254:	441a      	add	r2, r3
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800625a:	693b      	ldr	r3, [r7, #16]
 800625c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006260:	693b      	ldr	r3, [r7, #16]
 8006262:	899b      	ldrh	r3, [r3, #12]
 8006264:	461a      	mov	r2, r3
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	fbb3 f0f2 	udiv	r0, r3, r2
 800626c:	fb00 f202 	mul.w	r2, r0, r2
 8006270:	1a9b      	subs	r3, r3, r2
 8006272:	18ca      	adds	r2, r1, r3
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006278:	2300      	movs	r3, #0
}
 800627a:	4618      	mov	r0, r3
 800627c:	3718      	adds	r7, #24
 800627e:	46bd      	mov	sp, r7
 8006280:	bd80      	pop	{r7, pc}

08006282 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8006282:	b580      	push	{r7, lr}
 8006284:	b086      	sub	sp, #24
 8006286:	af00      	add	r7, sp, #0
 8006288:	6078      	str	r0, [r7, #4]
 800628a:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	695b      	ldr	r3, [r3, #20]
 8006296:	3320      	adds	r3, #32
 8006298:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	69db      	ldr	r3, [r3, #28]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d003      	beq.n	80062aa <dir_next+0x28>
 80062a2:	68bb      	ldr	r3, [r7, #8]
 80062a4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80062a8:	d301      	bcc.n	80062ae <dir_next+0x2c>
 80062aa:	2304      	movs	r3, #4
 80062ac:	e0bb      	b.n	8006426 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	899b      	ldrh	r3, [r3, #12]
 80062b2:	461a      	mov	r2, r3
 80062b4:	68bb      	ldr	r3, [r7, #8]
 80062b6:	fbb3 f1f2 	udiv	r1, r3, r2
 80062ba:	fb01 f202 	mul.w	r2, r1, r2
 80062be:	1a9b      	subs	r3, r3, r2
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	f040 809d 	bne.w	8006400 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	69db      	ldr	r3, [r3, #28]
 80062ca:	1c5a      	adds	r2, r3, #1
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	699b      	ldr	r3, [r3, #24]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d10b      	bne.n	80062f0 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80062d8:	68bb      	ldr	r3, [r7, #8]
 80062da:	095b      	lsrs	r3, r3, #5
 80062dc:	68fa      	ldr	r2, [r7, #12]
 80062de:	8912      	ldrh	r2, [r2, #8]
 80062e0:	4293      	cmp	r3, r2
 80062e2:	f0c0 808d 	bcc.w	8006400 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2200      	movs	r2, #0
 80062ea:	61da      	str	r2, [r3, #28]
 80062ec:	2304      	movs	r3, #4
 80062ee:	e09a      	b.n	8006426 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	899b      	ldrh	r3, [r3, #12]
 80062f4:	461a      	mov	r2, r3
 80062f6:	68bb      	ldr	r3, [r7, #8]
 80062f8:	fbb3 f3f2 	udiv	r3, r3, r2
 80062fc:	68fa      	ldr	r2, [r7, #12]
 80062fe:	8952      	ldrh	r2, [r2, #10]
 8006300:	3a01      	subs	r2, #1
 8006302:	4013      	ands	r3, r2
 8006304:	2b00      	cmp	r3, #0
 8006306:	d17b      	bne.n	8006400 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8006308:	687a      	ldr	r2, [r7, #4]
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	699b      	ldr	r3, [r3, #24]
 800630e:	4619      	mov	r1, r3
 8006310:	4610      	mov	r0, r2
 8006312:	f7ff fc08 	bl	8005b26 <get_fat>
 8006316:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8006318:	697b      	ldr	r3, [r7, #20]
 800631a:	2b01      	cmp	r3, #1
 800631c:	d801      	bhi.n	8006322 <dir_next+0xa0>
 800631e:	2302      	movs	r3, #2
 8006320:	e081      	b.n	8006426 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8006322:	697b      	ldr	r3, [r7, #20]
 8006324:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006328:	d101      	bne.n	800632e <dir_next+0xac>
 800632a:	2301      	movs	r3, #1
 800632c:	e07b      	b.n	8006426 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	69db      	ldr	r3, [r3, #28]
 8006332:	697a      	ldr	r2, [r7, #20]
 8006334:	429a      	cmp	r2, r3
 8006336:	d359      	bcc.n	80063ec <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d104      	bne.n	8006348 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	2200      	movs	r2, #0
 8006342:	61da      	str	r2, [r3, #28]
 8006344:	2304      	movs	r3, #4
 8006346:	e06e      	b.n	8006426 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8006348:	687a      	ldr	r2, [r7, #4]
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	699b      	ldr	r3, [r3, #24]
 800634e:	4619      	mov	r1, r3
 8006350:	4610      	mov	r0, r2
 8006352:	f7ff fe3d 	bl	8005fd0 <create_chain>
 8006356:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8006358:	697b      	ldr	r3, [r7, #20]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d101      	bne.n	8006362 <dir_next+0xe0>
 800635e:	2307      	movs	r3, #7
 8006360:	e061      	b.n	8006426 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8006362:	697b      	ldr	r3, [r7, #20]
 8006364:	2b01      	cmp	r3, #1
 8006366:	d101      	bne.n	800636c <dir_next+0xea>
 8006368:	2302      	movs	r3, #2
 800636a:	e05c      	b.n	8006426 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800636c:	697b      	ldr	r3, [r7, #20]
 800636e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006372:	d101      	bne.n	8006378 <dir_next+0xf6>
 8006374:	2301      	movs	r3, #1
 8006376:	e056      	b.n	8006426 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8006378:	68f8      	ldr	r0, [r7, #12]
 800637a:	f7ff fad3 	bl	8005924 <sync_window>
 800637e:	4603      	mov	r3, r0
 8006380:	2b00      	cmp	r3, #0
 8006382:	d001      	beq.n	8006388 <dir_next+0x106>
 8006384:	2301      	movs	r3, #1
 8006386:	e04e      	b.n	8006426 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	899b      	ldrh	r3, [r3, #12]
 8006392:	461a      	mov	r2, r3
 8006394:	2100      	movs	r1, #0
 8006396:	f7ff f8fc 	bl	8005592 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800639a:	2300      	movs	r3, #0
 800639c:	613b      	str	r3, [r7, #16]
 800639e:	6979      	ldr	r1, [r7, #20]
 80063a0:	68f8      	ldr	r0, [r7, #12]
 80063a2:	f7ff fba1 	bl	8005ae8 <clust2sect>
 80063a6:	4602      	mov	r2, r0
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	635a      	str	r2, [r3, #52]	; 0x34
 80063ac:	e012      	b.n	80063d4 <dir_next+0x152>
						fs->wflag = 1;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	2201      	movs	r2, #1
 80063b2:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80063b4:	68f8      	ldr	r0, [r7, #12]
 80063b6:	f7ff fab5 	bl	8005924 <sync_window>
 80063ba:	4603      	mov	r3, r0
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d001      	beq.n	80063c4 <dir_next+0x142>
 80063c0:	2301      	movs	r3, #1
 80063c2:	e030      	b.n	8006426 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80063c4:	693b      	ldr	r3, [r7, #16]
 80063c6:	3301      	adds	r3, #1
 80063c8:	613b      	str	r3, [r7, #16]
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063ce:	1c5a      	adds	r2, r3, #1
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	635a      	str	r2, [r3, #52]	; 0x34
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	895b      	ldrh	r3, [r3, #10]
 80063d8:	461a      	mov	r2, r3
 80063da:	693b      	ldr	r3, [r7, #16]
 80063dc:	4293      	cmp	r3, r2
 80063de:	d3e6      	bcc.n	80063ae <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80063e4:	693b      	ldr	r3, [r7, #16]
 80063e6:	1ad2      	subs	r2, r2, r3
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	697a      	ldr	r2, [r7, #20]
 80063f0:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80063f2:	6979      	ldr	r1, [r7, #20]
 80063f4:	68f8      	ldr	r0, [r7, #12]
 80063f6:	f7ff fb77 	bl	8005ae8 <clust2sect>
 80063fa:	4602      	mov	r2, r0
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	68ba      	ldr	r2, [r7, #8]
 8006404:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	899b      	ldrh	r3, [r3, #12]
 8006410:	461a      	mov	r2, r3
 8006412:	68bb      	ldr	r3, [r7, #8]
 8006414:	fbb3 f0f2 	udiv	r0, r3, r2
 8006418:	fb00 f202 	mul.w	r2, r0, r2
 800641c:	1a9b      	subs	r3, r3, r2
 800641e:	18ca      	adds	r2, r1, r3
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006424:	2300      	movs	r3, #0
}
 8006426:	4618      	mov	r0, r3
 8006428:	3718      	adds	r7, #24
 800642a:	46bd      	mov	sp, r7
 800642c:	bd80      	pop	{r7, pc}

0800642e <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800642e:	b580      	push	{r7, lr}
 8006430:	b086      	sub	sp, #24
 8006432:	af00      	add	r7, sp, #0
 8006434:	6078      	str	r0, [r7, #4]
 8006436:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800643e:	2100      	movs	r1, #0
 8006440:	6878      	ldr	r0, [r7, #4]
 8006442:	f7ff fe95 	bl	8006170 <dir_sdi>
 8006446:	4603      	mov	r3, r0
 8006448:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800644a:	7dfb      	ldrb	r3, [r7, #23]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d12b      	bne.n	80064a8 <dir_alloc+0x7a>
		n = 0;
 8006450:	2300      	movs	r3, #0
 8006452:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	69db      	ldr	r3, [r3, #28]
 8006458:	4619      	mov	r1, r3
 800645a:	68f8      	ldr	r0, [r7, #12]
 800645c:	f7ff faa6 	bl	80059ac <move_window>
 8006460:	4603      	mov	r3, r0
 8006462:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8006464:	7dfb      	ldrb	r3, [r7, #23]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d11d      	bne.n	80064a6 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	6a1b      	ldr	r3, [r3, #32]
 800646e:	781b      	ldrb	r3, [r3, #0]
 8006470:	2be5      	cmp	r3, #229	; 0xe5
 8006472:	d004      	beq.n	800647e <dir_alloc+0x50>
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	6a1b      	ldr	r3, [r3, #32]
 8006478:	781b      	ldrb	r3, [r3, #0]
 800647a:	2b00      	cmp	r3, #0
 800647c:	d107      	bne.n	800648e <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800647e:	693b      	ldr	r3, [r7, #16]
 8006480:	3301      	adds	r3, #1
 8006482:	613b      	str	r3, [r7, #16]
 8006484:	693a      	ldr	r2, [r7, #16]
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	429a      	cmp	r2, r3
 800648a:	d102      	bne.n	8006492 <dir_alloc+0x64>
 800648c:	e00c      	b.n	80064a8 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800648e:	2300      	movs	r3, #0
 8006490:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8006492:	2101      	movs	r1, #1
 8006494:	6878      	ldr	r0, [r7, #4]
 8006496:	f7ff fef4 	bl	8006282 <dir_next>
 800649a:	4603      	mov	r3, r0
 800649c:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800649e:	7dfb      	ldrb	r3, [r7, #23]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d0d7      	beq.n	8006454 <dir_alloc+0x26>
 80064a4:	e000      	b.n	80064a8 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80064a6:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80064a8:	7dfb      	ldrb	r3, [r7, #23]
 80064aa:	2b04      	cmp	r3, #4
 80064ac:	d101      	bne.n	80064b2 <dir_alloc+0x84>
 80064ae:	2307      	movs	r3, #7
 80064b0:	75fb      	strb	r3, [r7, #23]
	return res;
 80064b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80064b4:	4618      	mov	r0, r3
 80064b6:	3718      	adds	r7, #24
 80064b8:	46bd      	mov	sp, r7
 80064ba:	bd80      	pop	{r7, pc}

080064bc <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	b084      	sub	sp, #16
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
 80064c4:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80064c6:	683b      	ldr	r3, [r7, #0]
 80064c8:	331a      	adds	r3, #26
 80064ca:	4618      	mov	r0, r3
 80064cc:	f7fe ffbe 	bl	800544c <ld_word>
 80064d0:	4603      	mov	r3, r0
 80064d2:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	781b      	ldrb	r3, [r3, #0]
 80064d8:	2b03      	cmp	r3, #3
 80064da:	d109      	bne.n	80064f0 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	3314      	adds	r3, #20
 80064e0:	4618      	mov	r0, r3
 80064e2:	f7fe ffb3 	bl	800544c <ld_word>
 80064e6:	4603      	mov	r3, r0
 80064e8:	041b      	lsls	r3, r3, #16
 80064ea:	68fa      	ldr	r2, [r7, #12]
 80064ec:	4313      	orrs	r3, r2
 80064ee:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80064f0:	68fb      	ldr	r3, [r7, #12]
}
 80064f2:	4618      	mov	r0, r3
 80064f4:	3710      	adds	r7, #16
 80064f6:	46bd      	mov	sp, r7
 80064f8:	bd80      	pop	{r7, pc}

080064fa <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80064fa:	b580      	push	{r7, lr}
 80064fc:	b084      	sub	sp, #16
 80064fe:	af00      	add	r7, sp, #0
 8006500:	60f8      	str	r0, [r7, #12]
 8006502:	60b9      	str	r1, [r7, #8]
 8006504:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8006506:	68bb      	ldr	r3, [r7, #8]
 8006508:	331a      	adds	r3, #26
 800650a:	687a      	ldr	r2, [r7, #4]
 800650c:	b292      	uxth	r2, r2
 800650e:	4611      	mov	r1, r2
 8006510:	4618      	mov	r0, r3
 8006512:	f7fe ffd6 	bl	80054c2 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	781b      	ldrb	r3, [r3, #0]
 800651a:	2b03      	cmp	r3, #3
 800651c:	d109      	bne.n	8006532 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800651e:	68bb      	ldr	r3, [r7, #8]
 8006520:	f103 0214 	add.w	r2, r3, #20
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	0c1b      	lsrs	r3, r3, #16
 8006528:	b29b      	uxth	r3, r3
 800652a:	4619      	mov	r1, r3
 800652c:	4610      	mov	r0, r2
 800652e:	f7fe ffc8 	bl	80054c2 <st_word>
	}
}
 8006532:	bf00      	nop
 8006534:	3710      	adds	r7, #16
 8006536:	46bd      	mov	sp, r7
 8006538:	bd80      	pop	{r7, pc}
	...

0800653c <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800653c:	b590      	push	{r4, r7, lr}
 800653e:	b087      	sub	sp, #28
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
 8006544:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	331a      	adds	r3, #26
 800654a:	4618      	mov	r0, r3
 800654c:	f7fe ff7e 	bl	800544c <ld_word>
 8006550:	4603      	mov	r3, r0
 8006552:	2b00      	cmp	r3, #0
 8006554:	d001      	beq.n	800655a <cmp_lfn+0x1e>
 8006556:	2300      	movs	r3, #0
 8006558:	e059      	b.n	800660e <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	781b      	ldrb	r3, [r3, #0]
 800655e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006562:	1e5a      	subs	r2, r3, #1
 8006564:	4613      	mov	r3, r2
 8006566:	005b      	lsls	r3, r3, #1
 8006568:	4413      	add	r3, r2
 800656a:	009b      	lsls	r3, r3, #2
 800656c:	4413      	add	r3, r2
 800656e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8006570:	2301      	movs	r3, #1
 8006572:	81fb      	strh	r3, [r7, #14]
 8006574:	2300      	movs	r3, #0
 8006576:	613b      	str	r3, [r7, #16]
 8006578:	e033      	b.n	80065e2 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800657a:	4a27      	ldr	r2, [pc, #156]	; (8006618 <cmp_lfn+0xdc>)
 800657c:	693b      	ldr	r3, [r7, #16]
 800657e:	4413      	add	r3, r2
 8006580:	781b      	ldrb	r3, [r3, #0]
 8006582:	461a      	mov	r2, r3
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	4413      	add	r3, r2
 8006588:	4618      	mov	r0, r3
 800658a:	f7fe ff5f 	bl	800544c <ld_word>
 800658e:	4603      	mov	r3, r0
 8006590:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8006592:	89fb      	ldrh	r3, [r7, #14]
 8006594:	2b00      	cmp	r3, #0
 8006596:	d01a      	beq.n	80065ce <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8006598:	697b      	ldr	r3, [r7, #20]
 800659a:	2bfe      	cmp	r3, #254	; 0xfe
 800659c:	d812      	bhi.n	80065c4 <cmp_lfn+0x88>
 800659e:	89bb      	ldrh	r3, [r7, #12]
 80065a0:	4618      	mov	r0, r3
 80065a2:	f002 f80b 	bl	80085bc <ff_wtoupper>
 80065a6:	4603      	mov	r3, r0
 80065a8:	461c      	mov	r4, r3
 80065aa:	697b      	ldr	r3, [r7, #20]
 80065ac:	1c5a      	adds	r2, r3, #1
 80065ae:	617a      	str	r2, [r7, #20]
 80065b0:	005b      	lsls	r3, r3, #1
 80065b2:	687a      	ldr	r2, [r7, #4]
 80065b4:	4413      	add	r3, r2
 80065b6:	881b      	ldrh	r3, [r3, #0]
 80065b8:	4618      	mov	r0, r3
 80065ba:	f001 ffff 	bl	80085bc <ff_wtoupper>
 80065be:	4603      	mov	r3, r0
 80065c0:	429c      	cmp	r4, r3
 80065c2:	d001      	beq.n	80065c8 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 80065c4:	2300      	movs	r3, #0
 80065c6:	e022      	b.n	800660e <cmp_lfn+0xd2>
			}
			wc = uc;
 80065c8:	89bb      	ldrh	r3, [r7, #12]
 80065ca:	81fb      	strh	r3, [r7, #14]
 80065cc:	e006      	b.n	80065dc <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80065ce:	89bb      	ldrh	r3, [r7, #12]
 80065d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80065d4:	4293      	cmp	r3, r2
 80065d6:	d001      	beq.n	80065dc <cmp_lfn+0xa0>
 80065d8:	2300      	movs	r3, #0
 80065da:	e018      	b.n	800660e <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80065dc:	693b      	ldr	r3, [r7, #16]
 80065de:	3301      	adds	r3, #1
 80065e0:	613b      	str	r3, [r7, #16]
 80065e2:	693b      	ldr	r3, [r7, #16]
 80065e4:	2b0c      	cmp	r3, #12
 80065e6:	d9c8      	bls.n	800657a <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	781b      	ldrb	r3, [r3, #0]
 80065ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d00b      	beq.n	800660c <cmp_lfn+0xd0>
 80065f4:	89fb      	ldrh	r3, [r7, #14]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d008      	beq.n	800660c <cmp_lfn+0xd0>
 80065fa:	697b      	ldr	r3, [r7, #20]
 80065fc:	005b      	lsls	r3, r3, #1
 80065fe:	687a      	ldr	r2, [r7, #4]
 8006600:	4413      	add	r3, r2
 8006602:	881b      	ldrh	r3, [r3, #0]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d001      	beq.n	800660c <cmp_lfn+0xd0>
 8006608:	2300      	movs	r3, #0
 800660a:	e000      	b.n	800660e <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800660c:	2301      	movs	r3, #1
}
 800660e:	4618      	mov	r0, r3
 8006610:	371c      	adds	r7, #28
 8006612:	46bd      	mov	sp, r7
 8006614:	bd90      	pop	{r4, r7, pc}
 8006616:	bf00      	nop
 8006618:	0800b850 	.word	0x0800b850

0800661c <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800661c:	b580      	push	{r7, lr}
 800661e:	b088      	sub	sp, #32
 8006620:	af00      	add	r7, sp, #0
 8006622:	60f8      	str	r0, [r7, #12]
 8006624:	60b9      	str	r1, [r7, #8]
 8006626:	4611      	mov	r1, r2
 8006628:	461a      	mov	r2, r3
 800662a:	460b      	mov	r3, r1
 800662c:	71fb      	strb	r3, [r7, #7]
 800662e:	4613      	mov	r3, r2
 8006630:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8006632:	68bb      	ldr	r3, [r7, #8]
 8006634:	330d      	adds	r3, #13
 8006636:	79ba      	ldrb	r2, [r7, #6]
 8006638:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800663a:	68bb      	ldr	r3, [r7, #8]
 800663c:	330b      	adds	r3, #11
 800663e:	220f      	movs	r2, #15
 8006640:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8006642:	68bb      	ldr	r3, [r7, #8]
 8006644:	330c      	adds	r3, #12
 8006646:	2200      	movs	r2, #0
 8006648:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800664a:	68bb      	ldr	r3, [r7, #8]
 800664c:	331a      	adds	r3, #26
 800664e:	2100      	movs	r1, #0
 8006650:	4618      	mov	r0, r3
 8006652:	f7fe ff36 	bl	80054c2 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8006656:	79fb      	ldrb	r3, [r7, #7]
 8006658:	1e5a      	subs	r2, r3, #1
 800665a:	4613      	mov	r3, r2
 800665c:	005b      	lsls	r3, r3, #1
 800665e:	4413      	add	r3, r2
 8006660:	009b      	lsls	r3, r3, #2
 8006662:	4413      	add	r3, r2
 8006664:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8006666:	2300      	movs	r3, #0
 8006668:	82fb      	strh	r3, [r7, #22]
 800666a:	2300      	movs	r3, #0
 800666c:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800666e:	8afb      	ldrh	r3, [r7, #22]
 8006670:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006674:	4293      	cmp	r3, r2
 8006676:	d007      	beq.n	8006688 <put_lfn+0x6c>
 8006678:	69fb      	ldr	r3, [r7, #28]
 800667a:	1c5a      	adds	r2, r3, #1
 800667c:	61fa      	str	r2, [r7, #28]
 800667e:	005b      	lsls	r3, r3, #1
 8006680:	68fa      	ldr	r2, [r7, #12]
 8006682:	4413      	add	r3, r2
 8006684:	881b      	ldrh	r3, [r3, #0]
 8006686:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8006688:	4a17      	ldr	r2, [pc, #92]	; (80066e8 <put_lfn+0xcc>)
 800668a:	69bb      	ldr	r3, [r7, #24]
 800668c:	4413      	add	r3, r2
 800668e:	781b      	ldrb	r3, [r3, #0]
 8006690:	461a      	mov	r2, r3
 8006692:	68bb      	ldr	r3, [r7, #8]
 8006694:	4413      	add	r3, r2
 8006696:	8afa      	ldrh	r2, [r7, #22]
 8006698:	4611      	mov	r1, r2
 800669a:	4618      	mov	r0, r3
 800669c:	f7fe ff11 	bl	80054c2 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 80066a0:	8afb      	ldrh	r3, [r7, #22]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d102      	bne.n	80066ac <put_lfn+0x90>
 80066a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80066aa:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 80066ac:	69bb      	ldr	r3, [r7, #24]
 80066ae:	3301      	adds	r3, #1
 80066b0:	61bb      	str	r3, [r7, #24]
 80066b2:	69bb      	ldr	r3, [r7, #24]
 80066b4:	2b0c      	cmp	r3, #12
 80066b6:	d9da      	bls.n	800666e <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 80066b8:	8afb      	ldrh	r3, [r7, #22]
 80066ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80066be:	4293      	cmp	r3, r2
 80066c0:	d006      	beq.n	80066d0 <put_lfn+0xb4>
 80066c2:	69fb      	ldr	r3, [r7, #28]
 80066c4:	005b      	lsls	r3, r3, #1
 80066c6:	68fa      	ldr	r2, [r7, #12]
 80066c8:	4413      	add	r3, r2
 80066ca:	881b      	ldrh	r3, [r3, #0]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d103      	bne.n	80066d8 <put_lfn+0xbc>
 80066d0:	79fb      	ldrb	r3, [r7, #7]
 80066d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80066d6:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 80066d8:	68bb      	ldr	r3, [r7, #8]
 80066da:	79fa      	ldrb	r2, [r7, #7]
 80066dc:	701a      	strb	r2, [r3, #0]
}
 80066de:	bf00      	nop
 80066e0:	3720      	adds	r7, #32
 80066e2:	46bd      	mov	sp, r7
 80066e4:	bd80      	pop	{r7, pc}
 80066e6:	bf00      	nop
 80066e8:	0800b850 	.word	0x0800b850

080066ec <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 80066ec:	b580      	push	{r7, lr}
 80066ee:	b08c      	sub	sp, #48	; 0x30
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	60f8      	str	r0, [r7, #12]
 80066f4:	60b9      	str	r1, [r7, #8]
 80066f6:	607a      	str	r2, [r7, #4]
 80066f8:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 80066fa:	220b      	movs	r2, #11
 80066fc:	68b9      	ldr	r1, [r7, #8]
 80066fe:	68f8      	ldr	r0, [r7, #12]
 8006700:	f7fe ff26 	bl	8005550 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	2b05      	cmp	r3, #5
 8006708:	d92b      	bls.n	8006762 <gen_numname+0x76>
		sr = seq;
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800670e:	e022      	b.n	8006756 <gen_numname+0x6a>
			wc = *lfn++;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	1c9a      	adds	r2, r3, #2
 8006714:	607a      	str	r2, [r7, #4]
 8006716:	881b      	ldrh	r3, [r3, #0]
 8006718:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800671a:	2300      	movs	r3, #0
 800671c:	62bb      	str	r3, [r7, #40]	; 0x28
 800671e:	e017      	b.n	8006750 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8006720:	69fb      	ldr	r3, [r7, #28]
 8006722:	005a      	lsls	r2, r3, #1
 8006724:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006726:	f003 0301 	and.w	r3, r3, #1
 800672a:	4413      	add	r3, r2
 800672c:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800672e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006730:	085b      	lsrs	r3, r3, #1
 8006732:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8006734:	69fb      	ldr	r3, [r7, #28]
 8006736:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800673a:	2b00      	cmp	r3, #0
 800673c:	d005      	beq.n	800674a <gen_numname+0x5e>
 800673e:	69fb      	ldr	r3, [r7, #28]
 8006740:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8006744:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 8006748:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800674a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800674c:	3301      	adds	r3, #1
 800674e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006752:	2b0f      	cmp	r3, #15
 8006754:	d9e4      	bls.n	8006720 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	881b      	ldrh	r3, [r3, #0]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d1d8      	bne.n	8006710 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800675e:	69fb      	ldr	r3, [r7, #28]
 8006760:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8006762:	2307      	movs	r3, #7
 8006764:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	b2db      	uxtb	r3, r3
 800676a:	f003 030f 	and.w	r3, r3, #15
 800676e:	b2db      	uxtb	r3, r3
 8006770:	3330      	adds	r3, #48	; 0x30
 8006772:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8006776:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800677a:	2b39      	cmp	r3, #57	; 0x39
 800677c:	d904      	bls.n	8006788 <gen_numname+0x9c>
 800677e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006782:	3307      	adds	r3, #7
 8006784:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8006788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800678a:	1e5a      	subs	r2, r3, #1
 800678c:	62ba      	str	r2, [r7, #40]	; 0x28
 800678e:	3330      	adds	r3, #48	; 0x30
 8006790:	443b      	add	r3, r7
 8006792:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8006796:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	091b      	lsrs	r3, r3, #4
 800679e:	603b      	str	r3, [r7, #0]
	} while (seq);
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d1df      	bne.n	8006766 <gen_numname+0x7a>
	ns[i] = '~';
 80067a6:	f107 0214 	add.w	r2, r7, #20
 80067aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067ac:	4413      	add	r3, r2
 80067ae:	227e      	movs	r2, #126	; 0x7e
 80067b0:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 80067b2:	2300      	movs	r3, #0
 80067b4:	627b      	str	r3, [r7, #36]	; 0x24
 80067b6:	e002      	b.n	80067be <gen_numname+0xd2>
 80067b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ba:	3301      	adds	r3, #1
 80067bc:	627b      	str	r3, [r7, #36]	; 0x24
 80067be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067c2:	429a      	cmp	r2, r3
 80067c4:	d205      	bcs.n	80067d2 <gen_numname+0xe6>
 80067c6:	68fa      	ldr	r2, [r7, #12]
 80067c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ca:	4413      	add	r3, r2
 80067cc:	781b      	ldrb	r3, [r3, #0]
 80067ce:	2b20      	cmp	r3, #32
 80067d0:	d1f2      	bne.n	80067b8 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80067d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067d4:	2b07      	cmp	r3, #7
 80067d6:	d807      	bhi.n	80067e8 <gen_numname+0xfc>
 80067d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067da:	1c5a      	adds	r2, r3, #1
 80067dc:	62ba      	str	r2, [r7, #40]	; 0x28
 80067de:	3330      	adds	r3, #48	; 0x30
 80067e0:	443b      	add	r3, r7
 80067e2:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 80067e6:	e000      	b.n	80067ea <gen_numname+0xfe>
 80067e8:	2120      	movs	r1, #32
 80067ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ec:	1c5a      	adds	r2, r3, #1
 80067ee:	627a      	str	r2, [r7, #36]	; 0x24
 80067f0:	68fa      	ldr	r2, [r7, #12]
 80067f2:	4413      	add	r3, r2
 80067f4:	460a      	mov	r2, r1
 80067f6:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 80067f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067fa:	2b07      	cmp	r3, #7
 80067fc:	d9e9      	bls.n	80067d2 <gen_numname+0xe6>
}
 80067fe:	bf00      	nop
 8006800:	bf00      	nop
 8006802:	3730      	adds	r7, #48	; 0x30
 8006804:	46bd      	mov	sp, r7
 8006806:	bd80      	pop	{r7, pc}

08006808 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8006808:	b480      	push	{r7}
 800680a:	b085      	sub	sp, #20
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8006810:	2300      	movs	r3, #0
 8006812:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8006814:	230b      	movs	r3, #11
 8006816:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8006818:	7bfb      	ldrb	r3, [r7, #15]
 800681a:	b2da      	uxtb	r2, r3
 800681c:	0852      	lsrs	r2, r2, #1
 800681e:	01db      	lsls	r3, r3, #7
 8006820:	4313      	orrs	r3, r2
 8006822:	b2da      	uxtb	r2, r3
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	1c59      	adds	r1, r3, #1
 8006828:	6079      	str	r1, [r7, #4]
 800682a:	781b      	ldrb	r3, [r3, #0]
 800682c:	4413      	add	r3, r2
 800682e:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8006830:	68bb      	ldr	r3, [r7, #8]
 8006832:	3b01      	subs	r3, #1
 8006834:	60bb      	str	r3, [r7, #8]
 8006836:	68bb      	ldr	r3, [r7, #8]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d1ed      	bne.n	8006818 <sum_sfn+0x10>
	return sum;
 800683c:	7bfb      	ldrb	r3, [r7, #15]
}
 800683e:	4618      	mov	r0, r3
 8006840:	3714      	adds	r7, #20
 8006842:	46bd      	mov	sp, r7
 8006844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006848:	4770      	bx	lr

0800684a <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800684a:	b580      	push	{r7, lr}
 800684c:	b086      	sub	sp, #24
 800684e:	af00      	add	r7, sp, #0
 8006850:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8006858:	2100      	movs	r1, #0
 800685a:	6878      	ldr	r0, [r7, #4]
 800685c:	f7ff fc88 	bl	8006170 <dir_sdi>
 8006860:	4603      	mov	r3, r0
 8006862:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8006864:	7dfb      	ldrb	r3, [r7, #23]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d001      	beq.n	800686e <dir_find+0x24>
 800686a:	7dfb      	ldrb	r3, [r7, #23]
 800686c:	e0a9      	b.n	80069c2 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800686e:	23ff      	movs	r3, #255	; 0xff
 8006870:	753b      	strb	r3, [r7, #20]
 8006872:	7d3b      	ldrb	r3, [r7, #20]
 8006874:	757b      	strb	r3, [r7, #21]
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	f04f 32ff 	mov.w	r2, #4294967295
 800687c:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	69db      	ldr	r3, [r3, #28]
 8006882:	4619      	mov	r1, r3
 8006884:	6938      	ldr	r0, [r7, #16]
 8006886:	f7ff f891 	bl	80059ac <move_window>
 800688a:	4603      	mov	r3, r0
 800688c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800688e:	7dfb      	ldrb	r3, [r7, #23]
 8006890:	2b00      	cmp	r3, #0
 8006892:	f040 8090 	bne.w	80069b6 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	6a1b      	ldr	r3, [r3, #32]
 800689a:	781b      	ldrb	r3, [r3, #0]
 800689c:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800689e:	7dbb      	ldrb	r3, [r7, #22]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d102      	bne.n	80068aa <dir_find+0x60>
 80068a4:	2304      	movs	r3, #4
 80068a6:	75fb      	strb	r3, [r7, #23]
 80068a8:	e08a      	b.n	80069c0 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	6a1b      	ldr	r3, [r3, #32]
 80068ae:	330b      	adds	r3, #11
 80068b0:	781b      	ldrb	r3, [r3, #0]
 80068b2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80068b6:	73fb      	strb	r3, [r7, #15]
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	7bfa      	ldrb	r2, [r7, #15]
 80068bc:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 80068be:	7dbb      	ldrb	r3, [r7, #22]
 80068c0:	2be5      	cmp	r3, #229	; 0xe5
 80068c2:	d007      	beq.n	80068d4 <dir_find+0x8a>
 80068c4:	7bfb      	ldrb	r3, [r7, #15]
 80068c6:	f003 0308 	and.w	r3, r3, #8
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d009      	beq.n	80068e2 <dir_find+0x98>
 80068ce:	7bfb      	ldrb	r3, [r7, #15]
 80068d0:	2b0f      	cmp	r3, #15
 80068d2:	d006      	beq.n	80068e2 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80068d4:	23ff      	movs	r3, #255	; 0xff
 80068d6:	757b      	strb	r3, [r7, #21]
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	f04f 32ff 	mov.w	r2, #4294967295
 80068de:	631a      	str	r2, [r3, #48]	; 0x30
 80068e0:	e05e      	b.n	80069a0 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 80068e2:	7bfb      	ldrb	r3, [r7, #15]
 80068e4:	2b0f      	cmp	r3, #15
 80068e6:	d136      	bne.n	8006956 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80068ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d154      	bne.n	80069a0 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 80068f6:	7dbb      	ldrb	r3, [r7, #22]
 80068f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d00d      	beq.n	800691c <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	6a1b      	ldr	r3, [r3, #32]
 8006904:	7b5b      	ldrb	r3, [r3, #13]
 8006906:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8006908:	7dbb      	ldrb	r3, [r7, #22]
 800690a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800690e:	75bb      	strb	r3, [r7, #22]
 8006910:	7dbb      	ldrb	r3, [r7, #22]
 8006912:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	695a      	ldr	r2, [r3, #20]
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800691c:	7dba      	ldrb	r2, [r7, #22]
 800691e:	7d7b      	ldrb	r3, [r7, #21]
 8006920:	429a      	cmp	r2, r3
 8006922:	d115      	bne.n	8006950 <dir_find+0x106>
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	6a1b      	ldr	r3, [r3, #32]
 8006928:	330d      	adds	r3, #13
 800692a:	781b      	ldrb	r3, [r3, #0]
 800692c:	7d3a      	ldrb	r2, [r7, #20]
 800692e:	429a      	cmp	r2, r3
 8006930:	d10e      	bne.n	8006950 <dir_find+0x106>
 8006932:	693b      	ldr	r3, [r7, #16]
 8006934:	691a      	ldr	r2, [r3, #16]
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	6a1b      	ldr	r3, [r3, #32]
 800693a:	4619      	mov	r1, r3
 800693c:	4610      	mov	r0, r2
 800693e:	f7ff fdfd 	bl	800653c <cmp_lfn>
 8006942:	4603      	mov	r3, r0
 8006944:	2b00      	cmp	r3, #0
 8006946:	d003      	beq.n	8006950 <dir_find+0x106>
 8006948:	7d7b      	ldrb	r3, [r7, #21]
 800694a:	3b01      	subs	r3, #1
 800694c:	b2db      	uxtb	r3, r3
 800694e:	e000      	b.n	8006952 <dir_find+0x108>
 8006950:	23ff      	movs	r3, #255	; 0xff
 8006952:	757b      	strb	r3, [r7, #21]
 8006954:	e024      	b.n	80069a0 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8006956:	7d7b      	ldrb	r3, [r7, #21]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d109      	bne.n	8006970 <dir_find+0x126>
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	6a1b      	ldr	r3, [r3, #32]
 8006960:	4618      	mov	r0, r3
 8006962:	f7ff ff51 	bl	8006808 <sum_sfn>
 8006966:	4603      	mov	r3, r0
 8006968:	461a      	mov	r2, r3
 800696a:	7d3b      	ldrb	r3, [r7, #20]
 800696c:	4293      	cmp	r3, r2
 800696e:	d024      	beq.n	80069ba <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8006976:	f003 0301 	and.w	r3, r3, #1
 800697a:	2b00      	cmp	r3, #0
 800697c:	d10a      	bne.n	8006994 <dir_find+0x14a>
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	6a18      	ldr	r0, [r3, #32]
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	3324      	adds	r3, #36	; 0x24
 8006986:	220b      	movs	r2, #11
 8006988:	4619      	mov	r1, r3
 800698a:	f7fe fe1d 	bl	80055c8 <mem_cmp>
 800698e:	4603      	mov	r3, r0
 8006990:	2b00      	cmp	r3, #0
 8006992:	d014      	beq.n	80069be <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8006994:	23ff      	movs	r3, #255	; 0xff
 8006996:	757b      	strb	r3, [r7, #21]
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	f04f 32ff 	mov.w	r2, #4294967295
 800699e:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80069a0:	2100      	movs	r1, #0
 80069a2:	6878      	ldr	r0, [r7, #4]
 80069a4:	f7ff fc6d 	bl	8006282 <dir_next>
 80069a8:	4603      	mov	r3, r0
 80069aa:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80069ac:	7dfb      	ldrb	r3, [r7, #23]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	f43f af65 	beq.w	800687e <dir_find+0x34>
 80069b4:	e004      	b.n	80069c0 <dir_find+0x176>
		if (res != FR_OK) break;
 80069b6:	bf00      	nop
 80069b8:	e002      	b.n	80069c0 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80069ba:	bf00      	nop
 80069bc:	e000      	b.n	80069c0 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80069be:	bf00      	nop

	return res;
 80069c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80069c2:	4618      	mov	r0, r3
 80069c4:	3718      	adds	r7, #24
 80069c6:	46bd      	mov	sp, r7
 80069c8:	bd80      	pop	{r7, pc}
	...

080069cc <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b08c      	sub	sp, #48	; 0x30
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80069e0:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d001      	beq.n	80069ec <dir_register+0x20>
 80069e8:	2306      	movs	r3, #6
 80069ea:	e0e0      	b.n	8006bae <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 80069ec:	2300      	movs	r3, #0
 80069ee:	627b      	str	r3, [r7, #36]	; 0x24
 80069f0:	e002      	b.n	80069f8 <dir_register+0x2c>
 80069f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069f4:	3301      	adds	r3, #1
 80069f6:	627b      	str	r3, [r7, #36]	; 0x24
 80069f8:	69fb      	ldr	r3, [r7, #28]
 80069fa:	691a      	ldr	r2, [r3, #16]
 80069fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069fe:	005b      	lsls	r3, r3, #1
 8006a00:	4413      	add	r3, r2
 8006a02:	881b      	ldrh	r3, [r3, #0]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d1f4      	bne.n	80069f2 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8006a0e:	f107 030c 	add.w	r3, r7, #12
 8006a12:	220c      	movs	r2, #12
 8006a14:	4618      	mov	r0, r3
 8006a16:	f7fe fd9b 	bl	8005550 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8006a1a:	7dfb      	ldrb	r3, [r7, #23]
 8006a1c:	f003 0301 	and.w	r3, r3, #1
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d032      	beq.n	8006a8a <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2240      	movs	r2, #64	; 0x40
 8006a28:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 8006a2c:	2301      	movs	r3, #1
 8006a2e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006a30:	e016      	b.n	8006a60 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8006a38:	69fb      	ldr	r3, [r7, #28]
 8006a3a:	691a      	ldr	r2, [r3, #16]
 8006a3c:	f107 010c 	add.w	r1, r7, #12
 8006a40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a42:	f7ff fe53 	bl	80066ec <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8006a46:	6878      	ldr	r0, [r7, #4]
 8006a48:	f7ff feff 	bl	800684a <dir_find>
 8006a4c:	4603      	mov	r3, r0
 8006a4e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8006a52:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d106      	bne.n	8006a68 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8006a5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a5c:	3301      	adds	r3, #1
 8006a5e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006a60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a62:	2b63      	cmp	r3, #99	; 0x63
 8006a64:	d9e5      	bls.n	8006a32 <dir_register+0x66>
 8006a66:	e000      	b.n	8006a6a <dir_register+0x9e>
			if (res != FR_OK) break;
 8006a68:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8006a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a6c:	2b64      	cmp	r3, #100	; 0x64
 8006a6e:	d101      	bne.n	8006a74 <dir_register+0xa8>
 8006a70:	2307      	movs	r3, #7
 8006a72:	e09c      	b.n	8006bae <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8006a74:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006a78:	2b04      	cmp	r3, #4
 8006a7a:	d002      	beq.n	8006a82 <dir_register+0xb6>
 8006a7c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006a80:	e095      	b.n	8006bae <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8006a82:	7dfa      	ldrb	r2, [r7, #23]
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8006a8a:	7dfb      	ldrb	r3, [r7, #23]
 8006a8c:	f003 0302 	and.w	r3, r3, #2
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d007      	beq.n	8006aa4 <dir_register+0xd8>
 8006a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a96:	330c      	adds	r3, #12
 8006a98:	4a47      	ldr	r2, [pc, #284]	; (8006bb8 <dir_register+0x1ec>)
 8006a9a:	fba2 2303 	umull	r2, r3, r2, r3
 8006a9e:	089b      	lsrs	r3, r3, #2
 8006aa0:	3301      	adds	r3, #1
 8006aa2:	e000      	b.n	8006aa6 <dir_register+0xda>
 8006aa4:	2301      	movs	r3, #1
 8006aa6:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8006aa8:	6a39      	ldr	r1, [r7, #32]
 8006aaa:	6878      	ldr	r0, [r7, #4]
 8006aac:	f7ff fcbf 	bl	800642e <dir_alloc>
 8006ab0:	4603      	mov	r3, r0
 8006ab2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8006ab6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d148      	bne.n	8006b50 <dir_register+0x184>
 8006abe:	6a3b      	ldr	r3, [r7, #32]
 8006ac0:	3b01      	subs	r3, #1
 8006ac2:	623b      	str	r3, [r7, #32]
 8006ac4:	6a3b      	ldr	r3, [r7, #32]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d042      	beq.n	8006b50 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	695a      	ldr	r2, [r3, #20]
 8006ace:	6a3b      	ldr	r3, [r7, #32]
 8006ad0:	015b      	lsls	r3, r3, #5
 8006ad2:	1ad3      	subs	r3, r2, r3
 8006ad4:	4619      	mov	r1, r3
 8006ad6:	6878      	ldr	r0, [r7, #4]
 8006ad8:	f7ff fb4a 	bl	8006170 <dir_sdi>
 8006adc:	4603      	mov	r3, r0
 8006ade:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8006ae2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d132      	bne.n	8006b50 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	3324      	adds	r3, #36	; 0x24
 8006aee:	4618      	mov	r0, r3
 8006af0:	f7ff fe8a 	bl	8006808 <sum_sfn>
 8006af4:	4603      	mov	r3, r0
 8006af6:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	69db      	ldr	r3, [r3, #28]
 8006afc:	4619      	mov	r1, r3
 8006afe:	69f8      	ldr	r0, [r7, #28]
 8006b00:	f7fe ff54 	bl	80059ac <move_window>
 8006b04:	4603      	mov	r3, r0
 8006b06:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 8006b0a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d11d      	bne.n	8006b4e <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8006b12:	69fb      	ldr	r3, [r7, #28]
 8006b14:	6918      	ldr	r0, [r3, #16]
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	6a19      	ldr	r1, [r3, #32]
 8006b1a:	6a3b      	ldr	r3, [r7, #32]
 8006b1c:	b2da      	uxtb	r2, r3
 8006b1e:	7efb      	ldrb	r3, [r7, #27]
 8006b20:	f7ff fd7c 	bl	800661c <put_lfn>
				fs->wflag = 1;
 8006b24:	69fb      	ldr	r3, [r7, #28]
 8006b26:	2201      	movs	r2, #1
 8006b28:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8006b2a:	2100      	movs	r1, #0
 8006b2c:	6878      	ldr	r0, [r7, #4]
 8006b2e:	f7ff fba8 	bl	8006282 <dir_next>
 8006b32:	4603      	mov	r3, r0
 8006b34:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8006b38:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d107      	bne.n	8006b50 <dir_register+0x184>
 8006b40:	6a3b      	ldr	r3, [r7, #32]
 8006b42:	3b01      	subs	r3, #1
 8006b44:	623b      	str	r3, [r7, #32]
 8006b46:	6a3b      	ldr	r3, [r7, #32]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d1d5      	bne.n	8006af8 <dir_register+0x12c>
 8006b4c:	e000      	b.n	8006b50 <dir_register+0x184>
				if (res != FR_OK) break;
 8006b4e:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8006b50:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d128      	bne.n	8006baa <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	69db      	ldr	r3, [r3, #28]
 8006b5c:	4619      	mov	r1, r3
 8006b5e:	69f8      	ldr	r0, [r7, #28]
 8006b60:	f7fe ff24 	bl	80059ac <move_window>
 8006b64:	4603      	mov	r3, r0
 8006b66:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8006b6a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d11b      	bne.n	8006baa <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	6a1b      	ldr	r3, [r3, #32]
 8006b76:	2220      	movs	r2, #32
 8006b78:	2100      	movs	r1, #0
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	f7fe fd09 	bl	8005592 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	6a18      	ldr	r0, [r3, #32]
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	3324      	adds	r3, #36	; 0x24
 8006b88:	220b      	movs	r2, #11
 8006b8a:	4619      	mov	r1, r3
 8006b8c:	f7fe fce0 	bl	8005550 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	6a1b      	ldr	r3, [r3, #32]
 8006b9a:	330c      	adds	r3, #12
 8006b9c:	f002 0218 	and.w	r2, r2, #24
 8006ba0:	b2d2      	uxtb	r2, r2
 8006ba2:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8006ba4:	69fb      	ldr	r3, [r7, #28]
 8006ba6:	2201      	movs	r2, #1
 8006ba8:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8006baa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8006bae:	4618      	mov	r0, r3
 8006bb0:	3730      	adds	r7, #48	; 0x30
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	bd80      	pop	{r7, pc}
 8006bb6:	bf00      	nop
 8006bb8:	4ec4ec4f 	.word	0x4ec4ec4f

08006bbc <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b08a      	sub	sp, #40	; 0x28
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
 8006bc4:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	613b      	str	r3, [r7, #16]
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	691b      	ldr	r3, [r3, #16]
 8006bd2:	60fb      	str	r3, [r7, #12]
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	617b      	str	r3, [r7, #20]
 8006bd8:	697b      	ldr	r3, [r7, #20]
 8006bda:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8006bdc:	69bb      	ldr	r3, [r7, #24]
 8006bde:	1c5a      	adds	r2, r3, #1
 8006be0:	61ba      	str	r2, [r7, #24]
 8006be2:	693a      	ldr	r2, [r7, #16]
 8006be4:	4413      	add	r3, r2
 8006be6:	781b      	ldrb	r3, [r3, #0]
 8006be8:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8006bea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006bec:	2b1f      	cmp	r3, #31
 8006bee:	d940      	bls.n	8006c72 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8006bf0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006bf2:	2b2f      	cmp	r3, #47	; 0x2f
 8006bf4:	d006      	beq.n	8006c04 <create_name+0x48>
 8006bf6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006bf8:	2b5c      	cmp	r3, #92	; 0x5c
 8006bfa:	d110      	bne.n	8006c1e <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8006bfc:	e002      	b.n	8006c04 <create_name+0x48>
 8006bfe:	69bb      	ldr	r3, [r7, #24]
 8006c00:	3301      	adds	r3, #1
 8006c02:	61bb      	str	r3, [r7, #24]
 8006c04:	693a      	ldr	r2, [r7, #16]
 8006c06:	69bb      	ldr	r3, [r7, #24]
 8006c08:	4413      	add	r3, r2
 8006c0a:	781b      	ldrb	r3, [r3, #0]
 8006c0c:	2b2f      	cmp	r3, #47	; 0x2f
 8006c0e:	d0f6      	beq.n	8006bfe <create_name+0x42>
 8006c10:	693a      	ldr	r2, [r7, #16]
 8006c12:	69bb      	ldr	r3, [r7, #24]
 8006c14:	4413      	add	r3, r2
 8006c16:	781b      	ldrb	r3, [r3, #0]
 8006c18:	2b5c      	cmp	r3, #92	; 0x5c
 8006c1a:	d0f0      	beq.n	8006bfe <create_name+0x42>
			break;
 8006c1c:	e02a      	b.n	8006c74 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8006c1e:	697b      	ldr	r3, [r7, #20]
 8006c20:	2bfe      	cmp	r3, #254	; 0xfe
 8006c22:	d901      	bls.n	8006c28 <create_name+0x6c>
 8006c24:	2306      	movs	r3, #6
 8006c26:	e17d      	b.n	8006f24 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8006c28:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006c2a:	b2db      	uxtb	r3, r3
 8006c2c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8006c2e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006c30:	2101      	movs	r1, #1
 8006c32:	4618      	mov	r0, r3
 8006c34:	f001 fc86 	bl	8008544 <ff_convert>
 8006c38:	4603      	mov	r3, r0
 8006c3a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8006c3c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d101      	bne.n	8006c46 <create_name+0x8a>
 8006c42:	2306      	movs	r3, #6
 8006c44:	e16e      	b.n	8006f24 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8006c46:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006c48:	2b7f      	cmp	r3, #127	; 0x7f
 8006c4a:	d809      	bhi.n	8006c60 <create_name+0xa4>
 8006c4c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006c4e:	4619      	mov	r1, r3
 8006c50:	488d      	ldr	r0, [pc, #564]	; (8006e88 <create_name+0x2cc>)
 8006c52:	f7fe fce0 	bl	8005616 <chk_chr>
 8006c56:	4603      	mov	r3, r0
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d001      	beq.n	8006c60 <create_name+0xa4>
 8006c5c:	2306      	movs	r3, #6
 8006c5e:	e161      	b.n	8006f24 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8006c60:	697b      	ldr	r3, [r7, #20]
 8006c62:	1c5a      	adds	r2, r3, #1
 8006c64:	617a      	str	r2, [r7, #20]
 8006c66:	005b      	lsls	r3, r3, #1
 8006c68:	68fa      	ldr	r2, [r7, #12]
 8006c6a:	4413      	add	r3, r2
 8006c6c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006c6e:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8006c70:	e7b4      	b.n	8006bdc <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8006c72:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8006c74:	693a      	ldr	r2, [r7, #16]
 8006c76:	69bb      	ldr	r3, [r7, #24]
 8006c78:	441a      	add	r2, r3
 8006c7a:	683b      	ldr	r3, [r7, #0]
 8006c7c:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8006c7e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006c80:	2b1f      	cmp	r3, #31
 8006c82:	d801      	bhi.n	8006c88 <create_name+0xcc>
 8006c84:	2304      	movs	r3, #4
 8006c86:	e000      	b.n	8006c8a <create_name+0xce>
 8006c88:	2300      	movs	r3, #0
 8006c8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8006c8e:	e011      	b.n	8006cb4 <create_name+0xf8>
		w = lfn[di - 1];
 8006c90:	697b      	ldr	r3, [r7, #20]
 8006c92:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8006c96:	3b01      	subs	r3, #1
 8006c98:	005b      	lsls	r3, r3, #1
 8006c9a:	68fa      	ldr	r2, [r7, #12]
 8006c9c:	4413      	add	r3, r2
 8006c9e:	881b      	ldrh	r3, [r3, #0]
 8006ca0:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8006ca2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006ca4:	2b20      	cmp	r3, #32
 8006ca6:	d002      	beq.n	8006cae <create_name+0xf2>
 8006ca8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006caa:	2b2e      	cmp	r3, #46	; 0x2e
 8006cac:	d106      	bne.n	8006cbc <create_name+0x100>
		di--;
 8006cae:	697b      	ldr	r3, [r7, #20]
 8006cb0:	3b01      	subs	r3, #1
 8006cb2:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8006cb4:	697b      	ldr	r3, [r7, #20]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d1ea      	bne.n	8006c90 <create_name+0xd4>
 8006cba:	e000      	b.n	8006cbe <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8006cbc:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8006cbe:	697b      	ldr	r3, [r7, #20]
 8006cc0:	005b      	lsls	r3, r3, #1
 8006cc2:	68fa      	ldr	r2, [r7, #12]
 8006cc4:	4413      	add	r3, r2
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8006cca:	697b      	ldr	r3, [r7, #20]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d101      	bne.n	8006cd4 <create_name+0x118>
 8006cd0:	2306      	movs	r3, #6
 8006cd2:	e127      	b.n	8006f24 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	3324      	adds	r3, #36	; 0x24
 8006cd8:	220b      	movs	r2, #11
 8006cda:	2120      	movs	r1, #32
 8006cdc:	4618      	mov	r0, r3
 8006cde:	f7fe fc58 	bl	8005592 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	61bb      	str	r3, [r7, #24]
 8006ce6:	e002      	b.n	8006cee <create_name+0x132>
 8006ce8:	69bb      	ldr	r3, [r7, #24]
 8006cea:	3301      	adds	r3, #1
 8006cec:	61bb      	str	r3, [r7, #24]
 8006cee:	69bb      	ldr	r3, [r7, #24]
 8006cf0:	005b      	lsls	r3, r3, #1
 8006cf2:	68fa      	ldr	r2, [r7, #12]
 8006cf4:	4413      	add	r3, r2
 8006cf6:	881b      	ldrh	r3, [r3, #0]
 8006cf8:	2b20      	cmp	r3, #32
 8006cfa:	d0f5      	beq.n	8006ce8 <create_name+0x12c>
 8006cfc:	69bb      	ldr	r3, [r7, #24]
 8006cfe:	005b      	lsls	r3, r3, #1
 8006d00:	68fa      	ldr	r2, [r7, #12]
 8006d02:	4413      	add	r3, r2
 8006d04:	881b      	ldrh	r3, [r3, #0]
 8006d06:	2b2e      	cmp	r3, #46	; 0x2e
 8006d08:	d0ee      	beq.n	8006ce8 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8006d0a:	69bb      	ldr	r3, [r7, #24]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d009      	beq.n	8006d24 <create_name+0x168>
 8006d10:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006d14:	f043 0303 	orr.w	r3, r3, #3
 8006d18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8006d1c:	e002      	b.n	8006d24 <create_name+0x168>
 8006d1e:	697b      	ldr	r3, [r7, #20]
 8006d20:	3b01      	subs	r3, #1
 8006d22:	617b      	str	r3, [r7, #20]
 8006d24:	697b      	ldr	r3, [r7, #20]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d009      	beq.n	8006d3e <create_name+0x182>
 8006d2a:	697b      	ldr	r3, [r7, #20]
 8006d2c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8006d30:	3b01      	subs	r3, #1
 8006d32:	005b      	lsls	r3, r3, #1
 8006d34:	68fa      	ldr	r2, [r7, #12]
 8006d36:	4413      	add	r3, r2
 8006d38:	881b      	ldrh	r3, [r3, #0]
 8006d3a:	2b2e      	cmp	r3, #46	; 0x2e
 8006d3c:	d1ef      	bne.n	8006d1e <create_name+0x162>

	i = b = 0; ni = 8;
 8006d3e:	2300      	movs	r3, #0
 8006d40:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006d44:	2300      	movs	r3, #0
 8006d46:	623b      	str	r3, [r7, #32]
 8006d48:	2308      	movs	r3, #8
 8006d4a:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8006d4c:	69bb      	ldr	r3, [r7, #24]
 8006d4e:	1c5a      	adds	r2, r3, #1
 8006d50:	61ba      	str	r2, [r7, #24]
 8006d52:	005b      	lsls	r3, r3, #1
 8006d54:	68fa      	ldr	r2, [r7, #12]
 8006d56:	4413      	add	r3, r2
 8006d58:	881b      	ldrh	r3, [r3, #0]
 8006d5a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8006d5c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	f000 8090 	beq.w	8006e84 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8006d64:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006d66:	2b20      	cmp	r3, #32
 8006d68:	d006      	beq.n	8006d78 <create_name+0x1bc>
 8006d6a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006d6c:	2b2e      	cmp	r3, #46	; 0x2e
 8006d6e:	d10a      	bne.n	8006d86 <create_name+0x1ca>
 8006d70:	69ba      	ldr	r2, [r7, #24]
 8006d72:	697b      	ldr	r3, [r7, #20]
 8006d74:	429a      	cmp	r2, r3
 8006d76:	d006      	beq.n	8006d86 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8006d78:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006d7c:	f043 0303 	orr.w	r3, r3, #3
 8006d80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006d84:	e07d      	b.n	8006e82 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8006d86:	6a3a      	ldr	r2, [r7, #32]
 8006d88:	69fb      	ldr	r3, [r7, #28]
 8006d8a:	429a      	cmp	r2, r3
 8006d8c:	d203      	bcs.n	8006d96 <create_name+0x1da>
 8006d8e:	69ba      	ldr	r2, [r7, #24]
 8006d90:	697b      	ldr	r3, [r7, #20]
 8006d92:	429a      	cmp	r2, r3
 8006d94:	d123      	bne.n	8006dde <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8006d96:	69fb      	ldr	r3, [r7, #28]
 8006d98:	2b0b      	cmp	r3, #11
 8006d9a:	d106      	bne.n	8006daa <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8006d9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006da0:	f043 0303 	orr.w	r3, r3, #3
 8006da4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006da8:	e075      	b.n	8006e96 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8006daa:	69ba      	ldr	r2, [r7, #24]
 8006dac:	697b      	ldr	r3, [r7, #20]
 8006dae:	429a      	cmp	r2, r3
 8006db0:	d005      	beq.n	8006dbe <create_name+0x202>
 8006db2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006db6:	f043 0303 	orr.w	r3, r3, #3
 8006dba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8006dbe:	69ba      	ldr	r2, [r7, #24]
 8006dc0:	697b      	ldr	r3, [r7, #20]
 8006dc2:	429a      	cmp	r2, r3
 8006dc4:	d866      	bhi.n	8006e94 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8006dc6:	697b      	ldr	r3, [r7, #20]
 8006dc8:	61bb      	str	r3, [r7, #24]
 8006dca:	2308      	movs	r3, #8
 8006dcc:	623b      	str	r3, [r7, #32]
 8006dce:	230b      	movs	r3, #11
 8006dd0:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8006dd2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006dd6:	009b      	lsls	r3, r3, #2
 8006dd8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006ddc:	e051      	b.n	8006e82 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8006dde:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006de0:	2b7f      	cmp	r3, #127	; 0x7f
 8006de2:	d914      	bls.n	8006e0e <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8006de4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006de6:	2100      	movs	r1, #0
 8006de8:	4618      	mov	r0, r3
 8006dea:	f001 fbab 	bl	8008544 <ff_convert>
 8006dee:	4603      	mov	r3, r0
 8006df0:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8006df2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d004      	beq.n	8006e02 <create_name+0x246>
 8006df8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006dfa:	3b80      	subs	r3, #128	; 0x80
 8006dfc:	4a23      	ldr	r2, [pc, #140]	; (8006e8c <create_name+0x2d0>)
 8006dfe:	5cd3      	ldrb	r3, [r2, r3]
 8006e00:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8006e02:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006e06:	f043 0302 	orr.w	r3, r3, #2
 8006e0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8006e0e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d007      	beq.n	8006e24 <create_name+0x268>
 8006e14:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006e16:	4619      	mov	r1, r3
 8006e18:	481d      	ldr	r0, [pc, #116]	; (8006e90 <create_name+0x2d4>)
 8006e1a:	f7fe fbfc 	bl	8005616 <chk_chr>
 8006e1e:	4603      	mov	r3, r0
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d008      	beq.n	8006e36 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8006e24:	235f      	movs	r3, #95	; 0x5f
 8006e26:	84bb      	strh	r3, [r7, #36]	; 0x24
 8006e28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006e2c:	f043 0303 	orr.w	r3, r3, #3
 8006e30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006e34:	e01b      	b.n	8006e6e <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8006e36:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006e38:	2b40      	cmp	r3, #64	; 0x40
 8006e3a:	d909      	bls.n	8006e50 <create_name+0x294>
 8006e3c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006e3e:	2b5a      	cmp	r3, #90	; 0x5a
 8006e40:	d806      	bhi.n	8006e50 <create_name+0x294>
					b |= 2;
 8006e42:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006e46:	f043 0302 	orr.w	r3, r3, #2
 8006e4a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006e4e:	e00e      	b.n	8006e6e <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8006e50:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006e52:	2b60      	cmp	r3, #96	; 0x60
 8006e54:	d90b      	bls.n	8006e6e <create_name+0x2b2>
 8006e56:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006e58:	2b7a      	cmp	r3, #122	; 0x7a
 8006e5a:	d808      	bhi.n	8006e6e <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8006e5c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006e60:	f043 0301 	orr.w	r3, r3, #1
 8006e64:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006e68:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006e6a:	3b20      	subs	r3, #32
 8006e6c:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8006e6e:	6a3b      	ldr	r3, [r7, #32]
 8006e70:	1c5a      	adds	r2, r3, #1
 8006e72:	623a      	str	r2, [r7, #32]
 8006e74:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006e76:	b2d1      	uxtb	r1, r2
 8006e78:	687a      	ldr	r2, [r7, #4]
 8006e7a:	4413      	add	r3, r2
 8006e7c:	460a      	mov	r2, r1
 8006e7e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 8006e82:	e763      	b.n	8006d4c <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8006e84:	bf00      	nop
 8006e86:	e006      	b.n	8006e96 <create_name+0x2da>
 8006e88:	0800b770 	.word	0x0800b770
 8006e8c:	0800b7d0 	.word	0x0800b7d0
 8006e90:	0800b77c 	.word	0x0800b77c
			if (si > di) break;			/* No extension */
 8006e94:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006e9c:	2be5      	cmp	r3, #229	; 0xe5
 8006e9e:	d103      	bne.n	8006ea8 <create_name+0x2ec>
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2205      	movs	r2, #5
 8006ea4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 8006ea8:	69fb      	ldr	r3, [r7, #28]
 8006eaa:	2b08      	cmp	r3, #8
 8006eac:	d104      	bne.n	8006eb8 <create_name+0x2fc>
 8006eae:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006eb2:	009b      	lsls	r3, r3, #2
 8006eb4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8006eb8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006ebc:	f003 030c 	and.w	r3, r3, #12
 8006ec0:	2b0c      	cmp	r3, #12
 8006ec2:	d005      	beq.n	8006ed0 <create_name+0x314>
 8006ec4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006ec8:	f003 0303 	and.w	r3, r3, #3
 8006ecc:	2b03      	cmp	r3, #3
 8006ece:	d105      	bne.n	8006edc <create_name+0x320>
 8006ed0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006ed4:	f043 0302 	orr.w	r3, r3, #2
 8006ed8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8006edc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006ee0:	f003 0302 	and.w	r3, r3, #2
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d117      	bne.n	8006f18 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8006ee8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006eec:	f003 0303 	and.w	r3, r3, #3
 8006ef0:	2b01      	cmp	r3, #1
 8006ef2:	d105      	bne.n	8006f00 <create_name+0x344>
 8006ef4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006ef8:	f043 0310 	orr.w	r3, r3, #16
 8006efc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8006f00:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006f04:	f003 030c 	and.w	r3, r3, #12
 8006f08:	2b04      	cmp	r3, #4
 8006f0a:	d105      	bne.n	8006f18 <create_name+0x35c>
 8006f0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006f10:	f043 0308 	orr.w	r3, r3, #8
 8006f14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8006f1e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 8006f22:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8006f24:	4618      	mov	r0, r3
 8006f26:	3728      	adds	r7, #40	; 0x28
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	bd80      	pop	{r7, pc}

08006f2c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b086      	sub	sp, #24
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
 8006f34:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8006f3a:	693b      	ldr	r3, [r7, #16]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8006f40:	e002      	b.n	8006f48 <follow_path+0x1c>
 8006f42:	683b      	ldr	r3, [r7, #0]
 8006f44:	3301      	adds	r3, #1
 8006f46:	603b      	str	r3, [r7, #0]
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	781b      	ldrb	r3, [r3, #0]
 8006f4c:	2b2f      	cmp	r3, #47	; 0x2f
 8006f4e:	d0f8      	beq.n	8006f42 <follow_path+0x16>
 8006f50:	683b      	ldr	r3, [r7, #0]
 8006f52:	781b      	ldrb	r3, [r3, #0]
 8006f54:	2b5c      	cmp	r3, #92	; 0x5c
 8006f56:	d0f4      	beq.n	8006f42 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8006f58:	693b      	ldr	r3, [r7, #16]
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8006f5e:	683b      	ldr	r3, [r7, #0]
 8006f60:	781b      	ldrb	r3, [r3, #0]
 8006f62:	2b1f      	cmp	r3, #31
 8006f64:	d80a      	bhi.n	8006f7c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	2280      	movs	r2, #128	; 0x80
 8006f6a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8006f6e:	2100      	movs	r1, #0
 8006f70:	6878      	ldr	r0, [r7, #4]
 8006f72:	f7ff f8fd 	bl	8006170 <dir_sdi>
 8006f76:	4603      	mov	r3, r0
 8006f78:	75fb      	strb	r3, [r7, #23]
 8006f7a:	e048      	b.n	800700e <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006f7c:	463b      	mov	r3, r7
 8006f7e:	4619      	mov	r1, r3
 8006f80:	6878      	ldr	r0, [r7, #4]
 8006f82:	f7ff fe1b 	bl	8006bbc <create_name>
 8006f86:	4603      	mov	r3, r0
 8006f88:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8006f8a:	7dfb      	ldrb	r3, [r7, #23]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d139      	bne.n	8007004 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8006f90:	6878      	ldr	r0, [r7, #4]
 8006f92:	f7ff fc5a 	bl	800684a <dir_find>
 8006f96:	4603      	mov	r3, r0
 8006f98:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8006fa0:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8006fa2:	7dfb      	ldrb	r3, [r7, #23]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d00a      	beq.n	8006fbe <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8006fa8:	7dfb      	ldrb	r3, [r7, #23]
 8006faa:	2b04      	cmp	r3, #4
 8006fac:	d12c      	bne.n	8007008 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8006fae:	7afb      	ldrb	r3, [r7, #11]
 8006fb0:	f003 0304 	and.w	r3, r3, #4
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d127      	bne.n	8007008 <follow_path+0xdc>
 8006fb8:	2305      	movs	r3, #5
 8006fba:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8006fbc:	e024      	b.n	8007008 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006fbe:	7afb      	ldrb	r3, [r7, #11]
 8006fc0:	f003 0304 	and.w	r3, r3, #4
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d121      	bne.n	800700c <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8006fc8:	693b      	ldr	r3, [r7, #16]
 8006fca:	799b      	ldrb	r3, [r3, #6]
 8006fcc:	f003 0310 	and.w	r3, r3, #16
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d102      	bne.n	8006fda <follow_path+0xae>
				res = FR_NO_PATH; break;
 8006fd4:	2305      	movs	r3, #5
 8006fd6:	75fb      	strb	r3, [r7, #23]
 8006fd8:	e019      	b.n	800700e <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	695b      	ldr	r3, [r3, #20]
 8006fe4:	68fa      	ldr	r2, [r7, #12]
 8006fe6:	8992      	ldrh	r2, [r2, #12]
 8006fe8:	fbb3 f0f2 	udiv	r0, r3, r2
 8006fec:	fb00 f202 	mul.w	r2, r0, r2
 8006ff0:	1a9b      	subs	r3, r3, r2
 8006ff2:	440b      	add	r3, r1
 8006ff4:	4619      	mov	r1, r3
 8006ff6:	68f8      	ldr	r0, [r7, #12]
 8006ff8:	f7ff fa60 	bl	80064bc <ld_clust>
 8006ffc:	4602      	mov	r2, r0
 8006ffe:	693b      	ldr	r3, [r7, #16]
 8007000:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007002:	e7bb      	b.n	8006f7c <follow_path+0x50>
			if (res != FR_OK) break;
 8007004:	bf00      	nop
 8007006:	e002      	b.n	800700e <follow_path+0xe2>
				break;
 8007008:	bf00      	nop
 800700a:	e000      	b.n	800700e <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800700c:	bf00      	nop
			}
		}
	}

	return res;
 800700e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007010:	4618      	mov	r0, r3
 8007012:	3718      	adds	r7, #24
 8007014:	46bd      	mov	sp, r7
 8007016:	bd80      	pop	{r7, pc}

08007018 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8007018:	b480      	push	{r7}
 800701a:	b087      	sub	sp, #28
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8007020:	f04f 33ff 	mov.w	r3, #4294967295
 8007024:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	2b00      	cmp	r3, #0
 800702c:	d031      	beq.n	8007092 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	617b      	str	r3, [r7, #20]
 8007034:	e002      	b.n	800703c <get_ldnumber+0x24>
 8007036:	697b      	ldr	r3, [r7, #20]
 8007038:	3301      	adds	r3, #1
 800703a:	617b      	str	r3, [r7, #20]
 800703c:	697b      	ldr	r3, [r7, #20]
 800703e:	781b      	ldrb	r3, [r3, #0]
 8007040:	2b1f      	cmp	r3, #31
 8007042:	d903      	bls.n	800704c <get_ldnumber+0x34>
 8007044:	697b      	ldr	r3, [r7, #20]
 8007046:	781b      	ldrb	r3, [r3, #0]
 8007048:	2b3a      	cmp	r3, #58	; 0x3a
 800704a:	d1f4      	bne.n	8007036 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800704c:	697b      	ldr	r3, [r7, #20]
 800704e:	781b      	ldrb	r3, [r3, #0]
 8007050:	2b3a      	cmp	r3, #58	; 0x3a
 8007052:	d11c      	bne.n	800708e <get_ldnumber+0x76>
			tp = *path;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	1c5a      	adds	r2, r3, #1
 800705e:	60fa      	str	r2, [r7, #12]
 8007060:	781b      	ldrb	r3, [r3, #0]
 8007062:	3b30      	subs	r3, #48	; 0x30
 8007064:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8007066:	68bb      	ldr	r3, [r7, #8]
 8007068:	2b09      	cmp	r3, #9
 800706a:	d80e      	bhi.n	800708a <get_ldnumber+0x72>
 800706c:	68fa      	ldr	r2, [r7, #12]
 800706e:	697b      	ldr	r3, [r7, #20]
 8007070:	429a      	cmp	r2, r3
 8007072:	d10a      	bne.n	800708a <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8007074:	68bb      	ldr	r3, [r7, #8]
 8007076:	2b00      	cmp	r3, #0
 8007078:	d107      	bne.n	800708a <get_ldnumber+0x72>
					vol = (int)i;
 800707a:	68bb      	ldr	r3, [r7, #8]
 800707c:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800707e:	697b      	ldr	r3, [r7, #20]
 8007080:	3301      	adds	r3, #1
 8007082:	617b      	str	r3, [r7, #20]
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	697a      	ldr	r2, [r7, #20]
 8007088:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800708a:	693b      	ldr	r3, [r7, #16]
 800708c:	e002      	b.n	8007094 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800708e:	2300      	movs	r3, #0
 8007090:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8007092:	693b      	ldr	r3, [r7, #16]
}
 8007094:	4618      	mov	r0, r3
 8007096:	371c      	adds	r7, #28
 8007098:	46bd      	mov	sp, r7
 800709a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709e:	4770      	bx	lr

080070a0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80070a0:	b580      	push	{r7, lr}
 80070a2:	b082      	sub	sp, #8
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]
 80070a8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	2200      	movs	r2, #0
 80070ae:	70da      	strb	r2, [r3, #3]
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	f04f 32ff 	mov.w	r2, #4294967295
 80070b6:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80070b8:	6839      	ldr	r1, [r7, #0]
 80070ba:	6878      	ldr	r0, [r7, #4]
 80070bc:	f7fe fc76 	bl	80059ac <move_window>
 80070c0:	4603      	mov	r3, r0
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d001      	beq.n	80070ca <check_fs+0x2a>
 80070c6:	2304      	movs	r3, #4
 80070c8:	e038      	b.n	800713c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	3338      	adds	r3, #56	; 0x38
 80070ce:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80070d2:	4618      	mov	r0, r3
 80070d4:	f7fe f9ba 	bl	800544c <ld_word>
 80070d8:	4603      	mov	r3, r0
 80070da:	461a      	mov	r2, r3
 80070dc:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80070e0:	429a      	cmp	r2, r3
 80070e2:	d001      	beq.n	80070e8 <check_fs+0x48>
 80070e4:	2303      	movs	r3, #3
 80070e6:	e029      	b.n	800713c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80070ee:	2be9      	cmp	r3, #233	; 0xe9
 80070f0:	d009      	beq.n	8007106 <check_fs+0x66>
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80070f8:	2beb      	cmp	r3, #235	; 0xeb
 80070fa:	d11e      	bne.n	800713a <check_fs+0x9a>
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8007102:	2b90      	cmp	r3, #144	; 0x90
 8007104:	d119      	bne.n	800713a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	3338      	adds	r3, #56	; 0x38
 800710a:	3336      	adds	r3, #54	; 0x36
 800710c:	4618      	mov	r0, r3
 800710e:	f7fe f9b5 	bl	800547c <ld_dword>
 8007112:	4603      	mov	r3, r0
 8007114:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007118:	4a0a      	ldr	r2, [pc, #40]	; (8007144 <check_fs+0xa4>)
 800711a:	4293      	cmp	r3, r2
 800711c:	d101      	bne.n	8007122 <check_fs+0x82>
 800711e:	2300      	movs	r3, #0
 8007120:	e00c      	b.n	800713c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	3338      	adds	r3, #56	; 0x38
 8007126:	3352      	adds	r3, #82	; 0x52
 8007128:	4618      	mov	r0, r3
 800712a:	f7fe f9a7 	bl	800547c <ld_dword>
 800712e:	4603      	mov	r3, r0
 8007130:	4a05      	ldr	r2, [pc, #20]	; (8007148 <check_fs+0xa8>)
 8007132:	4293      	cmp	r3, r2
 8007134:	d101      	bne.n	800713a <check_fs+0x9a>
 8007136:	2300      	movs	r3, #0
 8007138:	e000      	b.n	800713c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800713a:	2302      	movs	r3, #2
}
 800713c:	4618      	mov	r0, r3
 800713e:	3708      	adds	r7, #8
 8007140:	46bd      	mov	sp, r7
 8007142:	bd80      	pop	{r7, pc}
 8007144:	00544146 	.word	0x00544146
 8007148:	33544146 	.word	0x33544146

0800714c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800714c:	b580      	push	{r7, lr}
 800714e:	b096      	sub	sp, #88	; 0x58
 8007150:	af00      	add	r7, sp, #0
 8007152:	60f8      	str	r0, [r7, #12]
 8007154:	60b9      	str	r1, [r7, #8]
 8007156:	4613      	mov	r3, r2
 8007158:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800715a:	68bb      	ldr	r3, [r7, #8]
 800715c:	2200      	movs	r2, #0
 800715e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8007160:	68f8      	ldr	r0, [r7, #12]
 8007162:	f7ff ff59 	bl	8007018 <get_ldnumber>
 8007166:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8007168:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800716a:	2b00      	cmp	r3, #0
 800716c:	da01      	bge.n	8007172 <find_volume+0x26>
 800716e:	230b      	movs	r3, #11
 8007170:	e265      	b.n	800763e <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8007172:	4a9f      	ldr	r2, [pc, #636]	; (80073f0 <find_volume+0x2a4>)
 8007174:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007176:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800717a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800717c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800717e:	2b00      	cmp	r3, #0
 8007180:	d101      	bne.n	8007186 <find_volume+0x3a>
 8007182:	230c      	movs	r3, #12
 8007184:	e25b      	b.n	800763e <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8007186:	68bb      	ldr	r3, [r7, #8]
 8007188:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800718a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800718c:	79fb      	ldrb	r3, [r7, #7]
 800718e:	f023 0301 	bic.w	r3, r3, #1
 8007192:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8007194:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007196:	781b      	ldrb	r3, [r3, #0]
 8007198:	2b00      	cmp	r3, #0
 800719a:	d01a      	beq.n	80071d2 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800719c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800719e:	785b      	ldrb	r3, [r3, #1]
 80071a0:	4618      	mov	r0, r3
 80071a2:	f7fe f8b5 	bl	8005310 <disk_status>
 80071a6:	4603      	mov	r3, r0
 80071a8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80071ac:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80071b0:	f003 0301 	and.w	r3, r3, #1
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d10c      	bne.n	80071d2 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80071b8:	79fb      	ldrb	r3, [r7, #7]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d007      	beq.n	80071ce <find_volume+0x82>
 80071be:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80071c2:	f003 0304 	and.w	r3, r3, #4
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d001      	beq.n	80071ce <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80071ca:	230a      	movs	r3, #10
 80071cc:	e237      	b.n	800763e <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 80071ce:	2300      	movs	r3, #0
 80071d0:	e235      	b.n	800763e <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80071d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071d4:	2200      	movs	r2, #0
 80071d6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80071d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071da:	b2da      	uxtb	r2, r3
 80071dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071de:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80071e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071e2:	785b      	ldrb	r3, [r3, #1]
 80071e4:	4618      	mov	r0, r3
 80071e6:	f7fe f8ad 	bl	8005344 <disk_initialize>
 80071ea:	4603      	mov	r3, r0
 80071ec:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80071f0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80071f4:	f003 0301 	and.w	r3, r3, #1
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d001      	beq.n	8007200 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80071fc:	2303      	movs	r3, #3
 80071fe:	e21e      	b.n	800763e <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8007200:	79fb      	ldrb	r3, [r7, #7]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d007      	beq.n	8007216 <find_volume+0xca>
 8007206:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800720a:	f003 0304 	and.w	r3, r3, #4
 800720e:	2b00      	cmp	r3, #0
 8007210:	d001      	beq.n	8007216 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8007212:	230a      	movs	r3, #10
 8007214:	e213      	b.n	800763e <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8007216:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007218:	7858      	ldrb	r0, [r3, #1]
 800721a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800721c:	330c      	adds	r3, #12
 800721e:	461a      	mov	r2, r3
 8007220:	2102      	movs	r1, #2
 8007222:	f7fe f8f5 	bl	8005410 <disk_ioctl>
 8007226:	4603      	mov	r3, r0
 8007228:	2b00      	cmp	r3, #0
 800722a:	d001      	beq.n	8007230 <find_volume+0xe4>
 800722c:	2301      	movs	r3, #1
 800722e:	e206      	b.n	800763e <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8007230:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007232:	899b      	ldrh	r3, [r3, #12]
 8007234:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007238:	d80d      	bhi.n	8007256 <find_volume+0x10a>
 800723a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800723c:	899b      	ldrh	r3, [r3, #12]
 800723e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007242:	d308      	bcc.n	8007256 <find_volume+0x10a>
 8007244:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007246:	899b      	ldrh	r3, [r3, #12]
 8007248:	461a      	mov	r2, r3
 800724a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800724c:	899b      	ldrh	r3, [r3, #12]
 800724e:	3b01      	subs	r3, #1
 8007250:	4013      	ands	r3, r2
 8007252:	2b00      	cmp	r3, #0
 8007254:	d001      	beq.n	800725a <find_volume+0x10e>
 8007256:	2301      	movs	r3, #1
 8007258:	e1f1      	b.n	800763e <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800725a:	2300      	movs	r3, #0
 800725c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800725e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007260:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007262:	f7ff ff1d 	bl	80070a0 <check_fs>
 8007266:	4603      	mov	r3, r0
 8007268:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800726c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007270:	2b02      	cmp	r3, #2
 8007272:	d149      	bne.n	8007308 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007274:	2300      	movs	r3, #0
 8007276:	643b      	str	r3, [r7, #64]	; 0x40
 8007278:	e01e      	b.n	80072b8 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800727a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800727c:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8007280:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007282:	011b      	lsls	r3, r3, #4
 8007284:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8007288:	4413      	add	r3, r2
 800728a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800728c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800728e:	3304      	adds	r3, #4
 8007290:	781b      	ldrb	r3, [r3, #0]
 8007292:	2b00      	cmp	r3, #0
 8007294:	d006      	beq.n	80072a4 <find_volume+0x158>
 8007296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007298:	3308      	adds	r3, #8
 800729a:	4618      	mov	r0, r3
 800729c:	f7fe f8ee 	bl	800547c <ld_dword>
 80072a0:	4602      	mov	r2, r0
 80072a2:	e000      	b.n	80072a6 <find_volume+0x15a>
 80072a4:	2200      	movs	r2, #0
 80072a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80072a8:	009b      	lsls	r3, r3, #2
 80072aa:	3358      	adds	r3, #88	; 0x58
 80072ac:	443b      	add	r3, r7
 80072ae:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80072b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80072b4:	3301      	adds	r3, #1
 80072b6:	643b      	str	r3, [r7, #64]	; 0x40
 80072b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80072ba:	2b03      	cmp	r3, #3
 80072bc:	d9dd      	bls.n	800727a <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80072be:	2300      	movs	r3, #0
 80072c0:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80072c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d002      	beq.n	80072ce <find_volume+0x182>
 80072c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80072ca:	3b01      	subs	r3, #1
 80072cc:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80072ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80072d0:	009b      	lsls	r3, r3, #2
 80072d2:	3358      	adds	r3, #88	; 0x58
 80072d4:	443b      	add	r3, r7
 80072d6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80072da:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80072dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d005      	beq.n	80072ee <find_volume+0x1a2>
 80072e2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80072e4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80072e6:	f7ff fedb 	bl	80070a0 <check_fs>
 80072ea:	4603      	mov	r3, r0
 80072ec:	e000      	b.n	80072f0 <find_volume+0x1a4>
 80072ee:	2303      	movs	r3, #3
 80072f0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80072f4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80072f8:	2b01      	cmp	r3, #1
 80072fa:	d905      	bls.n	8007308 <find_volume+0x1bc>
 80072fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80072fe:	3301      	adds	r3, #1
 8007300:	643b      	str	r3, [r7, #64]	; 0x40
 8007302:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007304:	2b03      	cmp	r3, #3
 8007306:	d9e2      	bls.n	80072ce <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8007308:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800730c:	2b04      	cmp	r3, #4
 800730e:	d101      	bne.n	8007314 <find_volume+0x1c8>
 8007310:	2301      	movs	r3, #1
 8007312:	e194      	b.n	800763e <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8007314:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007318:	2b01      	cmp	r3, #1
 800731a:	d901      	bls.n	8007320 <find_volume+0x1d4>
 800731c:	230d      	movs	r3, #13
 800731e:	e18e      	b.n	800763e <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8007320:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007322:	3338      	adds	r3, #56	; 0x38
 8007324:	330b      	adds	r3, #11
 8007326:	4618      	mov	r0, r3
 8007328:	f7fe f890 	bl	800544c <ld_word>
 800732c:	4603      	mov	r3, r0
 800732e:	461a      	mov	r2, r3
 8007330:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007332:	899b      	ldrh	r3, [r3, #12]
 8007334:	429a      	cmp	r2, r3
 8007336:	d001      	beq.n	800733c <find_volume+0x1f0>
 8007338:	230d      	movs	r3, #13
 800733a:	e180      	b.n	800763e <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800733c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800733e:	3338      	adds	r3, #56	; 0x38
 8007340:	3316      	adds	r3, #22
 8007342:	4618      	mov	r0, r3
 8007344:	f7fe f882 	bl	800544c <ld_word>
 8007348:	4603      	mov	r3, r0
 800734a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800734c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800734e:	2b00      	cmp	r3, #0
 8007350:	d106      	bne.n	8007360 <find_volume+0x214>
 8007352:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007354:	3338      	adds	r3, #56	; 0x38
 8007356:	3324      	adds	r3, #36	; 0x24
 8007358:	4618      	mov	r0, r3
 800735a:	f7fe f88f 	bl	800547c <ld_dword>
 800735e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8007360:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007362:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007364:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8007366:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007368:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800736c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800736e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8007370:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007372:	789b      	ldrb	r3, [r3, #2]
 8007374:	2b01      	cmp	r3, #1
 8007376:	d005      	beq.n	8007384 <find_volume+0x238>
 8007378:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800737a:	789b      	ldrb	r3, [r3, #2]
 800737c:	2b02      	cmp	r3, #2
 800737e:	d001      	beq.n	8007384 <find_volume+0x238>
 8007380:	230d      	movs	r3, #13
 8007382:	e15c      	b.n	800763e <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8007384:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007386:	789b      	ldrb	r3, [r3, #2]
 8007388:	461a      	mov	r2, r3
 800738a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800738c:	fb02 f303 	mul.w	r3, r2, r3
 8007390:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8007392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007394:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007398:	b29a      	uxth	r2, r3
 800739a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800739c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800739e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073a0:	895b      	ldrh	r3, [r3, #10]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d008      	beq.n	80073b8 <find_volume+0x26c>
 80073a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073a8:	895b      	ldrh	r3, [r3, #10]
 80073aa:	461a      	mov	r2, r3
 80073ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073ae:	895b      	ldrh	r3, [r3, #10]
 80073b0:	3b01      	subs	r3, #1
 80073b2:	4013      	ands	r3, r2
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d001      	beq.n	80073bc <find_volume+0x270>
 80073b8:	230d      	movs	r3, #13
 80073ba:	e140      	b.n	800763e <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80073bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073be:	3338      	adds	r3, #56	; 0x38
 80073c0:	3311      	adds	r3, #17
 80073c2:	4618      	mov	r0, r3
 80073c4:	f7fe f842 	bl	800544c <ld_word>
 80073c8:	4603      	mov	r3, r0
 80073ca:	461a      	mov	r2, r3
 80073cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073ce:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80073d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073d2:	891b      	ldrh	r3, [r3, #8]
 80073d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80073d6:	8992      	ldrh	r2, [r2, #12]
 80073d8:	0952      	lsrs	r2, r2, #5
 80073da:	b292      	uxth	r2, r2
 80073dc:	fbb3 f1f2 	udiv	r1, r3, r2
 80073e0:	fb01 f202 	mul.w	r2, r1, r2
 80073e4:	1a9b      	subs	r3, r3, r2
 80073e6:	b29b      	uxth	r3, r3
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d003      	beq.n	80073f4 <find_volume+0x2a8>
 80073ec:	230d      	movs	r3, #13
 80073ee:	e126      	b.n	800763e <find_volume+0x4f2>
 80073f0:	20000370 	.word	0x20000370

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80073f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073f6:	3338      	adds	r3, #56	; 0x38
 80073f8:	3313      	adds	r3, #19
 80073fa:	4618      	mov	r0, r3
 80073fc:	f7fe f826 	bl	800544c <ld_word>
 8007400:	4603      	mov	r3, r0
 8007402:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8007404:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007406:	2b00      	cmp	r3, #0
 8007408:	d106      	bne.n	8007418 <find_volume+0x2cc>
 800740a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800740c:	3338      	adds	r3, #56	; 0x38
 800740e:	3320      	adds	r3, #32
 8007410:	4618      	mov	r0, r3
 8007412:	f7fe f833 	bl	800547c <ld_dword>
 8007416:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8007418:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800741a:	3338      	adds	r3, #56	; 0x38
 800741c:	330e      	adds	r3, #14
 800741e:	4618      	mov	r0, r3
 8007420:	f7fe f814 	bl	800544c <ld_word>
 8007424:	4603      	mov	r3, r0
 8007426:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8007428:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800742a:	2b00      	cmp	r3, #0
 800742c:	d101      	bne.n	8007432 <find_volume+0x2e6>
 800742e:	230d      	movs	r3, #13
 8007430:	e105      	b.n	800763e <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8007432:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007434:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007436:	4413      	add	r3, r2
 8007438:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800743a:	8911      	ldrh	r1, [r2, #8]
 800743c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800743e:	8992      	ldrh	r2, [r2, #12]
 8007440:	0952      	lsrs	r2, r2, #5
 8007442:	b292      	uxth	r2, r2
 8007444:	fbb1 f2f2 	udiv	r2, r1, r2
 8007448:	b292      	uxth	r2, r2
 800744a:	4413      	add	r3, r2
 800744c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800744e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007452:	429a      	cmp	r2, r3
 8007454:	d201      	bcs.n	800745a <find_volume+0x30e>
 8007456:	230d      	movs	r3, #13
 8007458:	e0f1      	b.n	800763e <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800745a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800745c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800745e:	1ad3      	subs	r3, r2, r3
 8007460:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007462:	8952      	ldrh	r2, [r2, #10]
 8007464:	fbb3 f3f2 	udiv	r3, r3, r2
 8007468:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800746a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800746c:	2b00      	cmp	r3, #0
 800746e:	d101      	bne.n	8007474 <find_volume+0x328>
 8007470:	230d      	movs	r3, #13
 8007472:	e0e4      	b.n	800763e <find_volume+0x4f2>
		fmt = FS_FAT32;
 8007474:	2303      	movs	r3, #3
 8007476:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800747a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800747c:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8007480:	4293      	cmp	r3, r2
 8007482:	d802      	bhi.n	800748a <find_volume+0x33e>
 8007484:	2302      	movs	r3, #2
 8007486:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800748a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800748c:	f640 72f5 	movw	r2, #4085	; 0xff5
 8007490:	4293      	cmp	r3, r2
 8007492:	d802      	bhi.n	800749a <find_volume+0x34e>
 8007494:	2301      	movs	r3, #1
 8007496:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800749a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800749c:	1c9a      	adds	r2, r3, #2
 800749e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074a0:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 80074a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074a4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80074a6:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80074a8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80074aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80074ac:	441a      	add	r2, r3
 80074ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074b0:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 80074b2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80074b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074b6:	441a      	add	r2, r3
 80074b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074ba:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 80074bc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80074c0:	2b03      	cmp	r3, #3
 80074c2:	d11e      	bne.n	8007502 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80074c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074c6:	3338      	adds	r3, #56	; 0x38
 80074c8:	332a      	adds	r3, #42	; 0x2a
 80074ca:	4618      	mov	r0, r3
 80074cc:	f7fd ffbe 	bl	800544c <ld_word>
 80074d0:	4603      	mov	r3, r0
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d001      	beq.n	80074da <find_volume+0x38e>
 80074d6:	230d      	movs	r3, #13
 80074d8:	e0b1      	b.n	800763e <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80074da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074dc:	891b      	ldrh	r3, [r3, #8]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d001      	beq.n	80074e6 <find_volume+0x39a>
 80074e2:	230d      	movs	r3, #13
 80074e4:	e0ab      	b.n	800763e <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80074e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074e8:	3338      	adds	r3, #56	; 0x38
 80074ea:	332c      	adds	r3, #44	; 0x2c
 80074ec:	4618      	mov	r0, r3
 80074ee:	f7fd ffc5 	bl	800547c <ld_dword>
 80074f2:	4602      	mov	r2, r0
 80074f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074f6:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80074f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074fa:	69db      	ldr	r3, [r3, #28]
 80074fc:	009b      	lsls	r3, r3, #2
 80074fe:	647b      	str	r3, [r7, #68]	; 0x44
 8007500:	e01f      	b.n	8007542 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8007502:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007504:	891b      	ldrh	r3, [r3, #8]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d101      	bne.n	800750e <find_volume+0x3c2>
 800750a:	230d      	movs	r3, #13
 800750c:	e097      	b.n	800763e <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800750e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007510:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007512:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007514:	441a      	add	r2, r3
 8007516:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007518:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800751a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800751e:	2b02      	cmp	r3, #2
 8007520:	d103      	bne.n	800752a <find_volume+0x3de>
 8007522:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007524:	69db      	ldr	r3, [r3, #28]
 8007526:	005b      	lsls	r3, r3, #1
 8007528:	e00a      	b.n	8007540 <find_volume+0x3f4>
 800752a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800752c:	69da      	ldr	r2, [r3, #28]
 800752e:	4613      	mov	r3, r2
 8007530:	005b      	lsls	r3, r3, #1
 8007532:	4413      	add	r3, r2
 8007534:	085a      	lsrs	r2, r3, #1
 8007536:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007538:	69db      	ldr	r3, [r3, #28]
 800753a:	f003 0301 	and.w	r3, r3, #1
 800753e:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8007540:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8007542:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007544:	6a1a      	ldr	r2, [r3, #32]
 8007546:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007548:	899b      	ldrh	r3, [r3, #12]
 800754a:	4619      	mov	r1, r3
 800754c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800754e:	440b      	add	r3, r1
 8007550:	3b01      	subs	r3, #1
 8007552:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007554:	8989      	ldrh	r1, [r1, #12]
 8007556:	fbb3 f3f1 	udiv	r3, r3, r1
 800755a:	429a      	cmp	r2, r3
 800755c:	d201      	bcs.n	8007562 <find_volume+0x416>
 800755e:	230d      	movs	r3, #13
 8007560:	e06d      	b.n	800763e <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8007562:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007564:	f04f 32ff 	mov.w	r2, #4294967295
 8007568:	619a      	str	r2, [r3, #24]
 800756a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800756c:	699a      	ldr	r2, [r3, #24]
 800756e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007570:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 8007572:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007574:	2280      	movs	r2, #128	; 0x80
 8007576:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8007578:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800757c:	2b03      	cmp	r3, #3
 800757e:	d149      	bne.n	8007614 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8007580:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007582:	3338      	adds	r3, #56	; 0x38
 8007584:	3330      	adds	r3, #48	; 0x30
 8007586:	4618      	mov	r0, r3
 8007588:	f7fd ff60 	bl	800544c <ld_word>
 800758c:	4603      	mov	r3, r0
 800758e:	2b01      	cmp	r3, #1
 8007590:	d140      	bne.n	8007614 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 8007592:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007594:	3301      	adds	r3, #1
 8007596:	4619      	mov	r1, r3
 8007598:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800759a:	f7fe fa07 	bl	80059ac <move_window>
 800759e:	4603      	mov	r3, r0
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d137      	bne.n	8007614 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 80075a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075a6:	2200      	movs	r2, #0
 80075a8:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80075aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075ac:	3338      	adds	r3, #56	; 0x38
 80075ae:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80075b2:	4618      	mov	r0, r3
 80075b4:	f7fd ff4a 	bl	800544c <ld_word>
 80075b8:	4603      	mov	r3, r0
 80075ba:	461a      	mov	r2, r3
 80075bc:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80075c0:	429a      	cmp	r2, r3
 80075c2:	d127      	bne.n	8007614 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80075c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075c6:	3338      	adds	r3, #56	; 0x38
 80075c8:	4618      	mov	r0, r3
 80075ca:	f7fd ff57 	bl	800547c <ld_dword>
 80075ce:	4603      	mov	r3, r0
 80075d0:	4a1d      	ldr	r2, [pc, #116]	; (8007648 <find_volume+0x4fc>)
 80075d2:	4293      	cmp	r3, r2
 80075d4:	d11e      	bne.n	8007614 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80075d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075d8:	3338      	adds	r3, #56	; 0x38
 80075da:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80075de:	4618      	mov	r0, r3
 80075e0:	f7fd ff4c 	bl	800547c <ld_dword>
 80075e4:	4603      	mov	r3, r0
 80075e6:	4a19      	ldr	r2, [pc, #100]	; (800764c <find_volume+0x500>)
 80075e8:	4293      	cmp	r3, r2
 80075ea:	d113      	bne.n	8007614 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80075ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075ee:	3338      	adds	r3, #56	; 0x38
 80075f0:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80075f4:	4618      	mov	r0, r3
 80075f6:	f7fd ff41 	bl	800547c <ld_dword>
 80075fa:	4602      	mov	r2, r0
 80075fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075fe:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8007600:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007602:	3338      	adds	r3, #56	; 0x38
 8007604:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8007608:	4618      	mov	r0, r3
 800760a:	f7fd ff37 	bl	800547c <ld_dword>
 800760e:	4602      	mov	r2, r0
 8007610:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007612:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8007614:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007616:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800761a:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800761c:	4b0c      	ldr	r3, [pc, #48]	; (8007650 <find_volume+0x504>)
 800761e:	881b      	ldrh	r3, [r3, #0]
 8007620:	3301      	adds	r3, #1
 8007622:	b29a      	uxth	r2, r3
 8007624:	4b0a      	ldr	r3, [pc, #40]	; (8007650 <find_volume+0x504>)
 8007626:	801a      	strh	r2, [r3, #0]
 8007628:	4b09      	ldr	r3, [pc, #36]	; (8007650 <find_volume+0x504>)
 800762a:	881a      	ldrh	r2, [r3, #0]
 800762c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800762e:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8007630:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007632:	4a08      	ldr	r2, [pc, #32]	; (8007654 <find_volume+0x508>)
 8007634:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8007636:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007638:	f7fe f950 	bl	80058dc <clear_lock>
#endif
	return FR_OK;
 800763c:	2300      	movs	r3, #0
}
 800763e:	4618      	mov	r0, r3
 8007640:	3758      	adds	r7, #88	; 0x58
 8007642:	46bd      	mov	sp, r7
 8007644:	bd80      	pop	{r7, pc}
 8007646:	bf00      	nop
 8007648:	41615252 	.word	0x41615252
 800764c:	61417272 	.word	0x61417272
 8007650:	20000374 	.word	0x20000374
 8007654:	20000398 	.word	0x20000398

08007658 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8007658:	b580      	push	{r7, lr}
 800765a:	b084      	sub	sp, #16
 800765c:	af00      	add	r7, sp, #0
 800765e:	6078      	str	r0, [r7, #4]
 8007660:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8007662:	2309      	movs	r3, #9
 8007664:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	2b00      	cmp	r3, #0
 800766a:	d01c      	beq.n	80076a6 <validate+0x4e>
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	2b00      	cmp	r3, #0
 8007672:	d018      	beq.n	80076a6 <validate+0x4e>
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	781b      	ldrb	r3, [r3, #0]
 800767a:	2b00      	cmp	r3, #0
 800767c:	d013      	beq.n	80076a6 <validate+0x4e>
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	889a      	ldrh	r2, [r3, #4]
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	88db      	ldrh	r3, [r3, #6]
 8007688:	429a      	cmp	r2, r3
 800768a:	d10c      	bne.n	80076a6 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	785b      	ldrb	r3, [r3, #1]
 8007692:	4618      	mov	r0, r3
 8007694:	f7fd fe3c 	bl	8005310 <disk_status>
 8007698:	4603      	mov	r3, r0
 800769a:	f003 0301 	and.w	r3, r3, #1
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d101      	bne.n	80076a6 <validate+0x4e>
			res = FR_OK;
 80076a2:	2300      	movs	r3, #0
 80076a4:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80076a6:	7bfb      	ldrb	r3, [r7, #15]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d102      	bne.n	80076b2 <validate+0x5a>
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	e000      	b.n	80076b4 <validate+0x5c>
 80076b2:	2300      	movs	r3, #0
 80076b4:	683a      	ldr	r2, [r7, #0]
 80076b6:	6013      	str	r3, [r2, #0]
	return res;
 80076b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80076ba:	4618      	mov	r0, r3
 80076bc:	3710      	adds	r7, #16
 80076be:	46bd      	mov	sp, r7
 80076c0:	bd80      	pop	{r7, pc}
	...

080076c4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b088      	sub	sp, #32
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	60f8      	str	r0, [r7, #12]
 80076cc:	60b9      	str	r1, [r7, #8]
 80076ce:	4613      	mov	r3, r2
 80076d0:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80076d2:	68bb      	ldr	r3, [r7, #8]
 80076d4:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80076d6:	f107 0310 	add.w	r3, r7, #16
 80076da:	4618      	mov	r0, r3
 80076dc:	f7ff fc9c 	bl	8007018 <get_ldnumber>
 80076e0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80076e2:	69fb      	ldr	r3, [r7, #28]
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	da01      	bge.n	80076ec <f_mount+0x28>
 80076e8:	230b      	movs	r3, #11
 80076ea:	e02b      	b.n	8007744 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80076ec:	4a17      	ldr	r2, [pc, #92]	; (800774c <f_mount+0x88>)
 80076ee:	69fb      	ldr	r3, [r7, #28]
 80076f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80076f4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80076f6:	69bb      	ldr	r3, [r7, #24]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d005      	beq.n	8007708 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80076fc:	69b8      	ldr	r0, [r7, #24]
 80076fe:	f7fe f8ed 	bl	80058dc <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8007702:	69bb      	ldr	r3, [r7, #24]
 8007704:	2200      	movs	r2, #0
 8007706:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	2b00      	cmp	r3, #0
 800770c:	d002      	beq.n	8007714 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	2200      	movs	r2, #0
 8007712:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8007714:	68fa      	ldr	r2, [r7, #12]
 8007716:	490d      	ldr	r1, [pc, #52]	; (800774c <f_mount+0x88>)
 8007718:	69fb      	ldr	r3, [r7, #28]
 800771a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	2b00      	cmp	r3, #0
 8007722:	d002      	beq.n	800772a <f_mount+0x66>
 8007724:	79fb      	ldrb	r3, [r7, #7]
 8007726:	2b01      	cmp	r3, #1
 8007728:	d001      	beq.n	800772e <f_mount+0x6a>
 800772a:	2300      	movs	r3, #0
 800772c:	e00a      	b.n	8007744 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800772e:	f107 010c 	add.w	r1, r7, #12
 8007732:	f107 0308 	add.w	r3, r7, #8
 8007736:	2200      	movs	r2, #0
 8007738:	4618      	mov	r0, r3
 800773a:	f7ff fd07 	bl	800714c <find_volume>
 800773e:	4603      	mov	r3, r0
 8007740:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8007742:	7dfb      	ldrb	r3, [r7, #23]
}
 8007744:	4618      	mov	r0, r3
 8007746:	3720      	adds	r7, #32
 8007748:	46bd      	mov	sp, r7
 800774a:	bd80      	pop	{r7, pc}
 800774c:	20000370 	.word	0x20000370

08007750 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8007750:	b580      	push	{r7, lr}
 8007752:	b09a      	sub	sp, #104	; 0x68
 8007754:	af00      	add	r7, sp, #0
 8007756:	60f8      	str	r0, [r7, #12]
 8007758:	60b9      	str	r1, [r7, #8]
 800775a:	4613      	mov	r3, r2
 800775c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	2b00      	cmp	r3, #0
 8007762:	d101      	bne.n	8007768 <f_open+0x18>
 8007764:	2309      	movs	r3, #9
 8007766:	e1bb      	b.n	8007ae0 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8007768:	79fb      	ldrb	r3, [r7, #7]
 800776a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800776e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8007770:	79fa      	ldrb	r2, [r7, #7]
 8007772:	f107 0114 	add.w	r1, r7, #20
 8007776:	f107 0308 	add.w	r3, r7, #8
 800777a:	4618      	mov	r0, r3
 800777c:	f7ff fce6 	bl	800714c <find_volume>
 8007780:	4603      	mov	r3, r0
 8007782:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 8007786:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800778a:	2b00      	cmp	r3, #0
 800778c:	f040 819f 	bne.w	8007ace <f_open+0x37e>
		dj.obj.fs = fs;
 8007790:	697b      	ldr	r3, [r7, #20]
 8007792:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8007794:	68ba      	ldr	r2, [r7, #8]
 8007796:	f107 0318 	add.w	r3, r7, #24
 800779a:	4611      	mov	r1, r2
 800779c:	4618      	mov	r0, r3
 800779e:	f7ff fbc5 	bl	8006f2c <follow_path>
 80077a2:	4603      	mov	r3, r0
 80077a4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80077a8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d11a      	bne.n	80077e6 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80077b0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80077b4:	b25b      	sxtb	r3, r3
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	da03      	bge.n	80077c2 <f_open+0x72>
				res = FR_INVALID_NAME;
 80077ba:	2306      	movs	r3, #6
 80077bc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80077c0:	e011      	b.n	80077e6 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80077c2:	79fb      	ldrb	r3, [r7, #7]
 80077c4:	f023 0301 	bic.w	r3, r3, #1
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	bf14      	ite	ne
 80077cc:	2301      	movne	r3, #1
 80077ce:	2300      	moveq	r3, #0
 80077d0:	b2db      	uxtb	r3, r3
 80077d2:	461a      	mov	r2, r3
 80077d4:	f107 0318 	add.w	r3, r7, #24
 80077d8:	4611      	mov	r1, r2
 80077da:	4618      	mov	r0, r3
 80077dc:	f7fd ff36 	bl	800564c <chk_lock>
 80077e0:	4603      	mov	r3, r0
 80077e2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80077e6:	79fb      	ldrb	r3, [r7, #7]
 80077e8:	f003 031c 	and.w	r3, r3, #28
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d07f      	beq.n	80078f0 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 80077f0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d017      	beq.n	8007828 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80077f8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80077fc:	2b04      	cmp	r3, #4
 80077fe:	d10e      	bne.n	800781e <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8007800:	f7fd ff80 	bl	8005704 <enq_lock>
 8007804:	4603      	mov	r3, r0
 8007806:	2b00      	cmp	r3, #0
 8007808:	d006      	beq.n	8007818 <f_open+0xc8>
 800780a:	f107 0318 	add.w	r3, r7, #24
 800780e:	4618      	mov	r0, r3
 8007810:	f7ff f8dc 	bl	80069cc <dir_register>
 8007814:	4603      	mov	r3, r0
 8007816:	e000      	b.n	800781a <f_open+0xca>
 8007818:	2312      	movs	r3, #18
 800781a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800781e:	79fb      	ldrb	r3, [r7, #7]
 8007820:	f043 0308 	orr.w	r3, r3, #8
 8007824:	71fb      	strb	r3, [r7, #7]
 8007826:	e010      	b.n	800784a <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8007828:	7fbb      	ldrb	r3, [r7, #30]
 800782a:	f003 0311 	and.w	r3, r3, #17
 800782e:	2b00      	cmp	r3, #0
 8007830:	d003      	beq.n	800783a <f_open+0xea>
					res = FR_DENIED;
 8007832:	2307      	movs	r3, #7
 8007834:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8007838:	e007      	b.n	800784a <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800783a:	79fb      	ldrb	r3, [r7, #7]
 800783c:	f003 0304 	and.w	r3, r3, #4
 8007840:	2b00      	cmp	r3, #0
 8007842:	d002      	beq.n	800784a <f_open+0xfa>
 8007844:	2308      	movs	r3, #8
 8007846:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800784a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800784e:	2b00      	cmp	r3, #0
 8007850:	d168      	bne.n	8007924 <f_open+0x1d4>
 8007852:	79fb      	ldrb	r3, [r7, #7]
 8007854:	f003 0308 	and.w	r3, r3, #8
 8007858:	2b00      	cmp	r3, #0
 800785a:	d063      	beq.n	8007924 <f_open+0x1d4>
				dw = GET_FATTIME();
 800785c:	f7fd fcfa 	bl	8005254 <get_fattime>
 8007860:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8007862:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007864:	330e      	adds	r3, #14
 8007866:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007868:	4618      	mov	r0, r3
 800786a:	f7fd fe45 	bl	80054f8 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800786e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007870:	3316      	adds	r3, #22
 8007872:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007874:	4618      	mov	r0, r3
 8007876:	f7fd fe3f 	bl	80054f8 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800787a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800787c:	330b      	adds	r3, #11
 800787e:	2220      	movs	r2, #32
 8007880:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8007882:	697b      	ldr	r3, [r7, #20]
 8007884:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007886:	4611      	mov	r1, r2
 8007888:	4618      	mov	r0, r3
 800788a:	f7fe fe17 	bl	80064bc <ld_clust>
 800788e:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8007890:	697b      	ldr	r3, [r7, #20]
 8007892:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007894:	2200      	movs	r2, #0
 8007896:	4618      	mov	r0, r3
 8007898:	f7fe fe2f 	bl	80064fa <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800789c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800789e:	331c      	adds	r3, #28
 80078a0:	2100      	movs	r1, #0
 80078a2:	4618      	mov	r0, r3
 80078a4:	f7fd fe28 	bl	80054f8 <st_dword>
					fs->wflag = 1;
 80078a8:	697b      	ldr	r3, [r7, #20]
 80078aa:	2201      	movs	r2, #1
 80078ac:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80078ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d037      	beq.n	8007924 <f_open+0x1d4>
						dw = fs->winsect;
 80078b4:	697b      	ldr	r3, [r7, #20]
 80078b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078b8:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 80078ba:	f107 0318 	add.w	r3, r7, #24
 80078be:	2200      	movs	r2, #0
 80078c0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80078c2:	4618      	mov	r0, r3
 80078c4:	f7fe fb1f 	bl	8005f06 <remove_chain>
 80078c8:	4603      	mov	r3, r0
 80078ca:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 80078ce:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d126      	bne.n	8007924 <f_open+0x1d4>
							res = move_window(fs, dw);
 80078d6:	697b      	ldr	r3, [r7, #20]
 80078d8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80078da:	4618      	mov	r0, r3
 80078dc:	f7fe f866 	bl	80059ac <move_window>
 80078e0:	4603      	mov	r3, r0
 80078e2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80078e6:	697b      	ldr	r3, [r7, #20]
 80078e8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80078ea:	3a01      	subs	r2, #1
 80078ec:	615a      	str	r2, [r3, #20]
 80078ee:	e019      	b.n	8007924 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80078f0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d115      	bne.n	8007924 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80078f8:	7fbb      	ldrb	r3, [r7, #30]
 80078fa:	f003 0310 	and.w	r3, r3, #16
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d003      	beq.n	800790a <f_open+0x1ba>
					res = FR_NO_FILE;
 8007902:	2304      	movs	r3, #4
 8007904:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8007908:	e00c      	b.n	8007924 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800790a:	79fb      	ldrb	r3, [r7, #7]
 800790c:	f003 0302 	and.w	r3, r3, #2
 8007910:	2b00      	cmp	r3, #0
 8007912:	d007      	beq.n	8007924 <f_open+0x1d4>
 8007914:	7fbb      	ldrb	r3, [r7, #30]
 8007916:	f003 0301 	and.w	r3, r3, #1
 800791a:	2b00      	cmp	r3, #0
 800791c:	d002      	beq.n	8007924 <f_open+0x1d4>
						res = FR_DENIED;
 800791e:	2307      	movs	r3, #7
 8007920:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8007924:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007928:	2b00      	cmp	r3, #0
 800792a:	d128      	bne.n	800797e <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800792c:	79fb      	ldrb	r3, [r7, #7]
 800792e:	f003 0308 	and.w	r3, r3, #8
 8007932:	2b00      	cmp	r3, #0
 8007934:	d003      	beq.n	800793e <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8007936:	79fb      	ldrb	r3, [r7, #7]
 8007938:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800793c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800793e:	697b      	ldr	r3, [r7, #20]
 8007940:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8007946:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800794c:	79fb      	ldrb	r3, [r7, #7]
 800794e:	f023 0301 	bic.w	r3, r3, #1
 8007952:	2b00      	cmp	r3, #0
 8007954:	bf14      	ite	ne
 8007956:	2301      	movne	r3, #1
 8007958:	2300      	moveq	r3, #0
 800795a:	b2db      	uxtb	r3, r3
 800795c:	461a      	mov	r2, r3
 800795e:	f107 0318 	add.w	r3, r7, #24
 8007962:	4611      	mov	r1, r2
 8007964:	4618      	mov	r0, r3
 8007966:	f7fd feef 	bl	8005748 <inc_lock>
 800796a:	4602      	mov	r2, r0
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	691b      	ldr	r3, [r3, #16]
 8007974:	2b00      	cmp	r3, #0
 8007976:	d102      	bne.n	800797e <f_open+0x22e>
 8007978:	2302      	movs	r3, #2
 800797a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800797e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007982:	2b00      	cmp	r3, #0
 8007984:	f040 80a3 	bne.w	8007ace <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8007988:	697b      	ldr	r3, [r7, #20]
 800798a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800798c:	4611      	mov	r1, r2
 800798e:	4618      	mov	r0, r3
 8007990:	f7fe fd94 	bl	80064bc <ld_clust>
 8007994:	4602      	mov	r2, r0
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800799a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800799c:	331c      	adds	r3, #28
 800799e:	4618      	mov	r0, r3
 80079a0:	f7fd fd6c 	bl	800547c <ld_dword>
 80079a4:	4602      	mov	r2, r0
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	2200      	movs	r2, #0
 80079ae:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80079b0:	697a      	ldr	r2, [r7, #20]
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80079b6:	697b      	ldr	r3, [r7, #20]
 80079b8:	88da      	ldrh	r2, [r3, #6]
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	79fa      	ldrb	r2, [r7, #7]
 80079c2:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	2200      	movs	r2, #0
 80079c8:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	2200      	movs	r2, #0
 80079ce:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	2200      	movs	r2, #0
 80079d4:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	3330      	adds	r3, #48	; 0x30
 80079da:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80079de:	2100      	movs	r1, #0
 80079e0:	4618      	mov	r0, r3
 80079e2:	f7fd fdd6 	bl	8005592 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80079e6:	79fb      	ldrb	r3, [r7, #7]
 80079e8:	f003 0320 	and.w	r3, r3, #32
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d06e      	beq.n	8007ace <f_open+0x37e>
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	68db      	ldr	r3, [r3, #12]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d06a      	beq.n	8007ace <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	68da      	ldr	r2, [r3, #12]
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8007a00:	697b      	ldr	r3, [r7, #20]
 8007a02:	895b      	ldrh	r3, [r3, #10]
 8007a04:	461a      	mov	r2, r3
 8007a06:	697b      	ldr	r3, [r7, #20]
 8007a08:	899b      	ldrh	r3, [r3, #12]
 8007a0a:	fb02 f303 	mul.w	r3, r2, r3
 8007a0e:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	689b      	ldr	r3, [r3, #8]
 8007a14:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	68db      	ldr	r3, [r3, #12]
 8007a1a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007a1c:	e016      	b.n	8007a4c <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8007a22:	4618      	mov	r0, r3
 8007a24:	f7fe f87f 	bl	8005b26 <get_fat>
 8007a28:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8007a2a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007a2c:	2b01      	cmp	r3, #1
 8007a2e:	d802      	bhi.n	8007a36 <f_open+0x2e6>
 8007a30:	2302      	movs	r3, #2
 8007a32:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8007a36:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007a38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a3c:	d102      	bne.n	8007a44 <f_open+0x2f4>
 8007a3e:	2301      	movs	r3, #1
 8007a40:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007a44:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007a46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a48:	1ad3      	subs	r3, r2, r3
 8007a4a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007a4c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d103      	bne.n	8007a5c <f_open+0x30c>
 8007a54:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007a56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a58:	429a      	cmp	r2, r3
 8007a5a:	d8e0      	bhi.n	8007a1e <f_open+0x2ce>
				}
				fp->clust = clst;
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007a60:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8007a62:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d131      	bne.n	8007ace <f_open+0x37e>
 8007a6a:	697b      	ldr	r3, [r7, #20]
 8007a6c:	899b      	ldrh	r3, [r3, #12]
 8007a6e:	461a      	mov	r2, r3
 8007a70:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007a72:	fbb3 f1f2 	udiv	r1, r3, r2
 8007a76:	fb01 f202 	mul.w	r2, r1, r2
 8007a7a:	1a9b      	subs	r3, r3, r2
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d026      	beq.n	8007ace <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8007a80:	697b      	ldr	r3, [r7, #20]
 8007a82:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8007a84:	4618      	mov	r0, r3
 8007a86:	f7fe f82f 	bl	8005ae8 <clust2sect>
 8007a8a:	64f8      	str	r0, [r7, #76]	; 0x4c
 8007a8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d103      	bne.n	8007a9a <f_open+0x34a>
						res = FR_INT_ERR;
 8007a92:	2302      	movs	r3, #2
 8007a94:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8007a98:	e019      	b.n	8007ace <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8007a9a:	697b      	ldr	r3, [r7, #20]
 8007a9c:	899b      	ldrh	r3, [r3, #12]
 8007a9e:	461a      	mov	r2, r3
 8007aa0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007aa2:	fbb3 f2f2 	udiv	r2, r3, r2
 8007aa6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007aa8:	441a      	add	r2, r3
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8007aae:	697b      	ldr	r3, [r7, #20]
 8007ab0:	7858      	ldrb	r0, [r3, #1]
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	6a1a      	ldr	r2, [r3, #32]
 8007abc:	2301      	movs	r3, #1
 8007abe:	f7fd fc67 	bl	8005390 <disk_read>
 8007ac2:	4603      	mov	r3, r0
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d002      	beq.n	8007ace <f_open+0x37e>
 8007ac8:	2301      	movs	r3, #1
 8007aca:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8007ace:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d002      	beq.n	8007adc <f_open+0x38c>
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	2200      	movs	r2, #0
 8007ada:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8007adc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8007ae0:	4618      	mov	r0, r3
 8007ae2:	3768      	adds	r7, #104	; 0x68
 8007ae4:	46bd      	mov	sp, r7
 8007ae6:	bd80      	pop	{r7, pc}

08007ae8 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8007ae8:	b580      	push	{r7, lr}
 8007aea:	b08c      	sub	sp, #48	; 0x30
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	60f8      	str	r0, [r7, #12]
 8007af0:	60b9      	str	r1, [r7, #8]
 8007af2:	607a      	str	r2, [r7, #4]
 8007af4:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8007af6:	68bb      	ldr	r3, [r7, #8]
 8007af8:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8007afa:	683b      	ldr	r3, [r7, #0]
 8007afc:	2200      	movs	r2, #0
 8007afe:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	f107 0210 	add.w	r2, r7, #16
 8007b06:	4611      	mov	r1, r2
 8007b08:	4618      	mov	r0, r3
 8007b0a:	f7ff fda5 	bl	8007658 <validate>
 8007b0e:	4603      	mov	r3, r0
 8007b10:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8007b14:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d107      	bne.n	8007b2c <f_write+0x44>
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	7d5b      	ldrb	r3, [r3, #21]
 8007b20:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8007b24:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d002      	beq.n	8007b32 <f_write+0x4a>
 8007b2c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007b30:	e16a      	b.n	8007e08 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	7d1b      	ldrb	r3, [r3, #20]
 8007b36:	f003 0302 	and.w	r3, r3, #2
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d101      	bne.n	8007b42 <f_write+0x5a>
 8007b3e:	2307      	movs	r3, #7
 8007b40:	e162      	b.n	8007e08 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	699a      	ldr	r2, [r3, #24]
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	441a      	add	r2, r3
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	699b      	ldr	r3, [r3, #24]
 8007b4e:	429a      	cmp	r2, r3
 8007b50:	f080 814c 	bcs.w	8007dec <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	699b      	ldr	r3, [r3, #24]
 8007b58:	43db      	mvns	r3, r3
 8007b5a:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8007b5c:	e146      	b.n	8007dec <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	699b      	ldr	r3, [r3, #24]
 8007b62:	693a      	ldr	r2, [r7, #16]
 8007b64:	8992      	ldrh	r2, [r2, #12]
 8007b66:	fbb3 f1f2 	udiv	r1, r3, r2
 8007b6a:	fb01 f202 	mul.w	r2, r1, r2
 8007b6e:	1a9b      	subs	r3, r3, r2
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	f040 80f1 	bne.w	8007d58 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	699b      	ldr	r3, [r3, #24]
 8007b7a:	693a      	ldr	r2, [r7, #16]
 8007b7c:	8992      	ldrh	r2, [r2, #12]
 8007b7e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007b82:	693a      	ldr	r2, [r7, #16]
 8007b84:	8952      	ldrh	r2, [r2, #10]
 8007b86:	3a01      	subs	r2, #1
 8007b88:	4013      	ands	r3, r2
 8007b8a:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8007b8c:	69bb      	ldr	r3, [r7, #24]
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d143      	bne.n	8007c1a <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	699b      	ldr	r3, [r3, #24]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d10c      	bne.n	8007bb4 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	689b      	ldr	r3, [r3, #8]
 8007b9e:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8007ba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d11a      	bne.n	8007bdc <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	2100      	movs	r1, #0
 8007baa:	4618      	mov	r0, r3
 8007bac:	f7fe fa10 	bl	8005fd0 <create_chain>
 8007bb0:	62b8      	str	r0, [r7, #40]	; 0x28
 8007bb2:	e013      	b.n	8007bdc <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d007      	beq.n	8007bcc <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	699b      	ldr	r3, [r3, #24]
 8007bc0:	4619      	mov	r1, r3
 8007bc2:	68f8      	ldr	r0, [r7, #12]
 8007bc4:	f7fe fa9c 	bl	8006100 <clmt_clust>
 8007bc8:	62b8      	str	r0, [r7, #40]	; 0x28
 8007bca:	e007      	b.n	8007bdc <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8007bcc:	68fa      	ldr	r2, [r7, #12]
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	69db      	ldr	r3, [r3, #28]
 8007bd2:	4619      	mov	r1, r3
 8007bd4:	4610      	mov	r0, r2
 8007bd6:	f7fe f9fb 	bl	8005fd0 <create_chain>
 8007bda:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8007bdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	f000 8109 	beq.w	8007df6 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8007be4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007be6:	2b01      	cmp	r3, #1
 8007be8:	d104      	bne.n	8007bf4 <f_write+0x10c>
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	2202      	movs	r2, #2
 8007bee:	755a      	strb	r2, [r3, #21]
 8007bf0:	2302      	movs	r3, #2
 8007bf2:	e109      	b.n	8007e08 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007bf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bfa:	d104      	bne.n	8007c06 <f_write+0x11e>
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	2201      	movs	r2, #1
 8007c00:	755a      	strb	r2, [r3, #21]
 8007c02:	2301      	movs	r3, #1
 8007c04:	e100      	b.n	8007e08 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007c0a:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	689b      	ldr	r3, [r3, #8]
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d102      	bne.n	8007c1a <f_write+0x132>
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007c18:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	7d1b      	ldrb	r3, [r3, #20]
 8007c1e:	b25b      	sxtb	r3, r3
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	da18      	bge.n	8007c56 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007c24:	693b      	ldr	r3, [r7, #16]
 8007c26:	7858      	ldrb	r0, [r3, #1]
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	6a1a      	ldr	r2, [r3, #32]
 8007c32:	2301      	movs	r3, #1
 8007c34:	f7fd fbcc 	bl	80053d0 <disk_write>
 8007c38:	4603      	mov	r3, r0
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d004      	beq.n	8007c48 <f_write+0x160>
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	2201      	movs	r2, #1
 8007c42:	755a      	strb	r2, [r3, #21]
 8007c44:	2301      	movs	r3, #1
 8007c46:	e0df      	b.n	8007e08 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	7d1b      	ldrb	r3, [r3, #20]
 8007c4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c50:	b2da      	uxtb	r2, r3
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8007c56:	693a      	ldr	r2, [r7, #16]
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	69db      	ldr	r3, [r3, #28]
 8007c5c:	4619      	mov	r1, r3
 8007c5e:	4610      	mov	r0, r2
 8007c60:	f7fd ff42 	bl	8005ae8 <clust2sect>
 8007c64:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8007c66:	697b      	ldr	r3, [r7, #20]
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d104      	bne.n	8007c76 <f_write+0x18e>
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	2202      	movs	r2, #2
 8007c70:	755a      	strb	r2, [r3, #21]
 8007c72:	2302      	movs	r3, #2
 8007c74:	e0c8      	b.n	8007e08 <f_write+0x320>
			sect += csect;
 8007c76:	697a      	ldr	r2, [r7, #20]
 8007c78:	69bb      	ldr	r3, [r7, #24]
 8007c7a:	4413      	add	r3, r2
 8007c7c:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8007c7e:	693b      	ldr	r3, [r7, #16]
 8007c80:	899b      	ldrh	r3, [r3, #12]
 8007c82:	461a      	mov	r2, r3
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	fbb3 f3f2 	udiv	r3, r3, r2
 8007c8a:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8007c8c:	6a3b      	ldr	r3, [r7, #32]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d043      	beq.n	8007d1a <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8007c92:	69ba      	ldr	r2, [r7, #24]
 8007c94:	6a3b      	ldr	r3, [r7, #32]
 8007c96:	4413      	add	r3, r2
 8007c98:	693a      	ldr	r2, [r7, #16]
 8007c9a:	8952      	ldrh	r2, [r2, #10]
 8007c9c:	4293      	cmp	r3, r2
 8007c9e:	d905      	bls.n	8007cac <f_write+0x1c4>
					cc = fs->csize - csect;
 8007ca0:	693b      	ldr	r3, [r7, #16]
 8007ca2:	895b      	ldrh	r3, [r3, #10]
 8007ca4:	461a      	mov	r2, r3
 8007ca6:	69bb      	ldr	r3, [r7, #24]
 8007ca8:	1ad3      	subs	r3, r2, r3
 8007caa:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007cac:	693b      	ldr	r3, [r7, #16]
 8007cae:	7858      	ldrb	r0, [r3, #1]
 8007cb0:	6a3b      	ldr	r3, [r7, #32]
 8007cb2:	697a      	ldr	r2, [r7, #20]
 8007cb4:	69f9      	ldr	r1, [r7, #28]
 8007cb6:	f7fd fb8b 	bl	80053d0 <disk_write>
 8007cba:	4603      	mov	r3, r0
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d004      	beq.n	8007cca <f_write+0x1e2>
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	2201      	movs	r2, #1
 8007cc4:	755a      	strb	r2, [r3, #21]
 8007cc6:	2301      	movs	r3, #1
 8007cc8:	e09e      	b.n	8007e08 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	6a1a      	ldr	r2, [r3, #32]
 8007cce:	697b      	ldr	r3, [r7, #20]
 8007cd0:	1ad3      	subs	r3, r2, r3
 8007cd2:	6a3a      	ldr	r2, [r7, #32]
 8007cd4:	429a      	cmp	r2, r3
 8007cd6:	d918      	bls.n	8007d0a <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	6a1a      	ldr	r2, [r3, #32]
 8007ce2:	697b      	ldr	r3, [r7, #20]
 8007ce4:	1ad3      	subs	r3, r2, r3
 8007ce6:	693a      	ldr	r2, [r7, #16]
 8007ce8:	8992      	ldrh	r2, [r2, #12]
 8007cea:	fb02 f303 	mul.w	r3, r2, r3
 8007cee:	69fa      	ldr	r2, [r7, #28]
 8007cf0:	18d1      	adds	r1, r2, r3
 8007cf2:	693b      	ldr	r3, [r7, #16]
 8007cf4:	899b      	ldrh	r3, [r3, #12]
 8007cf6:	461a      	mov	r2, r3
 8007cf8:	f7fd fc2a 	bl	8005550 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	7d1b      	ldrb	r3, [r3, #20]
 8007d00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007d04:	b2da      	uxtb	r2, r3
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8007d0a:	693b      	ldr	r3, [r7, #16]
 8007d0c:	899b      	ldrh	r3, [r3, #12]
 8007d0e:	461a      	mov	r2, r3
 8007d10:	6a3b      	ldr	r3, [r7, #32]
 8007d12:	fb02 f303 	mul.w	r3, r2, r3
 8007d16:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8007d18:	e04b      	b.n	8007db2 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	6a1b      	ldr	r3, [r3, #32]
 8007d1e:	697a      	ldr	r2, [r7, #20]
 8007d20:	429a      	cmp	r2, r3
 8007d22:	d016      	beq.n	8007d52 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	699a      	ldr	r2, [r3, #24]
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8007d2c:	429a      	cmp	r2, r3
 8007d2e:	d210      	bcs.n	8007d52 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8007d30:	693b      	ldr	r3, [r7, #16]
 8007d32:	7858      	ldrb	r0, [r3, #1]
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007d3a:	2301      	movs	r3, #1
 8007d3c:	697a      	ldr	r2, [r7, #20]
 8007d3e:	f7fd fb27 	bl	8005390 <disk_read>
 8007d42:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d004      	beq.n	8007d52 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	2201      	movs	r2, #1
 8007d4c:	755a      	strb	r2, [r3, #21]
 8007d4e:	2301      	movs	r3, #1
 8007d50:	e05a      	b.n	8007e08 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	697a      	ldr	r2, [r7, #20]
 8007d56:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8007d58:	693b      	ldr	r3, [r7, #16]
 8007d5a:	899b      	ldrh	r3, [r3, #12]
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	699b      	ldr	r3, [r3, #24]
 8007d62:	693a      	ldr	r2, [r7, #16]
 8007d64:	8992      	ldrh	r2, [r2, #12]
 8007d66:	fbb3 f1f2 	udiv	r1, r3, r2
 8007d6a:	fb01 f202 	mul.w	r2, r1, r2
 8007d6e:	1a9b      	subs	r3, r3, r2
 8007d70:	1ac3      	subs	r3, r0, r3
 8007d72:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8007d74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	429a      	cmp	r2, r3
 8007d7a:	d901      	bls.n	8007d80 <f_write+0x298>
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	699b      	ldr	r3, [r3, #24]
 8007d8a:	693a      	ldr	r2, [r7, #16]
 8007d8c:	8992      	ldrh	r2, [r2, #12]
 8007d8e:	fbb3 f0f2 	udiv	r0, r3, r2
 8007d92:	fb00 f202 	mul.w	r2, r0, r2
 8007d96:	1a9b      	subs	r3, r3, r2
 8007d98:	440b      	add	r3, r1
 8007d9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d9c:	69f9      	ldr	r1, [r7, #28]
 8007d9e:	4618      	mov	r0, r3
 8007da0:	f7fd fbd6 	bl	8005550 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	7d1b      	ldrb	r3, [r3, #20]
 8007da8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007dac:	b2da      	uxtb	r2, r3
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8007db2:	69fa      	ldr	r2, [r7, #28]
 8007db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007db6:	4413      	add	r3, r2
 8007db8:	61fb      	str	r3, [r7, #28]
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	699a      	ldr	r2, [r3, #24]
 8007dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dc0:	441a      	add	r2, r3
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	619a      	str	r2, [r3, #24]
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	68da      	ldr	r2, [r3, #12]
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	699b      	ldr	r3, [r3, #24]
 8007dce:	429a      	cmp	r2, r3
 8007dd0:	bf38      	it	cc
 8007dd2:	461a      	movcc	r2, r3
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	60da      	str	r2, [r3, #12]
 8007dd8:	683b      	ldr	r3, [r7, #0]
 8007dda:	681a      	ldr	r2, [r3, #0]
 8007ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dde:	441a      	add	r2, r3
 8007de0:	683b      	ldr	r3, [r7, #0]
 8007de2:	601a      	str	r2, [r3, #0]
 8007de4:	687a      	ldr	r2, [r7, #4]
 8007de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007de8:	1ad3      	subs	r3, r2, r3
 8007dea:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	f47f aeb5 	bne.w	8007b5e <f_write+0x76>
 8007df4:	e000      	b.n	8007df8 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8007df6:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	7d1b      	ldrb	r3, [r3, #20]
 8007dfc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e00:	b2da      	uxtb	r2, r3
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8007e06:	2300      	movs	r3, #0
}
 8007e08:	4618      	mov	r0, r3
 8007e0a:	3730      	adds	r7, #48	; 0x30
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	bd80      	pop	{r7, pc}

08007e10 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8007e10:	b580      	push	{r7, lr}
 8007e12:	b086      	sub	sp, #24
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	f107 0208 	add.w	r2, r7, #8
 8007e1e:	4611      	mov	r1, r2
 8007e20:	4618      	mov	r0, r3
 8007e22:	f7ff fc19 	bl	8007658 <validate>
 8007e26:	4603      	mov	r3, r0
 8007e28:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007e2a:	7dfb      	ldrb	r3, [r7, #23]
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d168      	bne.n	8007f02 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	7d1b      	ldrb	r3, [r3, #20]
 8007e34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d062      	beq.n	8007f02 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	7d1b      	ldrb	r3, [r3, #20]
 8007e40:	b25b      	sxtb	r3, r3
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	da15      	bge.n	8007e72 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8007e46:	68bb      	ldr	r3, [r7, #8]
 8007e48:	7858      	ldrb	r0, [r3, #1]
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	6a1a      	ldr	r2, [r3, #32]
 8007e54:	2301      	movs	r3, #1
 8007e56:	f7fd fabb 	bl	80053d0 <disk_write>
 8007e5a:	4603      	mov	r3, r0
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d001      	beq.n	8007e64 <f_sync+0x54>
 8007e60:	2301      	movs	r3, #1
 8007e62:	e04f      	b.n	8007f04 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	7d1b      	ldrb	r3, [r3, #20]
 8007e68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e6c:	b2da      	uxtb	r2, r3
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8007e72:	f7fd f9ef 	bl	8005254 <get_fattime>
 8007e76:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8007e78:	68ba      	ldr	r2, [r7, #8]
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e7e:	4619      	mov	r1, r3
 8007e80:	4610      	mov	r0, r2
 8007e82:	f7fd fd93 	bl	80059ac <move_window>
 8007e86:	4603      	mov	r3, r0
 8007e88:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8007e8a:	7dfb      	ldrb	r3, [r7, #23]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d138      	bne.n	8007f02 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e94:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	330b      	adds	r3, #11
 8007e9a:	781a      	ldrb	r2, [r3, #0]
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	330b      	adds	r3, #11
 8007ea0:	f042 0220 	orr.w	r2, r2, #32
 8007ea4:	b2d2      	uxtb	r2, r2
 8007ea6:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	6818      	ldr	r0, [r3, #0]
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	689b      	ldr	r3, [r3, #8]
 8007eb0:	461a      	mov	r2, r3
 8007eb2:	68f9      	ldr	r1, [r7, #12]
 8007eb4:	f7fe fb21 	bl	80064fa <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	f103 021c 	add.w	r2, r3, #28
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	68db      	ldr	r3, [r3, #12]
 8007ec2:	4619      	mov	r1, r3
 8007ec4:	4610      	mov	r0, r2
 8007ec6:	f7fd fb17 	bl	80054f8 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	3316      	adds	r3, #22
 8007ece:	6939      	ldr	r1, [r7, #16]
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	f7fd fb11 	bl	80054f8 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	3312      	adds	r3, #18
 8007eda:	2100      	movs	r1, #0
 8007edc:	4618      	mov	r0, r3
 8007ede:	f7fd faf0 	bl	80054c2 <st_word>
					fs->wflag = 1;
 8007ee2:	68bb      	ldr	r3, [r7, #8]
 8007ee4:	2201      	movs	r2, #1
 8007ee6:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8007ee8:	68bb      	ldr	r3, [r7, #8]
 8007eea:	4618      	mov	r0, r3
 8007eec:	f7fd fd8c 	bl	8005a08 <sync_fs>
 8007ef0:	4603      	mov	r3, r0
 8007ef2:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	7d1b      	ldrb	r3, [r3, #20]
 8007ef8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007efc:	b2da      	uxtb	r2, r3
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8007f02:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f04:	4618      	mov	r0, r3
 8007f06:	3718      	adds	r7, #24
 8007f08:	46bd      	mov	sp, r7
 8007f0a:	bd80      	pop	{r7, pc}

08007f0c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8007f0c:	b580      	push	{r7, lr}
 8007f0e:	b084      	sub	sp, #16
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8007f14:	6878      	ldr	r0, [r7, #4]
 8007f16:	f7ff ff7b 	bl	8007e10 <f_sync>
 8007f1a:	4603      	mov	r3, r0
 8007f1c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8007f1e:	7bfb      	ldrb	r3, [r7, #15]
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d118      	bne.n	8007f56 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	f107 0208 	add.w	r2, r7, #8
 8007f2a:	4611      	mov	r1, r2
 8007f2c:	4618      	mov	r0, r3
 8007f2e:	f7ff fb93 	bl	8007658 <validate>
 8007f32:	4603      	mov	r3, r0
 8007f34:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8007f36:	7bfb      	ldrb	r3, [r7, #15]
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d10c      	bne.n	8007f56 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	691b      	ldr	r3, [r3, #16]
 8007f40:	4618      	mov	r0, r3
 8007f42:	f7fd fc8f 	bl	8005864 <dec_lock>
 8007f46:	4603      	mov	r3, r0
 8007f48:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8007f4a:	7bfb      	ldrb	r3, [r7, #15]
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d102      	bne.n	8007f56 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	2200      	movs	r2, #0
 8007f54:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8007f56:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f58:	4618      	mov	r0, r3
 8007f5a:	3710      	adds	r7, #16
 8007f5c:	46bd      	mov	sp, r7
 8007f5e:	bd80      	pop	{r7, pc}

08007f60 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 8007f60:	b580      	push	{r7, lr}
 8007f62:	b084      	sub	sp, #16
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	6078      	str	r0, [r7, #4]
 8007f68:	460b      	mov	r3, r1
 8007f6a:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 8007f6c:	78fb      	ldrb	r3, [r7, #3]
 8007f6e:	2b0a      	cmp	r3, #10
 8007f70:	d103      	bne.n	8007f7a <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 8007f72:	210d      	movs	r1, #13
 8007f74:	6878      	ldr	r0, [r7, #4]
 8007f76:	f7ff fff3 	bl	8007f60 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	685b      	ldr	r3, [r3, #4]
 8007f7e:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	db25      	blt.n	8007fd2 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	1c5a      	adds	r2, r3, #1
 8007f8a:	60fa      	str	r2, [r7, #12]
 8007f8c:	687a      	ldr	r2, [r7, #4]
 8007f8e:	4413      	add	r3, r2
 8007f90:	78fa      	ldrb	r2, [r7, #3]
 8007f92:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	2b3c      	cmp	r3, #60	; 0x3c
 8007f98:	dd12      	ble.n	8007fc0 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	6818      	ldr	r0, [r3, #0]
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	f103 010c 	add.w	r1, r3, #12
 8007fa4:	68fa      	ldr	r2, [r7, #12]
 8007fa6:	f107 0308 	add.w	r3, r7, #8
 8007faa:	f7ff fd9d 	bl	8007ae8 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8007fae:	68ba      	ldr	r2, [r7, #8]
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	429a      	cmp	r2, r3
 8007fb4:	d101      	bne.n	8007fba <putc_bfd+0x5a>
 8007fb6:	2300      	movs	r3, #0
 8007fb8:	e001      	b.n	8007fbe <putc_bfd+0x5e>
 8007fba:	f04f 33ff 	mov.w	r3, #4294967295
 8007fbe:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	68fa      	ldr	r2, [r7, #12]
 8007fc4:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	689b      	ldr	r3, [r3, #8]
 8007fca:	1c5a      	adds	r2, r3, #1
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	609a      	str	r2, [r3, #8]
 8007fd0:	e000      	b.n	8007fd4 <putc_bfd+0x74>
	if (i < 0) return;
 8007fd2:	bf00      	nop
}
 8007fd4:	3710      	adds	r7, #16
 8007fd6:	46bd      	mov	sp, r7
 8007fd8:	bd80      	pop	{r7, pc}

08007fda <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 8007fda:	b580      	push	{r7, lr}
 8007fdc:	b084      	sub	sp, #16
 8007fde:	af00      	add	r7, sp, #0
 8007fe0:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	685b      	ldr	r3, [r3, #4]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	db16      	blt.n	8008018 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	6818      	ldr	r0, [r3, #0]
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	f103 010c 	add.w	r1, r3, #12
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	685b      	ldr	r3, [r3, #4]
 8007ff8:	461a      	mov	r2, r3
 8007ffa:	f107 030c 	add.w	r3, r7, #12
 8007ffe:	f7ff fd73 	bl	8007ae8 <f_write>
 8008002:	4603      	mov	r3, r0
 8008004:	2b00      	cmp	r3, #0
 8008006:	d107      	bne.n	8008018 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	685b      	ldr	r3, [r3, #4]
 800800c:	68fa      	ldr	r2, [r7, #12]
 800800e:	4293      	cmp	r3, r2
 8008010:	d102      	bne.n	8008018 <putc_flush+0x3e>
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	689b      	ldr	r3, [r3, #8]
 8008016:	e001      	b.n	800801c <putc_flush+0x42>
	return EOF;
 8008018:	f04f 33ff 	mov.w	r3, #4294967295
}
 800801c:	4618      	mov	r0, r3
 800801e:	3710      	adds	r7, #16
 8008020:	46bd      	mov	sp, r7
 8008022:	bd80      	pop	{r7, pc}

08008024 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 8008024:	b480      	push	{r7}
 8008026:	b083      	sub	sp, #12
 8008028:	af00      	add	r7, sp, #0
 800802a:	6078      	str	r0, [r7, #4]
 800802c:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	683a      	ldr	r2, [r7, #0]
 8008032:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	2200      	movs	r2, #0
 8008038:	605a      	str	r2, [r3, #4]
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	685a      	ldr	r2, [r3, #4]
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	609a      	str	r2, [r3, #8]
}
 8008042:	bf00      	nop
 8008044:	370c      	adds	r7, #12
 8008046:	46bd      	mov	sp, r7
 8008048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800804c:	4770      	bx	lr
	...

08008050 <f_printf>:
int f_printf (
	FIL* fp,			/* Pointer to the file object */
	const TCHAR* fmt,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
 8008050:	b40e      	push	{r1, r2, r3}
 8008052:	b580      	push	{r7, lr}
 8008054:	b0a7      	sub	sp, #156	; 0x9c
 8008056:	af00      	add	r7, sp, #0
 8008058:	6078      	str	r0, [r7, #4]
	UINT i, j, w;
	DWORD v;
	TCHAR c, d, str[32], *p;


	putc_init(&pb, fp);
 800805a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800805e:	6879      	ldr	r1, [r7, #4]
 8008060:	4618      	mov	r0, r3
 8008062:	f7ff ffdf 	bl	8008024 <putc_init>

	va_start(arp, fmt);
 8008066:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800806a:	67bb      	str	r3, [r7, #120]	; 0x78

	for (;;) {
		c = *fmt++;
 800806c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008070:	1c5a      	adds	r2, r3, #1
 8008072:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008076:	781b      	ldrb	r3, [r3, #0]
 8008078:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == 0) break;			/* End of string */
 800807c:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8008080:	2b00      	cmp	r3, #0
 8008082:	f000 81f2 	beq.w	800846a <f_printf+0x41a>
		if (c != '%') {				/* Non escape character */
 8008086:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800808a:	2b25      	cmp	r3, #37	; 0x25
 800808c:	d008      	beq.n	80080a0 <f_printf+0x50>
			putc_bfd(&pb, c);
 800808e:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 8008092:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008096:	4611      	mov	r1, r2
 8008098:	4618      	mov	r0, r3
 800809a:	f7ff ff61 	bl	8007f60 <putc_bfd>
			continue;
 800809e:	e1e3      	b.n	8008468 <f_printf+0x418>
		}
		w = f = 0;
 80080a0:	2300      	movs	r3, #0
 80080a2:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 80080a6:	2300      	movs	r3, #0
 80080a8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		c = *fmt++;
 80080ac:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80080b0:	1c5a      	adds	r2, r3, #1
 80080b2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80080b6:	781b      	ldrb	r3, [r3, #0]
 80080b8:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == '0') {				/* Flag: '0' padding */
 80080bc:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80080c0:	2b30      	cmp	r3, #48	; 0x30
 80080c2:	d10b      	bne.n	80080dc <f_printf+0x8c>
			f = 1; c = *fmt++;
 80080c4:	2301      	movs	r3, #1
 80080c6:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 80080ca:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80080ce:	1c5a      	adds	r2, r3, #1
 80080d0:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80080d4:	781b      	ldrb	r3, [r3, #0]
 80080d6:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
 80080da:	e024      	b.n	8008126 <f_printf+0xd6>
		} else {
			if (c == '-') {			/* Flag: left justified */
 80080dc:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80080e0:	2b2d      	cmp	r3, #45	; 0x2d
 80080e2:	d120      	bne.n	8008126 <f_printf+0xd6>
				f = 2; c = *fmt++;
 80080e4:	2302      	movs	r3, #2
 80080e6:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 80080ea:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80080ee:	1c5a      	adds	r2, r3, #1
 80080f0:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80080f4:	781b      	ldrb	r3, [r3, #0]
 80080f6:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
			}
		}
		while (IsDigit(c)) {		/* Precision */
 80080fa:	e014      	b.n	8008126 <f_printf+0xd6>
			w = w * 10 + c - '0';
 80080fc:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8008100:	4613      	mov	r3, r2
 8008102:	009b      	lsls	r3, r3, #2
 8008104:	4413      	add	r3, r2
 8008106:	005b      	lsls	r3, r3, #1
 8008108:	461a      	mov	r2, r3
 800810a:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800810e:	4413      	add	r3, r2
 8008110:	3b30      	subs	r3, #48	; 0x30
 8008112:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			c = *fmt++;
 8008116:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800811a:	1c5a      	adds	r2, r3, #1
 800811c:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008120:	781b      	ldrb	r3, [r3, #0]
 8008122:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		while (IsDigit(c)) {		/* Precision */
 8008126:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800812a:	2b2f      	cmp	r3, #47	; 0x2f
 800812c:	d903      	bls.n	8008136 <f_printf+0xe6>
 800812e:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8008132:	2b39      	cmp	r3, #57	; 0x39
 8008134:	d9e2      	bls.n	80080fc <f_printf+0xac>
		}
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 8008136:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800813a:	2b6c      	cmp	r3, #108	; 0x6c
 800813c:	d003      	beq.n	8008146 <f_printf+0xf6>
 800813e:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8008142:	2b4c      	cmp	r3, #76	; 0x4c
 8008144:	d10d      	bne.n	8008162 <f_printf+0x112>
			f |= 4; c = *fmt++;
 8008146:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800814a:	f043 0304 	orr.w	r3, r3, #4
 800814e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8008152:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008156:	1c5a      	adds	r2, r3, #1
 8008158:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800815c:	781b      	ldrb	r3, [r3, #0]
 800815e:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		}
		if (!c) break;
 8008162:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8008166:	2b00      	cmp	r3, #0
 8008168:	f000 8181 	beq.w	800846e <f_printf+0x41e>
		d = c;
 800816c:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8008170:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		if (IsLower(d)) d -= 0x20;
 8008174:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8008178:	2b60      	cmp	r3, #96	; 0x60
 800817a:	d908      	bls.n	800818e <f_printf+0x13e>
 800817c:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8008180:	2b7a      	cmp	r3, #122	; 0x7a
 8008182:	d804      	bhi.n	800818e <f_printf+0x13e>
 8008184:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8008188:	3b20      	subs	r3, #32
 800818a:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		switch (d) {				/* Type is... */
 800818e:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8008192:	3b42      	subs	r3, #66	; 0x42
 8008194:	2b16      	cmp	r3, #22
 8008196:	f200 8098 	bhi.w	80082ca <f_printf+0x27a>
 800819a:	a201      	add	r2, pc, #4	; (adr r2, 80081a0 <f_printf+0x150>)
 800819c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081a0:	080082ab 	.word	0x080082ab
 80081a4:	08008293 	.word	0x08008293
 80081a8:	080082bb 	.word	0x080082bb
 80081ac:	080082cb 	.word	0x080082cb
 80081b0:	080082cb 	.word	0x080082cb
 80081b4:	080082cb 	.word	0x080082cb
 80081b8:	080082cb 	.word	0x080082cb
 80081bc:	080082cb 	.word	0x080082cb
 80081c0:	080082cb 	.word	0x080082cb
 80081c4:	080082cb 	.word	0x080082cb
 80081c8:	080082cb 	.word	0x080082cb
 80081cc:	080082cb 	.word	0x080082cb
 80081d0:	080082cb 	.word	0x080082cb
 80081d4:	080082b3 	.word	0x080082b3
 80081d8:	080082cb 	.word	0x080082cb
 80081dc:	080082cb 	.word	0x080082cb
 80081e0:	080082cb 	.word	0x080082cb
 80081e4:	080081fd 	.word	0x080081fd
 80081e8:	080082cb 	.word	0x080082cb
 80081ec:	080082bb 	.word	0x080082bb
 80081f0:	080082cb 	.word	0x080082cb
 80081f4:	080082cb 	.word	0x080082cb
 80081f8:	080082c3 	.word	0x080082c3
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
 80081fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80081fe:	1d1a      	adds	r2, r3, #4
 8008200:	67ba      	str	r2, [r7, #120]	; 0x78
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	67fb      	str	r3, [r7, #124]	; 0x7c
			for (j = 0; p[j]; j++) ;
 8008206:	2300      	movs	r3, #0
 8008208:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800820c:	e004      	b.n	8008218 <f_printf+0x1c8>
 800820e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008212:	3301      	adds	r3, #1
 8008214:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008218:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800821a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800821e:	4413      	add	r3, r2
 8008220:	781b      	ldrb	r3, [r3, #0]
 8008222:	2b00      	cmp	r3, #0
 8008224:	d1f3      	bne.n	800820e <f_printf+0x1be>
			if (!(f & 2)) {
 8008226:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800822a:	f003 0302 	and.w	r3, r3, #2
 800822e:	2b00      	cmp	r3, #0
 8008230:	d11a      	bne.n	8008268 <f_printf+0x218>
				while (j++ < w) putc_bfd(&pb, ' ');
 8008232:	e005      	b.n	8008240 <f_printf+0x1f0>
 8008234:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008238:	2120      	movs	r1, #32
 800823a:	4618      	mov	r0, r3
 800823c:	f7ff fe90 	bl	8007f60 <putc_bfd>
 8008240:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008244:	1c5a      	adds	r2, r3, #1
 8008246:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800824a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800824e:	429a      	cmp	r2, r3
 8008250:	d8f0      	bhi.n	8008234 <f_printf+0x1e4>
			}
			while (*p) putc_bfd(&pb, *p++);
 8008252:	e009      	b.n	8008268 <f_printf+0x218>
 8008254:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008256:	1c5a      	adds	r2, r3, #1
 8008258:	67fa      	str	r2, [r7, #124]	; 0x7c
 800825a:	781a      	ldrb	r2, [r3, #0]
 800825c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008260:	4611      	mov	r1, r2
 8008262:	4618      	mov	r0, r3
 8008264:	f7ff fe7c 	bl	8007f60 <putc_bfd>
 8008268:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800826a:	781b      	ldrb	r3, [r3, #0]
 800826c:	2b00      	cmp	r3, #0
 800826e:	d1f1      	bne.n	8008254 <f_printf+0x204>
			while (j++ < w) putc_bfd(&pb, ' ');
 8008270:	e005      	b.n	800827e <f_printf+0x22e>
 8008272:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008276:	2120      	movs	r1, #32
 8008278:	4618      	mov	r0, r3
 800827a:	f7ff fe71 	bl	8007f60 <putc_bfd>
 800827e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008282:	1c5a      	adds	r2, r3, #1
 8008284:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008288:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800828c:	429a      	cmp	r2, r3
 800828e:	d8f0      	bhi.n	8008272 <f_printf+0x222>
			continue;
 8008290:	e0ea      	b.n	8008468 <f_printf+0x418>

		case 'C' :					/* Character */
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
 8008292:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008294:	1d1a      	adds	r2, r3, #4
 8008296:	67ba      	str	r2, [r7, #120]	; 0x78
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	b2da      	uxtb	r2, r3
 800829c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80082a0:	4611      	mov	r1, r2
 80082a2:	4618      	mov	r0, r3
 80082a4:	f7ff fe5c 	bl	8007f60 <putc_bfd>
 80082a8:	e0de      	b.n	8008468 <f_printf+0x418>

		case 'B' :					/* Binary */
			r = 2; break;
 80082aa:	2302      	movs	r3, #2
 80082ac:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 80082b0:	e014      	b.n	80082dc <f_printf+0x28c>

		case 'O' :					/* Octal */
			r = 8; break;
 80082b2:	2308      	movs	r3, #8
 80082b4:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 80082b8:	e010      	b.n	80082dc <f_printf+0x28c>

		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
 80082ba:	230a      	movs	r3, #10
 80082bc:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 80082c0:	e00c      	b.n	80082dc <f_printf+0x28c>

		case 'X' :					/* Hexdecimal */
			r = 16; break;
 80082c2:	2310      	movs	r3, #16
 80082c4:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 80082c8:	e008      	b.n	80082dc <f_printf+0x28c>

		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
 80082ca:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 80082ce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80082d2:	4611      	mov	r1, r2
 80082d4:	4618      	mov	r0, r3
 80082d6:	f7ff fe43 	bl	8007f60 <putc_bfd>
 80082da:	e0c5      	b.n	8008468 <f_printf+0x418>
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 80082dc:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80082e0:	f003 0304 	and.w	r3, r3, #4
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d004      	beq.n	80082f2 <f_printf+0x2a2>
 80082e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80082ea:	1d1a      	adds	r2, r3, #4
 80082ec:	67ba      	str	r2, [r7, #120]	; 0x78
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	e00c      	b.n	800830c <f_printf+0x2bc>
 80082f2:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 80082f6:	2b44      	cmp	r3, #68	; 0x44
 80082f8:	d104      	bne.n	8008304 <f_printf+0x2b4>
 80082fa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80082fc:	1d1a      	adds	r2, r3, #4
 80082fe:	67ba      	str	r2, [r7, #120]	; 0x78
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	e003      	b.n	800830c <f_printf+0x2bc>
 8008304:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008306:	1d1a      	adds	r2, r3, #4
 8008308:	67ba      	str	r2, [r7, #120]	; 0x78
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		if (d == 'D' && (v & 0x80000000)) {
 8008310:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8008314:	2b44      	cmp	r3, #68	; 0x44
 8008316:	d10e      	bne.n	8008336 <f_printf+0x2e6>
 8008318:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800831c:	2b00      	cmp	r3, #0
 800831e:	da0a      	bge.n	8008336 <f_printf+0x2e6>
			v = 0 - v;
 8008320:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008324:	425b      	negs	r3, r3
 8008326:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			f |= 8;
 800832a:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800832e:	f043 0308 	orr.w	r3, r3, #8
 8008332:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		}
		i = 0;
 8008336:	2300      	movs	r3, #0
 8008338:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		do {
			d = (TCHAR)(v % r); v /= r;
 800833c:	f897 2096 	ldrb.w	r2, [r7, #150]	; 0x96
 8008340:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008344:	fbb3 f1f2 	udiv	r1, r3, r2
 8008348:	fb01 f202 	mul.w	r2, r1, r2
 800834c:	1a9b      	subs	r3, r3, r2
 800834e:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
 8008352:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8008356:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800835a:	fbb2 f3f3 	udiv	r3, r2, r3
 800835e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 8008362:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8008366:	2b09      	cmp	r3, #9
 8008368:	d90b      	bls.n	8008382 <f_printf+0x332>
 800836a:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800836e:	2b78      	cmp	r3, #120	; 0x78
 8008370:	d101      	bne.n	8008376 <f_printf+0x326>
 8008372:	2227      	movs	r2, #39	; 0x27
 8008374:	e000      	b.n	8008378 <f_printf+0x328>
 8008376:	2207      	movs	r2, #7
 8008378:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800837c:	4413      	add	r3, r2
 800837e:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
			str[i++] = d + '0';
 8008382:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008386:	1c5a      	adds	r2, r3, #1
 8008388:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800838c:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 8008390:	3230      	adds	r2, #48	; 0x30
 8008392:	b2d2      	uxtb	r2, r2
 8008394:	3398      	adds	r3, #152	; 0x98
 8008396:	443b      	add	r3, r7
 8008398:	f803 2c8c 	strb.w	r2, [r3, #-140]
		} while (v && i < sizeof str / sizeof str[0]);
 800839c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d003      	beq.n	80083ac <f_printf+0x35c>
 80083a4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80083a8:	2b1f      	cmp	r3, #31
 80083aa:	d9c7      	bls.n	800833c <f_printf+0x2ec>
		if (f & 8) str[i++] = '-';
 80083ac:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80083b0:	f003 0308 	and.w	r3, r3, #8
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d009      	beq.n	80083cc <f_printf+0x37c>
 80083b8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80083bc:	1c5a      	adds	r2, r3, #1
 80083be:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 80083c2:	3398      	adds	r3, #152	; 0x98
 80083c4:	443b      	add	r3, r7
 80083c6:	222d      	movs	r2, #45	; 0x2d
 80083c8:	f803 2c8c 	strb.w	r2, [r3, #-140]
		j = i; d = (f & 1) ? '0' : ' ';
 80083cc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80083d0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80083d4:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80083d8:	f003 0301 	and.w	r3, r3, #1
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d001      	beq.n	80083e4 <f_printf+0x394>
 80083e0:	2330      	movs	r3, #48	; 0x30
 80083e2:	e000      	b.n	80083e6 <f_printf+0x396>
 80083e4:	2320      	movs	r3, #32
 80083e6:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 80083ea:	e007      	b.n	80083fc <f_printf+0x3ac>
 80083ec:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 80083f0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80083f4:	4611      	mov	r1, r2
 80083f6:	4618      	mov	r0, r3
 80083f8:	f7ff fdb2 	bl	8007f60 <putc_bfd>
 80083fc:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8008400:	f003 0302 	and.w	r3, r3, #2
 8008404:	2b00      	cmp	r3, #0
 8008406:	d108      	bne.n	800841a <f_printf+0x3ca>
 8008408:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800840c:	1c5a      	adds	r2, r3, #1
 800840e:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008412:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8008416:	429a      	cmp	r2, r3
 8008418:	d8e8      	bhi.n	80083ec <f_printf+0x39c>
		do {
			putc_bfd(&pb, str[--i]);
 800841a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800841e:	3b01      	subs	r3, #1
 8008420:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008424:	f107 020c 	add.w	r2, r7, #12
 8008428:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800842c:	4413      	add	r3, r2
 800842e:	781a      	ldrb	r2, [r3, #0]
 8008430:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008434:	4611      	mov	r1, r2
 8008436:	4618      	mov	r0, r3
 8008438:	f7ff fd92 	bl	8007f60 <putc_bfd>
		} while (i);
 800843c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008440:	2b00      	cmp	r3, #0
 8008442:	d1ea      	bne.n	800841a <f_printf+0x3ca>
		while (j++ < w) putc_bfd(&pb, d);
 8008444:	e007      	b.n	8008456 <f_printf+0x406>
 8008446:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 800844a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800844e:	4611      	mov	r1, r2
 8008450:	4618      	mov	r0, r3
 8008452:	f7ff fd85 	bl	8007f60 <putc_bfd>
 8008456:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800845a:	1c5a      	adds	r2, r3, #1
 800845c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008460:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8008464:	429a      	cmp	r2, r3
 8008466:	d8ee      	bhi.n	8008446 <f_printf+0x3f6>
		c = *fmt++;
 8008468:	e600      	b.n	800806c <f_printf+0x1c>
		if (c == 0) break;			/* End of string */
 800846a:	bf00      	nop
 800846c:	e000      	b.n	8008470 <f_printf+0x420>
		if (!c) break;
 800846e:	bf00      	nop
	}

	va_end(arp);

	return putc_flush(&pb);
 8008470:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008474:	4618      	mov	r0, r3
 8008476:	f7ff fdb0 	bl	8007fda <putc_flush>
 800847a:	4603      	mov	r3, r0
}
 800847c:	4618      	mov	r0, r3
 800847e:	379c      	adds	r7, #156	; 0x9c
 8008480:	46bd      	mov	sp, r7
 8008482:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008486:	b003      	add	sp, #12
 8008488:	4770      	bx	lr
 800848a:	bf00      	nop

0800848c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800848c:	b480      	push	{r7}
 800848e:	b087      	sub	sp, #28
 8008490:	af00      	add	r7, sp, #0
 8008492:	60f8      	str	r0, [r7, #12]
 8008494:	60b9      	str	r1, [r7, #8]
 8008496:	4613      	mov	r3, r2
 8008498:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800849a:	2301      	movs	r3, #1
 800849c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800849e:	2300      	movs	r3, #0
 80084a0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80084a2:	4b1f      	ldr	r3, [pc, #124]	; (8008520 <FATFS_LinkDriverEx+0x94>)
 80084a4:	7a5b      	ldrb	r3, [r3, #9]
 80084a6:	b2db      	uxtb	r3, r3
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d131      	bne.n	8008510 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80084ac:	4b1c      	ldr	r3, [pc, #112]	; (8008520 <FATFS_LinkDriverEx+0x94>)
 80084ae:	7a5b      	ldrb	r3, [r3, #9]
 80084b0:	b2db      	uxtb	r3, r3
 80084b2:	461a      	mov	r2, r3
 80084b4:	4b1a      	ldr	r3, [pc, #104]	; (8008520 <FATFS_LinkDriverEx+0x94>)
 80084b6:	2100      	movs	r1, #0
 80084b8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80084ba:	4b19      	ldr	r3, [pc, #100]	; (8008520 <FATFS_LinkDriverEx+0x94>)
 80084bc:	7a5b      	ldrb	r3, [r3, #9]
 80084be:	b2db      	uxtb	r3, r3
 80084c0:	4a17      	ldr	r2, [pc, #92]	; (8008520 <FATFS_LinkDriverEx+0x94>)
 80084c2:	009b      	lsls	r3, r3, #2
 80084c4:	4413      	add	r3, r2
 80084c6:	68fa      	ldr	r2, [r7, #12]
 80084c8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80084ca:	4b15      	ldr	r3, [pc, #84]	; (8008520 <FATFS_LinkDriverEx+0x94>)
 80084cc:	7a5b      	ldrb	r3, [r3, #9]
 80084ce:	b2db      	uxtb	r3, r3
 80084d0:	461a      	mov	r2, r3
 80084d2:	4b13      	ldr	r3, [pc, #76]	; (8008520 <FATFS_LinkDriverEx+0x94>)
 80084d4:	4413      	add	r3, r2
 80084d6:	79fa      	ldrb	r2, [r7, #7]
 80084d8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80084da:	4b11      	ldr	r3, [pc, #68]	; (8008520 <FATFS_LinkDriverEx+0x94>)
 80084dc:	7a5b      	ldrb	r3, [r3, #9]
 80084de:	b2db      	uxtb	r3, r3
 80084e0:	1c5a      	adds	r2, r3, #1
 80084e2:	b2d1      	uxtb	r1, r2
 80084e4:	4a0e      	ldr	r2, [pc, #56]	; (8008520 <FATFS_LinkDriverEx+0x94>)
 80084e6:	7251      	strb	r1, [r2, #9]
 80084e8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80084ea:	7dbb      	ldrb	r3, [r7, #22]
 80084ec:	3330      	adds	r3, #48	; 0x30
 80084ee:	b2da      	uxtb	r2, r3
 80084f0:	68bb      	ldr	r3, [r7, #8]
 80084f2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80084f4:	68bb      	ldr	r3, [r7, #8]
 80084f6:	3301      	adds	r3, #1
 80084f8:	223a      	movs	r2, #58	; 0x3a
 80084fa:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80084fc:	68bb      	ldr	r3, [r7, #8]
 80084fe:	3302      	adds	r3, #2
 8008500:	222f      	movs	r2, #47	; 0x2f
 8008502:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8008504:	68bb      	ldr	r3, [r7, #8]
 8008506:	3303      	adds	r3, #3
 8008508:	2200      	movs	r2, #0
 800850a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800850c:	2300      	movs	r3, #0
 800850e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8008510:	7dfb      	ldrb	r3, [r7, #23]
}
 8008512:	4618      	mov	r0, r3
 8008514:	371c      	adds	r7, #28
 8008516:	46bd      	mov	sp, r7
 8008518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800851c:	4770      	bx	lr
 800851e:	bf00      	nop
 8008520:	20000598 	.word	0x20000598

08008524 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8008524:	b580      	push	{r7, lr}
 8008526:	b082      	sub	sp, #8
 8008528:	af00      	add	r7, sp, #0
 800852a:	6078      	str	r0, [r7, #4]
 800852c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800852e:	2200      	movs	r2, #0
 8008530:	6839      	ldr	r1, [r7, #0]
 8008532:	6878      	ldr	r0, [r7, #4]
 8008534:	f7ff ffaa 	bl	800848c <FATFS_LinkDriverEx>
 8008538:	4603      	mov	r3, r0
}
 800853a:	4618      	mov	r0, r3
 800853c:	3708      	adds	r7, #8
 800853e:	46bd      	mov	sp, r7
 8008540:	bd80      	pop	{r7, pc}
	...

08008544 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8008544:	b480      	push	{r7}
 8008546:	b085      	sub	sp, #20
 8008548:	af00      	add	r7, sp, #0
 800854a:	4603      	mov	r3, r0
 800854c:	6039      	str	r1, [r7, #0]
 800854e:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8008550:	88fb      	ldrh	r3, [r7, #6]
 8008552:	2b7f      	cmp	r3, #127	; 0x7f
 8008554:	d802      	bhi.n	800855c <ff_convert+0x18>
		c = chr;
 8008556:	88fb      	ldrh	r3, [r7, #6]
 8008558:	81fb      	strh	r3, [r7, #14]
 800855a:	e025      	b.n	80085a8 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800855c:	683b      	ldr	r3, [r7, #0]
 800855e:	2b00      	cmp	r3, #0
 8008560:	d00b      	beq.n	800857a <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8008562:	88fb      	ldrh	r3, [r7, #6]
 8008564:	2bff      	cmp	r3, #255	; 0xff
 8008566:	d805      	bhi.n	8008574 <ff_convert+0x30>
 8008568:	88fb      	ldrh	r3, [r7, #6]
 800856a:	3b80      	subs	r3, #128	; 0x80
 800856c:	4a12      	ldr	r2, [pc, #72]	; (80085b8 <ff_convert+0x74>)
 800856e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008572:	e000      	b.n	8008576 <ff_convert+0x32>
 8008574:	2300      	movs	r3, #0
 8008576:	81fb      	strh	r3, [r7, #14]
 8008578:	e016      	b.n	80085a8 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800857a:	2300      	movs	r3, #0
 800857c:	81fb      	strh	r3, [r7, #14]
 800857e:	e009      	b.n	8008594 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8008580:	89fb      	ldrh	r3, [r7, #14]
 8008582:	4a0d      	ldr	r2, [pc, #52]	; (80085b8 <ff_convert+0x74>)
 8008584:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008588:	88fa      	ldrh	r2, [r7, #6]
 800858a:	429a      	cmp	r2, r3
 800858c:	d006      	beq.n	800859c <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800858e:	89fb      	ldrh	r3, [r7, #14]
 8008590:	3301      	adds	r3, #1
 8008592:	81fb      	strh	r3, [r7, #14]
 8008594:	89fb      	ldrh	r3, [r7, #14]
 8008596:	2b7f      	cmp	r3, #127	; 0x7f
 8008598:	d9f2      	bls.n	8008580 <ff_convert+0x3c>
 800859a:	e000      	b.n	800859e <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800859c:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800859e:	89fb      	ldrh	r3, [r7, #14]
 80085a0:	3380      	adds	r3, #128	; 0x80
 80085a2:	b29b      	uxth	r3, r3
 80085a4:	b2db      	uxtb	r3, r3
 80085a6:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 80085a8:	89fb      	ldrh	r3, [r7, #14]
}
 80085aa:	4618      	mov	r0, r3
 80085ac:	3714      	adds	r7, #20
 80085ae:	46bd      	mov	sp, r7
 80085b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b4:	4770      	bx	lr
 80085b6:	bf00      	nop
 80085b8:	0800b860 	.word	0x0800b860

080085bc <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 80085bc:	b480      	push	{r7}
 80085be:	b087      	sub	sp, #28
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	4603      	mov	r3, r0
 80085c4:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 80085c6:	88fb      	ldrh	r3, [r7, #6]
 80085c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80085cc:	d201      	bcs.n	80085d2 <ff_wtoupper+0x16>
 80085ce:	4b3e      	ldr	r3, [pc, #248]	; (80086c8 <ff_wtoupper+0x10c>)
 80085d0:	e000      	b.n	80085d4 <ff_wtoupper+0x18>
 80085d2:	4b3e      	ldr	r3, [pc, #248]	; (80086cc <ff_wtoupper+0x110>)
 80085d4:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 80085d6:	697b      	ldr	r3, [r7, #20]
 80085d8:	1c9a      	adds	r2, r3, #2
 80085da:	617a      	str	r2, [r7, #20]
 80085dc:	881b      	ldrh	r3, [r3, #0]
 80085de:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 80085e0:	8a7b      	ldrh	r3, [r7, #18]
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d068      	beq.n	80086b8 <ff_wtoupper+0xfc>
 80085e6:	88fa      	ldrh	r2, [r7, #6]
 80085e8:	8a7b      	ldrh	r3, [r7, #18]
 80085ea:	429a      	cmp	r2, r3
 80085ec:	d364      	bcc.n	80086b8 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 80085ee:	697b      	ldr	r3, [r7, #20]
 80085f0:	1c9a      	adds	r2, r3, #2
 80085f2:	617a      	str	r2, [r7, #20]
 80085f4:	881b      	ldrh	r3, [r3, #0]
 80085f6:	823b      	strh	r3, [r7, #16]
 80085f8:	8a3b      	ldrh	r3, [r7, #16]
 80085fa:	0a1b      	lsrs	r3, r3, #8
 80085fc:	81fb      	strh	r3, [r7, #14]
 80085fe:	8a3b      	ldrh	r3, [r7, #16]
 8008600:	b2db      	uxtb	r3, r3
 8008602:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8008604:	88fa      	ldrh	r2, [r7, #6]
 8008606:	8a79      	ldrh	r1, [r7, #18]
 8008608:	8a3b      	ldrh	r3, [r7, #16]
 800860a:	440b      	add	r3, r1
 800860c:	429a      	cmp	r2, r3
 800860e:	da49      	bge.n	80086a4 <ff_wtoupper+0xe8>
			switch (cmd) {
 8008610:	89fb      	ldrh	r3, [r7, #14]
 8008612:	2b08      	cmp	r3, #8
 8008614:	d84f      	bhi.n	80086b6 <ff_wtoupper+0xfa>
 8008616:	a201      	add	r2, pc, #4	; (adr r2, 800861c <ff_wtoupper+0x60>)
 8008618:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800861c:	08008641 	.word	0x08008641
 8008620:	08008653 	.word	0x08008653
 8008624:	08008669 	.word	0x08008669
 8008628:	08008671 	.word	0x08008671
 800862c:	08008679 	.word	0x08008679
 8008630:	08008681 	.word	0x08008681
 8008634:	08008689 	.word	0x08008689
 8008638:	08008691 	.word	0x08008691
 800863c:	08008699 	.word	0x08008699
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8008640:	88fa      	ldrh	r2, [r7, #6]
 8008642:	8a7b      	ldrh	r3, [r7, #18]
 8008644:	1ad3      	subs	r3, r2, r3
 8008646:	005b      	lsls	r3, r3, #1
 8008648:	697a      	ldr	r2, [r7, #20]
 800864a:	4413      	add	r3, r2
 800864c:	881b      	ldrh	r3, [r3, #0]
 800864e:	80fb      	strh	r3, [r7, #6]
 8008650:	e027      	b.n	80086a2 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8008652:	88fa      	ldrh	r2, [r7, #6]
 8008654:	8a7b      	ldrh	r3, [r7, #18]
 8008656:	1ad3      	subs	r3, r2, r3
 8008658:	b29b      	uxth	r3, r3
 800865a:	f003 0301 	and.w	r3, r3, #1
 800865e:	b29b      	uxth	r3, r3
 8008660:	88fa      	ldrh	r2, [r7, #6]
 8008662:	1ad3      	subs	r3, r2, r3
 8008664:	80fb      	strh	r3, [r7, #6]
 8008666:	e01c      	b.n	80086a2 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8008668:	88fb      	ldrh	r3, [r7, #6]
 800866a:	3b10      	subs	r3, #16
 800866c:	80fb      	strh	r3, [r7, #6]
 800866e:	e018      	b.n	80086a2 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8008670:	88fb      	ldrh	r3, [r7, #6]
 8008672:	3b20      	subs	r3, #32
 8008674:	80fb      	strh	r3, [r7, #6]
 8008676:	e014      	b.n	80086a2 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8008678:	88fb      	ldrh	r3, [r7, #6]
 800867a:	3b30      	subs	r3, #48	; 0x30
 800867c:	80fb      	strh	r3, [r7, #6]
 800867e:	e010      	b.n	80086a2 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8008680:	88fb      	ldrh	r3, [r7, #6]
 8008682:	3b1a      	subs	r3, #26
 8008684:	80fb      	strh	r3, [r7, #6]
 8008686:	e00c      	b.n	80086a2 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8008688:	88fb      	ldrh	r3, [r7, #6]
 800868a:	3308      	adds	r3, #8
 800868c:	80fb      	strh	r3, [r7, #6]
 800868e:	e008      	b.n	80086a2 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8008690:	88fb      	ldrh	r3, [r7, #6]
 8008692:	3b50      	subs	r3, #80	; 0x50
 8008694:	80fb      	strh	r3, [r7, #6]
 8008696:	e004      	b.n	80086a2 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8008698:	88fb      	ldrh	r3, [r7, #6]
 800869a:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800869e:	80fb      	strh	r3, [r7, #6]
 80086a0:	bf00      	nop
			}
			break;
 80086a2:	e008      	b.n	80086b6 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 80086a4:	89fb      	ldrh	r3, [r7, #14]
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d195      	bne.n	80085d6 <ff_wtoupper+0x1a>
 80086aa:	8a3b      	ldrh	r3, [r7, #16]
 80086ac:	005b      	lsls	r3, r3, #1
 80086ae:	697a      	ldr	r2, [r7, #20]
 80086b0:	4413      	add	r3, r2
 80086b2:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 80086b4:	e78f      	b.n	80085d6 <ff_wtoupper+0x1a>
			break;
 80086b6:	bf00      	nop
	}

	return chr;
 80086b8:	88fb      	ldrh	r3, [r7, #6]
}
 80086ba:	4618      	mov	r0, r3
 80086bc:	371c      	adds	r7, #28
 80086be:	46bd      	mov	sp, r7
 80086c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c4:	4770      	bx	lr
 80086c6:	bf00      	nop
 80086c8:	0800b960 	.word	0x0800b960
 80086cc:	0800bb54 	.word	0x0800bb54

080086d0 <__errno>:
 80086d0:	4b01      	ldr	r3, [pc, #4]	; (80086d8 <__errno+0x8>)
 80086d2:	6818      	ldr	r0, [r3, #0]
 80086d4:	4770      	bx	lr
 80086d6:	bf00      	nop
 80086d8:	20000024 	.word	0x20000024

080086dc <__libc_init_array>:
 80086dc:	b570      	push	{r4, r5, r6, lr}
 80086de:	4d0d      	ldr	r5, [pc, #52]	; (8008714 <__libc_init_array+0x38>)
 80086e0:	4c0d      	ldr	r4, [pc, #52]	; (8008718 <__libc_init_array+0x3c>)
 80086e2:	1b64      	subs	r4, r4, r5
 80086e4:	10a4      	asrs	r4, r4, #2
 80086e6:	2600      	movs	r6, #0
 80086e8:	42a6      	cmp	r6, r4
 80086ea:	d109      	bne.n	8008700 <__libc_init_array+0x24>
 80086ec:	4d0b      	ldr	r5, [pc, #44]	; (800871c <__libc_init_array+0x40>)
 80086ee:	4c0c      	ldr	r4, [pc, #48]	; (8008720 <__libc_init_array+0x44>)
 80086f0:	f002 ff90 	bl	800b614 <_init>
 80086f4:	1b64      	subs	r4, r4, r5
 80086f6:	10a4      	asrs	r4, r4, #2
 80086f8:	2600      	movs	r6, #0
 80086fa:	42a6      	cmp	r6, r4
 80086fc:	d105      	bne.n	800870a <__libc_init_array+0x2e>
 80086fe:	bd70      	pop	{r4, r5, r6, pc}
 8008700:	f855 3b04 	ldr.w	r3, [r5], #4
 8008704:	4798      	blx	r3
 8008706:	3601      	adds	r6, #1
 8008708:	e7ee      	b.n	80086e8 <__libc_init_array+0xc>
 800870a:	f855 3b04 	ldr.w	r3, [r5], #4
 800870e:	4798      	blx	r3
 8008710:	3601      	adds	r6, #1
 8008712:	e7f2      	b.n	80086fa <__libc_init_array+0x1e>
 8008714:	0800bff4 	.word	0x0800bff4
 8008718:	0800bff4 	.word	0x0800bff4
 800871c:	0800bff4 	.word	0x0800bff4
 8008720:	0800bff8 	.word	0x0800bff8

08008724 <memcpy>:
 8008724:	440a      	add	r2, r1
 8008726:	4291      	cmp	r1, r2
 8008728:	f100 33ff 	add.w	r3, r0, #4294967295
 800872c:	d100      	bne.n	8008730 <memcpy+0xc>
 800872e:	4770      	bx	lr
 8008730:	b510      	push	{r4, lr}
 8008732:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008736:	f803 4f01 	strb.w	r4, [r3, #1]!
 800873a:	4291      	cmp	r1, r2
 800873c:	d1f9      	bne.n	8008732 <memcpy+0xe>
 800873e:	bd10      	pop	{r4, pc}

08008740 <memset>:
 8008740:	4402      	add	r2, r0
 8008742:	4603      	mov	r3, r0
 8008744:	4293      	cmp	r3, r2
 8008746:	d100      	bne.n	800874a <memset+0xa>
 8008748:	4770      	bx	lr
 800874a:	f803 1b01 	strb.w	r1, [r3], #1
 800874e:	e7f9      	b.n	8008744 <memset+0x4>

08008750 <__cvt>:
 8008750:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008754:	ec55 4b10 	vmov	r4, r5, d0
 8008758:	2d00      	cmp	r5, #0
 800875a:	460e      	mov	r6, r1
 800875c:	4619      	mov	r1, r3
 800875e:	462b      	mov	r3, r5
 8008760:	bfbb      	ittet	lt
 8008762:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008766:	461d      	movlt	r5, r3
 8008768:	2300      	movge	r3, #0
 800876a:	232d      	movlt	r3, #45	; 0x2d
 800876c:	700b      	strb	r3, [r1, #0]
 800876e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008770:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008774:	4691      	mov	r9, r2
 8008776:	f023 0820 	bic.w	r8, r3, #32
 800877a:	bfbc      	itt	lt
 800877c:	4622      	movlt	r2, r4
 800877e:	4614      	movlt	r4, r2
 8008780:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008784:	d005      	beq.n	8008792 <__cvt+0x42>
 8008786:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800878a:	d100      	bne.n	800878e <__cvt+0x3e>
 800878c:	3601      	adds	r6, #1
 800878e:	2102      	movs	r1, #2
 8008790:	e000      	b.n	8008794 <__cvt+0x44>
 8008792:	2103      	movs	r1, #3
 8008794:	ab03      	add	r3, sp, #12
 8008796:	9301      	str	r3, [sp, #4]
 8008798:	ab02      	add	r3, sp, #8
 800879a:	9300      	str	r3, [sp, #0]
 800879c:	ec45 4b10 	vmov	d0, r4, r5
 80087a0:	4653      	mov	r3, sl
 80087a2:	4632      	mov	r2, r6
 80087a4:	f000 fe38 	bl	8009418 <_dtoa_r>
 80087a8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80087ac:	4607      	mov	r7, r0
 80087ae:	d102      	bne.n	80087b6 <__cvt+0x66>
 80087b0:	f019 0f01 	tst.w	r9, #1
 80087b4:	d022      	beq.n	80087fc <__cvt+0xac>
 80087b6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80087ba:	eb07 0906 	add.w	r9, r7, r6
 80087be:	d110      	bne.n	80087e2 <__cvt+0x92>
 80087c0:	783b      	ldrb	r3, [r7, #0]
 80087c2:	2b30      	cmp	r3, #48	; 0x30
 80087c4:	d10a      	bne.n	80087dc <__cvt+0x8c>
 80087c6:	2200      	movs	r2, #0
 80087c8:	2300      	movs	r3, #0
 80087ca:	4620      	mov	r0, r4
 80087cc:	4629      	mov	r1, r5
 80087ce:	f7f8 f983 	bl	8000ad8 <__aeabi_dcmpeq>
 80087d2:	b918      	cbnz	r0, 80087dc <__cvt+0x8c>
 80087d4:	f1c6 0601 	rsb	r6, r6, #1
 80087d8:	f8ca 6000 	str.w	r6, [sl]
 80087dc:	f8da 3000 	ldr.w	r3, [sl]
 80087e0:	4499      	add	r9, r3
 80087e2:	2200      	movs	r2, #0
 80087e4:	2300      	movs	r3, #0
 80087e6:	4620      	mov	r0, r4
 80087e8:	4629      	mov	r1, r5
 80087ea:	f7f8 f975 	bl	8000ad8 <__aeabi_dcmpeq>
 80087ee:	b108      	cbz	r0, 80087f4 <__cvt+0xa4>
 80087f0:	f8cd 900c 	str.w	r9, [sp, #12]
 80087f4:	2230      	movs	r2, #48	; 0x30
 80087f6:	9b03      	ldr	r3, [sp, #12]
 80087f8:	454b      	cmp	r3, r9
 80087fa:	d307      	bcc.n	800880c <__cvt+0xbc>
 80087fc:	9b03      	ldr	r3, [sp, #12]
 80087fe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008800:	1bdb      	subs	r3, r3, r7
 8008802:	4638      	mov	r0, r7
 8008804:	6013      	str	r3, [r2, #0]
 8008806:	b004      	add	sp, #16
 8008808:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800880c:	1c59      	adds	r1, r3, #1
 800880e:	9103      	str	r1, [sp, #12]
 8008810:	701a      	strb	r2, [r3, #0]
 8008812:	e7f0      	b.n	80087f6 <__cvt+0xa6>

08008814 <__exponent>:
 8008814:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008816:	4603      	mov	r3, r0
 8008818:	2900      	cmp	r1, #0
 800881a:	bfb8      	it	lt
 800881c:	4249      	neglt	r1, r1
 800881e:	f803 2b02 	strb.w	r2, [r3], #2
 8008822:	bfb4      	ite	lt
 8008824:	222d      	movlt	r2, #45	; 0x2d
 8008826:	222b      	movge	r2, #43	; 0x2b
 8008828:	2909      	cmp	r1, #9
 800882a:	7042      	strb	r2, [r0, #1]
 800882c:	dd2a      	ble.n	8008884 <__exponent+0x70>
 800882e:	f10d 0407 	add.w	r4, sp, #7
 8008832:	46a4      	mov	ip, r4
 8008834:	270a      	movs	r7, #10
 8008836:	46a6      	mov	lr, r4
 8008838:	460a      	mov	r2, r1
 800883a:	fb91 f6f7 	sdiv	r6, r1, r7
 800883e:	fb07 1516 	mls	r5, r7, r6, r1
 8008842:	3530      	adds	r5, #48	; 0x30
 8008844:	2a63      	cmp	r2, #99	; 0x63
 8008846:	f104 34ff 	add.w	r4, r4, #4294967295
 800884a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800884e:	4631      	mov	r1, r6
 8008850:	dcf1      	bgt.n	8008836 <__exponent+0x22>
 8008852:	3130      	adds	r1, #48	; 0x30
 8008854:	f1ae 0502 	sub.w	r5, lr, #2
 8008858:	f804 1c01 	strb.w	r1, [r4, #-1]
 800885c:	1c44      	adds	r4, r0, #1
 800885e:	4629      	mov	r1, r5
 8008860:	4561      	cmp	r1, ip
 8008862:	d30a      	bcc.n	800887a <__exponent+0x66>
 8008864:	f10d 0209 	add.w	r2, sp, #9
 8008868:	eba2 020e 	sub.w	r2, r2, lr
 800886c:	4565      	cmp	r5, ip
 800886e:	bf88      	it	hi
 8008870:	2200      	movhi	r2, #0
 8008872:	4413      	add	r3, r2
 8008874:	1a18      	subs	r0, r3, r0
 8008876:	b003      	add	sp, #12
 8008878:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800887a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800887e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8008882:	e7ed      	b.n	8008860 <__exponent+0x4c>
 8008884:	2330      	movs	r3, #48	; 0x30
 8008886:	3130      	adds	r1, #48	; 0x30
 8008888:	7083      	strb	r3, [r0, #2]
 800888a:	70c1      	strb	r1, [r0, #3]
 800888c:	1d03      	adds	r3, r0, #4
 800888e:	e7f1      	b.n	8008874 <__exponent+0x60>

08008890 <_printf_float>:
 8008890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008894:	ed2d 8b02 	vpush	{d8}
 8008898:	b08d      	sub	sp, #52	; 0x34
 800889a:	460c      	mov	r4, r1
 800889c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80088a0:	4616      	mov	r6, r2
 80088a2:	461f      	mov	r7, r3
 80088a4:	4605      	mov	r5, r0
 80088a6:	f001 fd5d 	bl	800a364 <_localeconv_r>
 80088aa:	f8d0 a000 	ldr.w	sl, [r0]
 80088ae:	4650      	mov	r0, sl
 80088b0:	f7f7 fc96 	bl	80001e0 <strlen>
 80088b4:	2300      	movs	r3, #0
 80088b6:	930a      	str	r3, [sp, #40]	; 0x28
 80088b8:	6823      	ldr	r3, [r4, #0]
 80088ba:	9305      	str	r3, [sp, #20]
 80088bc:	f8d8 3000 	ldr.w	r3, [r8]
 80088c0:	f894 b018 	ldrb.w	fp, [r4, #24]
 80088c4:	3307      	adds	r3, #7
 80088c6:	f023 0307 	bic.w	r3, r3, #7
 80088ca:	f103 0208 	add.w	r2, r3, #8
 80088ce:	f8c8 2000 	str.w	r2, [r8]
 80088d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088d6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80088da:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80088de:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80088e2:	9307      	str	r3, [sp, #28]
 80088e4:	f8cd 8018 	str.w	r8, [sp, #24]
 80088e8:	ee08 0a10 	vmov	s16, r0
 80088ec:	4b9f      	ldr	r3, [pc, #636]	; (8008b6c <_printf_float+0x2dc>)
 80088ee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80088f2:	f04f 32ff 	mov.w	r2, #4294967295
 80088f6:	f7f8 f921 	bl	8000b3c <__aeabi_dcmpun>
 80088fa:	bb88      	cbnz	r0, 8008960 <_printf_float+0xd0>
 80088fc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008900:	4b9a      	ldr	r3, [pc, #616]	; (8008b6c <_printf_float+0x2dc>)
 8008902:	f04f 32ff 	mov.w	r2, #4294967295
 8008906:	f7f8 f8fb 	bl	8000b00 <__aeabi_dcmple>
 800890a:	bb48      	cbnz	r0, 8008960 <_printf_float+0xd0>
 800890c:	2200      	movs	r2, #0
 800890e:	2300      	movs	r3, #0
 8008910:	4640      	mov	r0, r8
 8008912:	4649      	mov	r1, r9
 8008914:	f7f8 f8ea 	bl	8000aec <__aeabi_dcmplt>
 8008918:	b110      	cbz	r0, 8008920 <_printf_float+0x90>
 800891a:	232d      	movs	r3, #45	; 0x2d
 800891c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008920:	4b93      	ldr	r3, [pc, #588]	; (8008b70 <_printf_float+0x2e0>)
 8008922:	4894      	ldr	r0, [pc, #592]	; (8008b74 <_printf_float+0x2e4>)
 8008924:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008928:	bf94      	ite	ls
 800892a:	4698      	movls	r8, r3
 800892c:	4680      	movhi	r8, r0
 800892e:	2303      	movs	r3, #3
 8008930:	6123      	str	r3, [r4, #16]
 8008932:	9b05      	ldr	r3, [sp, #20]
 8008934:	f023 0204 	bic.w	r2, r3, #4
 8008938:	6022      	str	r2, [r4, #0]
 800893a:	f04f 0900 	mov.w	r9, #0
 800893e:	9700      	str	r7, [sp, #0]
 8008940:	4633      	mov	r3, r6
 8008942:	aa0b      	add	r2, sp, #44	; 0x2c
 8008944:	4621      	mov	r1, r4
 8008946:	4628      	mov	r0, r5
 8008948:	f000 f9d8 	bl	8008cfc <_printf_common>
 800894c:	3001      	adds	r0, #1
 800894e:	f040 8090 	bne.w	8008a72 <_printf_float+0x1e2>
 8008952:	f04f 30ff 	mov.w	r0, #4294967295
 8008956:	b00d      	add	sp, #52	; 0x34
 8008958:	ecbd 8b02 	vpop	{d8}
 800895c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008960:	4642      	mov	r2, r8
 8008962:	464b      	mov	r3, r9
 8008964:	4640      	mov	r0, r8
 8008966:	4649      	mov	r1, r9
 8008968:	f7f8 f8e8 	bl	8000b3c <__aeabi_dcmpun>
 800896c:	b140      	cbz	r0, 8008980 <_printf_float+0xf0>
 800896e:	464b      	mov	r3, r9
 8008970:	2b00      	cmp	r3, #0
 8008972:	bfbc      	itt	lt
 8008974:	232d      	movlt	r3, #45	; 0x2d
 8008976:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800897a:	487f      	ldr	r0, [pc, #508]	; (8008b78 <_printf_float+0x2e8>)
 800897c:	4b7f      	ldr	r3, [pc, #508]	; (8008b7c <_printf_float+0x2ec>)
 800897e:	e7d1      	b.n	8008924 <_printf_float+0x94>
 8008980:	6863      	ldr	r3, [r4, #4]
 8008982:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008986:	9206      	str	r2, [sp, #24]
 8008988:	1c5a      	adds	r2, r3, #1
 800898a:	d13f      	bne.n	8008a0c <_printf_float+0x17c>
 800898c:	2306      	movs	r3, #6
 800898e:	6063      	str	r3, [r4, #4]
 8008990:	9b05      	ldr	r3, [sp, #20]
 8008992:	6861      	ldr	r1, [r4, #4]
 8008994:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008998:	2300      	movs	r3, #0
 800899a:	9303      	str	r3, [sp, #12]
 800899c:	ab0a      	add	r3, sp, #40	; 0x28
 800899e:	e9cd b301 	strd	fp, r3, [sp, #4]
 80089a2:	ab09      	add	r3, sp, #36	; 0x24
 80089a4:	ec49 8b10 	vmov	d0, r8, r9
 80089a8:	9300      	str	r3, [sp, #0]
 80089aa:	6022      	str	r2, [r4, #0]
 80089ac:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80089b0:	4628      	mov	r0, r5
 80089b2:	f7ff fecd 	bl	8008750 <__cvt>
 80089b6:	9b06      	ldr	r3, [sp, #24]
 80089b8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80089ba:	2b47      	cmp	r3, #71	; 0x47
 80089bc:	4680      	mov	r8, r0
 80089be:	d108      	bne.n	80089d2 <_printf_float+0x142>
 80089c0:	1cc8      	adds	r0, r1, #3
 80089c2:	db02      	blt.n	80089ca <_printf_float+0x13a>
 80089c4:	6863      	ldr	r3, [r4, #4]
 80089c6:	4299      	cmp	r1, r3
 80089c8:	dd41      	ble.n	8008a4e <_printf_float+0x1be>
 80089ca:	f1ab 0b02 	sub.w	fp, fp, #2
 80089ce:	fa5f fb8b 	uxtb.w	fp, fp
 80089d2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80089d6:	d820      	bhi.n	8008a1a <_printf_float+0x18a>
 80089d8:	3901      	subs	r1, #1
 80089da:	465a      	mov	r2, fp
 80089dc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80089e0:	9109      	str	r1, [sp, #36]	; 0x24
 80089e2:	f7ff ff17 	bl	8008814 <__exponent>
 80089e6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80089e8:	1813      	adds	r3, r2, r0
 80089ea:	2a01      	cmp	r2, #1
 80089ec:	4681      	mov	r9, r0
 80089ee:	6123      	str	r3, [r4, #16]
 80089f0:	dc02      	bgt.n	80089f8 <_printf_float+0x168>
 80089f2:	6822      	ldr	r2, [r4, #0]
 80089f4:	07d2      	lsls	r2, r2, #31
 80089f6:	d501      	bpl.n	80089fc <_printf_float+0x16c>
 80089f8:	3301      	adds	r3, #1
 80089fa:	6123      	str	r3, [r4, #16]
 80089fc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d09c      	beq.n	800893e <_printf_float+0xae>
 8008a04:	232d      	movs	r3, #45	; 0x2d
 8008a06:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008a0a:	e798      	b.n	800893e <_printf_float+0xae>
 8008a0c:	9a06      	ldr	r2, [sp, #24]
 8008a0e:	2a47      	cmp	r2, #71	; 0x47
 8008a10:	d1be      	bne.n	8008990 <_printf_float+0x100>
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d1bc      	bne.n	8008990 <_printf_float+0x100>
 8008a16:	2301      	movs	r3, #1
 8008a18:	e7b9      	b.n	800898e <_printf_float+0xfe>
 8008a1a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008a1e:	d118      	bne.n	8008a52 <_printf_float+0x1c2>
 8008a20:	2900      	cmp	r1, #0
 8008a22:	6863      	ldr	r3, [r4, #4]
 8008a24:	dd0b      	ble.n	8008a3e <_printf_float+0x1ae>
 8008a26:	6121      	str	r1, [r4, #16]
 8008a28:	b913      	cbnz	r3, 8008a30 <_printf_float+0x1a0>
 8008a2a:	6822      	ldr	r2, [r4, #0]
 8008a2c:	07d0      	lsls	r0, r2, #31
 8008a2e:	d502      	bpl.n	8008a36 <_printf_float+0x1a6>
 8008a30:	3301      	adds	r3, #1
 8008a32:	440b      	add	r3, r1
 8008a34:	6123      	str	r3, [r4, #16]
 8008a36:	65a1      	str	r1, [r4, #88]	; 0x58
 8008a38:	f04f 0900 	mov.w	r9, #0
 8008a3c:	e7de      	b.n	80089fc <_printf_float+0x16c>
 8008a3e:	b913      	cbnz	r3, 8008a46 <_printf_float+0x1b6>
 8008a40:	6822      	ldr	r2, [r4, #0]
 8008a42:	07d2      	lsls	r2, r2, #31
 8008a44:	d501      	bpl.n	8008a4a <_printf_float+0x1ba>
 8008a46:	3302      	adds	r3, #2
 8008a48:	e7f4      	b.n	8008a34 <_printf_float+0x1a4>
 8008a4a:	2301      	movs	r3, #1
 8008a4c:	e7f2      	b.n	8008a34 <_printf_float+0x1a4>
 8008a4e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8008a52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a54:	4299      	cmp	r1, r3
 8008a56:	db05      	blt.n	8008a64 <_printf_float+0x1d4>
 8008a58:	6823      	ldr	r3, [r4, #0]
 8008a5a:	6121      	str	r1, [r4, #16]
 8008a5c:	07d8      	lsls	r0, r3, #31
 8008a5e:	d5ea      	bpl.n	8008a36 <_printf_float+0x1a6>
 8008a60:	1c4b      	adds	r3, r1, #1
 8008a62:	e7e7      	b.n	8008a34 <_printf_float+0x1a4>
 8008a64:	2900      	cmp	r1, #0
 8008a66:	bfd4      	ite	le
 8008a68:	f1c1 0202 	rsble	r2, r1, #2
 8008a6c:	2201      	movgt	r2, #1
 8008a6e:	4413      	add	r3, r2
 8008a70:	e7e0      	b.n	8008a34 <_printf_float+0x1a4>
 8008a72:	6823      	ldr	r3, [r4, #0]
 8008a74:	055a      	lsls	r2, r3, #21
 8008a76:	d407      	bmi.n	8008a88 <_printf_float+0x1f8>
 8008a78:	6923      	ldr	r3, [r4, #16]
 8008a7a:	4642      	mov	r2, r8
 8008a7c:	4631      	mov	r1, r6
 8008a7e:	4628      	mov	r0, r5
 8008a80:	47b8      	blx	r7
 8008a82:	3001      	adds	r0, #1
 8008a84:	d12c      	bne.n	8008ae0 <_printf_float+0x250>
 8008a86:	e764      	b.n	8008952 <_printf_float+0xc2>
 8008a88:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008a8c:	f240 80e0 	bls.w	8008c50 <_printf_float+0x3c0>
 8008a90:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008a94:	2200      	movs	r2, #0
 8008a96:	2300      	movs	r3, #0
 8008a98:	f7f8 f81e 	bl	8000ad8 <__aeabi_dcmpeq>
 8008a9c:	2800      	cmp	r0, #0
 8008a9e:	d034      	beq.n	8008b0a <_printf_float+0x27a>
 8008aa0:	4a37      	ldr	r2, [pc, #220]	; (8008b80 <_printf_float+0x2f0>)
 8008aa2:	2301      	movs	r3, #1
 8008aa4:	4631      	mov	r1, r6
 8008aa6:	4628      	mov	r0, r5
 8008aa8:	47b8      	blx	r7
 8008aaa:	3001      	adds	r0, #1
 8008aac:	f43f af51 	beq.w	8008952 <_printf_float+0xc2>
 8008ab0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008ab4:	429a      	cmp	r2, r3
 8008ab6:	db02      	blt.n	8008abe <_printf_float+0x22e>
 8008ab8:	6823      	ldr	r3, [r4, #0]
 8008aba:	07d8      	lsls	r0, r3, #31
 8008abc:	d510      	bpl.n	8008ae0 <_printf_float+0x250>
 8008abe:	ee18 3a10 	vmov	r3, s16
 8008ac2:	4652      	mov	r2, sl
 8008ac4:	4631      	mov	r1, r6
 8008ac6:	4628      	mov	r0, r5
 8008ac8:	47b8      	blx	r7
 8008aca:	3001      	adds	r0, #1
 8008acc:	f43f af41 	beq.w	8008952 <_printf_float+0xc2>
 8008ad0:	f04f 0800 	mov.w	r8, #0
 8008ad4:	f104 091a 	add.w	r9, r4, #26
 8008ad8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ada:	3b01      	subs	r3, #1
 8008adc:	4543      	cmp	r3, r8
 8008ade:	dc09      	bgt.n	8008af4 <_printf_float+0x264>
 8008ae0:	6823      	ldr	r3, [r4, #0]
 8008ae2:	079b      	lsls	r3, r3, #30
 8008ae4:	f100 8105 	bmi.w	8008cf2 <_printf_float+0x462>
 8008ae8:	68e0      	ldr	r0, [r4, #12]
 8008aea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008aec:	4298      	cmp	r0, r3
 8008aee:	bfb8      	it	lt
 8008af0:	4618      	movlt	r0, r3
 8008af2:	e730      	b.n	8008956 <_printf_float+0xc6>
 8008af4:	2301      	movs	r3, #1
 8008af6:	464a      	mov	r2, r9
 8008af8:	4631      	mov	r1, r6
 8008afa:	4628      	mov	r0, r5
 8008afc:	47b8      	blx	r7
 8008afe:	3001      	adds	r0, #1
 8008b00:	f43f af27 	beq.w	8008952 <_printf_float+0xc2>
 8008b04:	f108 0801 	add.w	r8, r8, #1
 8008b08:	e7e6      	b.n	8008ad8 <_printf_float+0x248>
 8008b0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	dc39      	bgt.n	8008b84 <_printf_float+0x2f4>
 8008b10:	4a1b      	ldr	r2, [pc, #108]	; (8008b80 <_printf_float+0x2f0>)
 8008b12:	2301      	movs	r3, #1
 8008b14:	4631      	mov	r1, r6
 8008b16:	4628      	mov	r0, r5
 8008b18:	47b8      	blx	r7
 8008b1a:	3001      	adds	r0, #1
 8008b1c:	f43f af19 	beq.w	8008952 <_printf_float+0xc2>
 8008b20:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008b24:	4313      	orrs	r3, r2
 8008b26:	d102      	bne.n	8008b2e <_printf_float+0x29e>
 8008b28:	6823      	ldr	r3, [r4, #0]
 8008b2a:	07d9      	lsls	r1, r3, #31
 8008b2c:	d5d8      	bpl.n	8008ae0 <_printf_float+0x250>
 8008b2e:	ee18 3a10 	vmov	r3, s16
 8008b32:	4652      	mov	r2, sl
 8008b34:	4631      	mov	r1, r6
 8008b36:	4628      	mov	r0, r5
 8008b38:	47b8      	blx	r7
 8008b3a:	3001      	adds	r0, #1
 8008b3c:	f43f af09 	beq.w	8008952 <_printf_float+0xc2>
 8008b40:	f04f 0900 	mov.w	r9, #0
 8008b44:	f104 0a1a 	add.w	sl, r4, #26
 8008b48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b4a:	425b      	negs	r3, r3
 8008b4c:	454b      	cmp	r3, r9
 8008b4e:	dc01      	bgt.n	8008b54 <_printf_float+0x2c4>
 8008b50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b52:	e792      	b.n	8008a7a <_printf_float+0x1ea>
 8008b54:	2301      	movs	r3, #1
 8008b56:	4652      	mov	r2, sl
 8008b58:	4631      	mov	r1, r6
 8008b5a:	4628      	mov	r0, r5
 8008b5c:	47b8      	blx	r7
 8008b5e:	3001      	adds	r0, #1
 8008b60:	f43f aef7 	beq.w	8008952 <_printf_float+0xc2>
 8008b64:	f109 0901 	add.w	r9, r9, #1
 8008b68:	e7ee      	b.n	8008b48 <_printf_float+0x2b8>
 8008b6a:	bf00      	nop
 8008b6c:	7fefffff 	.word	0x7fefffff
 8008b70:	0800bc14 	.word	0x0800bc14
 8008b74:	0800bc18 	.word	0x0800bc18
 8008b78:	0800bc20 	.word	0x0800bc20
 8008b7c:	0800bc1c 	.word	0x0800bc1c
 8008b80:	0800bc24 	.word	0x0800bc24
 8008b84:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008b86:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008b88:	429a      	cmp	r2, r3
 8008b8a:	bfa8      	it	ge
 8008b8c:	461a      	movge	r2, r3
 8008b8e:	2a00      	cmp	r2, #0
 8008b90:	4691      	mov	r9, r2
 8008b92:	dc37      	bgt.n	8008c04 <_printf_float+0x374>
 8008b94:	f04f 0b00 	mov.w	fp, #0
 8008b98:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008b9c:	f104 021a 	add.w	r2, r4, #26
 8008ba0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008ba2:	9305      	str	r3, [sp, #20]
 8008ba4:	eba3 0309 	sub.w	r3, r3, r9
 8008ba8:	455b      	cmp	r3, fp
 8008baa:	dc33      	bgt.n	8008c14 <_printf_float+0x384>
 8008bac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008bb0:	429a      	cmp	r2, r3
 8008bb2:	db3b      	blt.n	8008c2c <_printf_float+0x39c>
 8008bb4:	6823      	ldr	r3, [r4, #0]
 8008bb6:	07da      	lsls	r2, r3, #31
 8008bb8:	d438      	bmi.n	8008c2c <_printf_float+0x39c>
 8008bba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008bbc:	9a05      	ldr	r2, [sp, #20]
 8008bbe:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008bc0:	1a9a      	subs	r2, r3, r2
 8008bc2:	eba3 0901 	sub.w	r9, r3, r1
 8008bc6:	4591      	cmp	r9, r2
 8008bc8:	bfa8      	it	ge
 8008bca:	4691      	movge	r9, r2
 8008bcc:	f1b9 0f00 	cmp.w	r9, #0
 8008bd0:	dc35      	bgt.n	8008c3e <_printf_float+0x3ae>
 8008bd2:	f04f 0800 	mov.w	r8, #0
 8008bd6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008bda:	f104 0a1a 	add.w	sl, r4, #26
 8008bde:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008be2:	1a9b      	subs	r3, r3, r2
 8008be4:	eba3 0309 	sub.w	r3, r3, r9
 8008be8:	4543      	cmp	r3, r8
 8008bea:	f77f af79 	ble.w	8008ae0 <_printf_float+0x250>
 8008bee:	2301      	movs	r3, #1
 8008bf0:	4652      	mov	r2, sl
 8008bf2:	4631      	mov	r1, r6
 8008bf4:	4628      	mov	r0, r5
 8008bf6:	47b8      	blx	r7
 8008bf8:	3001      	adds	r0, #1
 8008bfa:	f43f aeaa 	beq.w	8008952 <_printf_float+0xc2>
 8008bfe:	f108 0801 	add.w	r8, r8, #1
 8008c02:	e7ec      	b.n	8008bde <_printf_float+0x34e>
 8008c04:	4613      	mov	r3, r2
 8008c06:	4631      	mov	r1, r6
 8008c08:	4642      	mov	r2, r8
 8008c0a:	4628      	mov	r0, r5
 8008c0c:	47b8      	blx	r7
 8008c0e:	3001      	adds	r0, #1
 8008c10:	d1c0      	bne.n	8008b94 <_printf_float+0x304>
 8008c12:	e69e      	b.n	8008952 <_printf_float+0xc2>
 8008c14:	2301      	movs	r3, #1
 8008c16:	4631      	mov	r1, r6
 8008c18:	4628      	mov	r0, r5
 8008c1a:	9205      	str	r2, [sp, #20]
 8008c1c:	47b8      	blx	r7
 8008c1e:	3001      	adds	r0, #1
 8008c20:	f43f ae97 	beq.w	8008952 <_printf_float+0xc2>
 8008c24:	9a05      	ldr	r2, [sp, #20]
 8008c26:	f10b 0b01 	add.w	fp, fp, #1
 8008c2a:	e7b9      	b.n	8008ba0 <_printf_float+0x310>
 8008c2c:	ee18 3a10 	vmov	r3, s16
 8008c30:	4652      	mov	r2, sl
 8008c32:	4631      	mov	r1, r6
 8008c34:	4628      	mov	r0, r5
 8008c36:	47b8      	blx	r7
 8008c38:	3001      	adds	r0, #1
 8008c3a:	d1be      	bne.n	8008bba <_printf_float+0x32a>
 8008c3c:	e689      	b.n	8008952 <_printf_float+0xc2>
 8008c3e:	9a05      	ldr	r2, [sp, #20]
 8008c40:	464b      	mov	r3, r9
 8008c42:	4442      	add	r2, r8
 8008c44:	4631      	mov	r1, r6
 8008c46:	4628      	mov	r0, r5
 8008c48:	47b8      	blx	r7
 8008c4a:	3001      	adds	r0, #1
 8008c4c:	d1c1      	bne.n	8008bd2 <_printf_float+0x342>
 8008c4e:	e680      	b.n	8008952 <_printf_float+0xc2>
 8008c50:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008c52:	2a01      	cmp	r2, #1
 8008c54:	dc01      	bgt.n	8008c5a <_printf_float+0x3ca>
 8008c56:	07db      	lsls	r3, r3, #31
 8008c58:	d538      	bpl.n	8008ccc <_printf_float+0x43c>
 8008c5a:	2301      	movs	r3, #1
 8008c5c:	4642      	mov	r2, r8
 8008c5e:	4631      	mov	r1, r6
 8008c60:	4628      	mov	r0, r5
 8008c62:	47b8      	blx	r7
 8008c64:	3001      	adds	r0, #1
 8008c66:	f43f ae74 	beq.w	8008952 <_printf_float+0xc2>
 8008c6a:	ee18 3a10 	vmov	r3, s16
 8008c6e:	4652      	mov	r2, sl
 8008c70:	4631      	mov	r1, r6
 8008c72:	4628      	mov	r0, r5
 8008c74:	47b8      	blx	r7
 8008c76:	3001      	adds	r0, #1
 8008c78:	f43f ae6b 	beq.w	8008952 <_printf_float+0xc2>
 8008c7c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008c80:	2200      	movs	r2, #0
 8008c82:	2300      	movs	r3, #0
 8008c84:	f7f7 ff28 	bl	8000ad8 <__aeabi_dcmpeq>
 8008c88:	b9d8      	cbnz	r0, 8008cc2 <_printf_float+0x432>
 8008c8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c8c:	f108 0201 	add.w	r2, r8, #1
 8008c90:	3b01      	subs	r3, #1
 8008c92:	4631      	mov	r1, r6
 8008c94:	4628      	mov	r0, r5
 8008c96:	47b8      	blx	r7
 8008c98:	3001      	adds	r0, #1
 8008c9a:	d10e      	bne.n	8008cba <_printf_float+0x42a>
 8008c9c:	e659      	b.n	8008952 <_printf_float+0xc2>
 8008c9e:	2301      	movs	r3, #1
 8008ca0:	4652      	mov	r2, sl
 8008ca2:	4631      	mov	r1, r6
 8008ca4:	4628      	mov	r0, r5
 8008ca6:	47b8      	blx	r7
 8008ca8:	3001      	adds	r0, #1
 8008caa:	f43f ae52 	beq.w	8008952 <_printf_float+0xc2>
 8008cae:	f108 0801 	add.w	r8, r8, #1
 8008cb2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008cb4:	3b01      	subs	r3, #1
 8008cb6:	4543      	cmp	r3, r8
 8008cb8:	dcf1      	bgt.n	8008c9e <_printf_float+0x40e>
 8008cba:	464b      	mov	r3, r9
 8008cbc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008cc0:	e6dc      	b.n	8008a7c <_printf_float+0x1ec>
 8008cc2:	f04f 0800 	mov.w	r8, #0
 8008cc6:	f104 0a1a 	add.w	sl, r4, #26
 8008cca:	e7f2      	b.n	8008cb2 <_printf_float+0x422>
 8008ccc:	2301      	movs	r3, #1
 8008cce:	4642      	mov	r2, r8
 8008cd0:	e7df      	b.n	8008c92 <_printf_float+0x402>
 8008cd2:	2301      	movs	r3, #1
 8008cd4:	464a      	mov	r2, r9
 8008cd6:	4631      	mov	r1, r6
 8008cd8:	4628      	mov	r0, r5
 8008cda:	47b8      	blx	r7
 8008cdc:	3001      	adds	r0, #1
 8008cde:	f43f ae38 	beq.w	8008952 <_printf_float+0xc2>
 8008ce2:	f108 0801 	add.w	r8, r8, #1
 8008ce6:	68e3      	ldr	r3, [r4, #12]
 8008ce8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008cea:	1a5b      	subs	r3, r3, r1
 8008cec:	4543      	cmp	r3, r8
 8008cee:	dcf0      	bgt.n	8008cd2 <_printf_float+0x442>
 8008cf0:	e6fa      	b.n	8008ae8 <_printf_float+0x258>
 8008cf2:	f04f 0800 	mov.w	r8, #0
 8008cf6:	f104 0919 	add.w	r9, r4, #25
 8008cfa:	e7f4      	b.n	8008ce6 <_printf_float+0x456>

08008cfc <_printf_common>:
 8008cfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d00:	4616      	mov	r6, r2
 8008d02:	4699      	mov	r9, r3
 8008d04:	688a      	ldr	r2, [r1, #8]
 8008d06:	690b      	ldr	r3, [r1, #16]
 8008d08:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008d0c:	4293      	cmp	r3, r2
 8008d0e:	bfb8      	it	lt
 8008d10:	4613      	movlt	r3, r2
 8008d12:	6033      	str	r3, [r6, #0]
 8008d14:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008d18:	4607      	mov	r7, r0
 8008d1a:	460c      	mov	r4, r1
 8008d1c:	b10a      	cbz	r2, 8008d22 <_printf_common+0x26>
 8008d1e:	3301      	adds	r3, #1
 8008d20:	6033      	str	r3, [r6, #0]
 8008d22:	6823      	ldr	r3, [r4, #0]
 8008d24:	0699      	lsls	r1, r3, #26
 8008d26:	bf42      	ittt	mi
 8008d28:	6833      	ldrmi	r3, [r6, #0]
 8008d2a:	3302      	addmi	r3, #2
 8008d2c:	6033      	strmi	r3, [r6, #0]
 8008d2e:	6825      	ldr	r5, [r4, #0]
 8008d30:	f015 0506 	ands.w	r5, r5, #6
 8008d34:	d106      	bne.n	8008d44 <_printf_common+0x48>
 8008d36:	f104 0a19 	add.w	sl, r4, #25
 8008d3a:	68e3      	ldr	r3, [r4, #12]
 8008d3c:	6832      	ldr	r2, [r6, #0]
 8008d3e:	1a9b      	subs	r3, r3, r2
 8008d40:	42ab      	cmp	r3, r5
 8008d42:	dc26      	bgt.n	8008d92 <_printf_common+0x96>
 8008d44:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008d48:	1e13      	subs	r3, r2, #0
 8008d4a:	6822      	ldr	r2, [r4, #0]
 8008d4c:	bf18      	it	ne
 8008d4e:	2301      	movne	r3, #1
 8008d50:	0692      	lsls	r2, r2, #26
 8008d52:	d42b      	bmi.n	8008dac <_printf_common+0xb0>
 8008d54:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008d58:	4649      	mov	r1, r9
 8008d5a:	4638      	mov	r0, r7
 8008d5c:	47c0      	blx	r8
 8008d5e:	3001      	adds	r0, #1
 8008d60:	d01e      	beq.n	8008da0 <_printf_common+0xa4>
 8008d62:	6823      	ldr	r3, [r4, #0]
 8008d64:	68e5      	ldr	r5, [r4, #12]
 8008d66:	6832      	ldr	r2, [r6, #0]
 8008d68:	f003 0306 	and.w	r3, r3, #6
 8008d6c:	2b04      	cmp	r3, #4
 8008d6e:	bf08      	it	eq
 8008d70:	1aad      	subeq	r5, r5, r2
 8008d72:	68a3      	ldr	r3, [r4, #8]
 8008d74:	6922      	ldr	r2, [r4, #16]
 8008d76:	bf0c      	ite	eq
 8008d78:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008d7c:	2500      	movne	r5, #0
 8008d7e:	4293      	cmp	r3, r2
 8008d80:	bfc4      	itt	gt
 8008d82:	1a9b      	subgt	r3, r3, r2
 8008d84:	18ed      	addgt	r5, r5, r3
 8008d86:	2600      	movs	r6, #0
 8008d88:	341a      	adds	r4, #26
 8008d8a:	42b5      	cmp	r5, r6
 8008d8c:	d11a      	bne.n	8008dc4 <_printf_common+0xc8>
 8008d8e:	2000      	movs	r0, #0
 8008d90:	e008      	b.n	8008da4 <_printf_common+0xa8>
 8008d92:	2301      	movs	r3, #1
 8008d94:	4652      	mov	r2, sl
 8008d96:	4649      	mov	r1, r9
 8008d98:	4638      	mov	r0, r7
 8008d9a:	47c0      	blx	r8
 8008d9c:	3001      	adds	r0, #1
 8008d9e:	d103      	bne.n	8008da8 <_printf_common+0xac>
 8008da0:	f04f 30ff 	mov.w	r0, #4294967295
 8008da4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008da8:	3501      	adds	r5, #1
 8008daa:	e7c6      	b.n	8008d3a <_printf_common+0x3e>
 8008dac:	18e1      	adds	r1, r4, r3
 8008dae:	1c5a      	adds	r2, r3, #1
 8008db0:	2030      	movs	r0, #48	; 0x30
 8008db2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008db6:	4422      	add	r2, r4
 8008db8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008dbc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008dc0:	3302      	adds	r3, #2
 8008dc2:	e7c7      	b.n	8008d54 <_printf_common+0x58>
 8008dc4:	2301      	movs	r3, #1
 8008dc6:	4622      	mov	r2, r4
 8008dc8:	4649      	mov	r1, r9
 8008dca:	4638      	mov	r0, r7
 8008dcc:	47c0      	blx	r8
 8008dce:	3001      	adds	r0, #1
 8008dd0:	d0e6      	beq.n	8008da0 <_printf_common+0xa4>
 8008dd2:	3601      	adds	r6, #1
 8008dd4:	e7d9      	b.n	8008d8a <_printf_common+0x8e>
	...

08008dd8 <_printf_i>:
 8008dd8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008ddc:	7e0f      	ldrb	r7, [r1, #24]
 8008dde:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008de0:	2f78      	cmp	r7, #120	; 0x78
 8008de2:	4691      	mov	r9, r2
 8008de4:	4680      	mov	r8, r0
 8008de6:	460c      	mov	r4, r1
 8008de8:	469a      	mov	sl, r3
 8008dea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008dee:	d807      	bhi.n	8008e00 <_printf_i+0x28>
 8008df0:	2f62      	cmp	r7, #98	; 0x62
 8008df2:	d80a      	bhi.n	8008e0a <_printf_i+0x32>
 8008df4:	2f00      	cmp	r7, #0
 8008df6:	f000 80d8 	beq.w	8008faa <_printf_i+0x1d2>
 8008dfa:	2f58      	cmp	r7, #88	; 0x58
 8008dfc:	f000 80a3 	beq.w	8008f46 <_printf_i+0x16e>
 8008e00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008e04:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008e08:	e03a      	b.n	8008e80 <_printf_i+0xa8>
 8008e0a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008e0e:	2b15      	cmp	r3, #21
 8008e10:	d8f6      	bhi.n	8008e00 <_printf_i+0x28>
 8008e12:	a101      	add	r1, pc, #4	; (adr r1, 8008e18 <_printf_i+0x40>)
 8008e14:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008e18:	08008e71 	.word	0x08008e71
 8008e1c:	08008e85 	.word	0x08008e85
 8008e20:	08008e01 	.word	0x08008e01
 8008e24:	08008e01 	.word	0x08008e01
 8008e28:	08008e01 	.word	0x08008e01
 8008e2c:	08008e01 	.word	0x08008e01
 8008e30:	08008e85 	.word	0x08008e85
 8008e34:	08008e01 	.word	0x08008e01
 8008e38:	08008e01 	.word	0x08008e01
 8008e3c:	08008e01 	.word	0x08008e01
 8008e40:	08008e01 	.word	0x08008e01
 8008e44:	08008f91 	.word	0x08008f91
 8008e48:	08008eb5 	.word	0x08008eb5
 8008e4c:	08008f73 	.word	0x08008f73
 8008e50:	08008e01 	.word	0x08008e01
 8008e54:	08008e01 	.word	0x08008e01
 8008e58:	08008fb3 	.word	0x08008fb3
 8008e5c:	08008e01 	.word	0x08008e01
 8008e60:	08008eb5 	.word	0x08008eb5
 8008e64:	08008e01 	.word	0x08008e01
 8008e68:	08008e01 	.word	0x08008e01
 8008e6c:	08008f7b 	.word	0x08008f7b
 8008e70:	682b      	ldr	r3, [r5, #0]
 8008e72:	1d1a      	adds	r2, r3, #4
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	602a      	str	r2, [r5, #0]
 8008e78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008e7c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008e80:	2301      	movs	r3, #1
 8008e82:	e0a3      	b.n	8008fcc <_printf_i+0x1f4>
 8008e84:	6820      	ldr	r0, [r4, #0]
 8008e86:	6829      	ldr	r1, [r5, #0]
 8008e88:	0606      	lsls	r6, r0, #24
 8008e8a:	f101 0304 	add.w	r3, r1, #4
 8008e8e:	d50a      	bpl.n	8008ea6 <_printf_i+0xce>
 8008e90:	680e      	ldr	r6, [r1, #0]
 8008e92:	602b      	str	r3, [r5, #0]
 8008e94:	2e00      	cmp	r6, #0
 8008e96:	da03      	bge.n	8008ea0 <_printf_i+0xc8>
 8008e98:	232d      	movs	r3, #45	; 0x2d
 8008e9a:	4276      	negs	r6, r6
 8008e9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008ea0:	485e      	ldr	r0, [pc, #376]	; (800901c <_printf_i+0x244>)
 8008ea2:	230a      	movs	r3, #10
 8008ea4:	e019      	b.n	8008eda <_printf_i+0x102>
 8008ea6:	680e      	ldr	r6, [r1, #0]
 8008ea8:	602b      	str	r3, [r5, #0]
 8008eaa:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008eae:	bf18      	it	ne
 8008eb0:	b236      	sxthne	r6, r6
 8008eb2:	e7ef      	b.n	8008e94 <_printf_i+0xbc>
 8008eb4:	682b      	ldr	r3, [r5, #0]
 8008eb6:	6820      	ldr	r0, [r4, #0]
 8008eb8:	1d19      	adds	r1, r3, #4
 8008eba:	6029      	str	r1, [r5, #0]
 8008ebc:	0601      	lsls	r1, r0, #24
 8008ebe:	d501      	bpl.n	8008ec4 <_printf_i+0xec>
 8008ec0:	681e      	ldr	r6, [r3, #0]
 8008ec2:	e002      	b.n	8008eca <_printf_i+0xf2>
 8008ec4:	0646      	lsls	r6, r0, #25
 8008ec6:	d5fb      	bpl.n	8008ec0 <_printf_i+0xe8>
 8008ec8:	881e      	ldrh	r6, [r3, #0]
 8008eca:	4854      	ldr	r0, [pc, #336]	; (800901c <_printf_i+0x244>)
 8008ecc:	2f6f      	cmp	r7, #111	; 0x6f
 8008ece:	bf0c      	ite	eq
 8008ed0:	2308      	moveq	r3, #8
 8008ed2:	230a      	movne	r3, #10
 8008ed4:	2100      	movs	r1, #0
 8008ed6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008eda:	6865      	ldr	r5, [r4, #4]
 8008edc:	60a5      	str	r5, [r4, #8]
 8008ede:	2d00      	cmp	r5, #0
 8008ee0:	bfa2      	ittt	ge
 8008ee2:	6821      	ldrge	r1, [r4, #0]
 8008ee4:	f021 0104 	bicge.w	r1, r1, #4
 8008ee8:	6021      	strge	r1, [r4, #0]
 8008eea:	b90e      	cbnz	r6, 8008ef0 <_printf_i+0x118>
 8008eec:	2d00      	cmp	r5, #0
 8008eee:	d04d      	beq.n	8008f8c <_printf_i+0x1b4>
 8008ef0:	4615      	mov	r5, r2
 8008ef2:	fbb6 f1f3 	udiv	r1, r6, r3
 8008ef6:	fb03 6711 	mls	r7, r3, r1, r6
 8008efa:	5dc7      	ldrb	r7, [r0, r7]
 8008efc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008f00:	4637      	mov	r7, r6
 8008f02:	42bb      	cmp	r3, r7
 8008f04:	460e      	mov	r6, r1
 8008f06:	d9f4      	bls.n	8008ef2 <_printf_i+0x11a>
 8008f08:	2b08      	cmp	r3, #8
 8008f0a:	d10b      	bne.n	8008f24 <_printf_i+0x14c>
 8008f0c:	6823      	ldr	r3, [r4, #0]
 8008f0e:	07de      	lsls	r6, r3, #31
 8008f10:	d508      	bpl.n	8008f24 <_printf_i+0x14c>
 8008f12:	6923      	ldr	r3, [r4, #16]
 8008f14:	6861      	ldr	r1, [r4, #4]
 8008f16:	4299      	cmp	r1, r3
 8008f18:	bfde      	ittt	le
 8008f1a:	2330      	movle	r3, #48	; 0x30
 8008f1c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008f20:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008f24:	1b52      	subs	r2, r2, r5
 8008f26:	6122      	str	r2, [r4, #16]
 8008f28:	f8cd a000 	str.w	sl, [sp]
 8008f2c:	464b      	mov	r3, r9
 8008f2e:	aa03      	add	r2, sp, #12
 8008f30:	4621      	mov	r1, r4
 8008f32:	4640      	mov	r0, r8
 8008f34:	f7ff fee2 	bl	8008cfc <_printf_common>
 8008f38:	3001      	adds	r0, #1
 8008f3a:	d14c      	bne.n	8008fd6 <_printf_i+0x1fe>
 8008f3c:	f04f 30ff 	mov.w	r0, #4294967295
 8008f40:	b004      	add	sp, #16
 8008f42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f46:	4835      	ldr	r0, [pc, #212]	; (800901c <_printf_i+0x244>)
 8008f48:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008f4c:	6829      	ldr	r1, [r5, #0]
 8008f4e:	6823      	ldr	r3, [r4, #0]
 8008f50:	f851 6b04 	ldr.w	r6, [r1], #4
 8008f54:	6029      	str	r1, [r5, #0]
 8008f56:	061d      	lsls	r5, r3, #24
 8008f58:	d514      	bpl.n	8008f84 <_printf_i+0x1ac>
 8008f5a:	07df      	lsls	r7, r3, #31
 8008f5c:	bf44      	itt	mi
 8008f5e:	f043 0320 	orrmi.w	r3, r3, #32
 8008f62:	6023      	strmi	r3, [r4, #0]
 8008f64:	b91e      	cbnz	r6, 8008f6e <_printf_i+0x196>
 8008f66:	6823      	ldr	r3, [r4, #0]
 8008f68:	f023 0320 	bic.w	r3, r3, #32
 8008f6c:	6023      	str	r3, [r4, #0]
 8008f6e:	2310      	movs	r3, #16
 8008f70:	e7b0      	b.n	8008ed4 <_printf_i+0xfc>
 8008f72:	6823      	ldr	r3, [r4, #0]
 8008f74:	f043 0320 	orr.w	r3, r3, #32
 8008f78:	6023      	str	r3, [r4, #0]
 8008f7a:	2378      	movs	r3, #120	; 0x78
 8008f7c:	4828      	ldr	r0, [pc, #160]	; (8009020 <_printf_i+0x248>)
 8008f7e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008f82:	e7e3      	b.n	8008f4c <_printf_i+0x174>
 8008f84:	0659      	lsls	r1, r3, #25
 8008f86:	bf48      	it	mi
 8008f88:	b2b6      	uxthmi	r6, r6
 8008f8a:	e7e6      	b.n	8008f5a <_printf_i+0x182>
 8008f8c:	4615      	mov	r5, r2
 8008f8e:	e7bb      	b.n	8008f08 <_printf_i+0x130>
 8008f90:	682b      	ldr	r3, [r5, #0]
 8008f92:	6826      	ldr	r6, [r4, #0]
 8008f94:	6961      	ldr	r1, [r4, #20]
 8008f96:	1d18      	adds	r0, r3, #4
 8008f98:	6028      	str	r0, [r5, #0]
 8008f9a:	0635      	lsls	r5, r6, #24
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	d501      	bpl.n	8008fa4 <_printf_i+0x1cc>
 8008fa0:	6019      	str	r1, [r3, #0]
 8008fa2:	e002      	b.n	8008faa <_printf_i+0x1d2>
 8008fa4:	0670      	lsls	r0, r6, #25
 8008fa6:	d5fb      	bpl.n	8008fa0 <_printf_i+0x1c8>
 8008fa8:	8019      	strh	r1, [r3, #0]
 8008faa:	2300      	movs	r3, #0
 8008fac:	6123      	str	r3, [r4, #16]
 8008fae:	4615      	mov	r5, r2
 8008fb0:	e7ba      	b.n	8008f28 <_printf_i+0x150>
 8008fb2:	682b      	ldr	r3, [r5, #0]
 8008fb4:	1d1a      	adds	r2, r3, #4
 8008fb6:	602a      	str	r2, [r5, #0]
 8008fb8:	681d      	ldr	r5, [r3, #0]
 8008fba:	6862      	ldr	r2, [r4, #4]
 8008fbc:	2100      	movs	r1, #0
 8008fbe:	4628      	mov	r0, r5
 8008fc0:	f7f7 f916 	bl	80001f0 <memchr>
 8008fc4:	b108      	cbz	r0, 8008fca <_printf_i+0x1f2>
 8008fc6:	1b40      	subs	r0, r0, r5
 8008fc8:	6060      	str	r0, [r4, #4]
 8008fca:	6863      	ldr	r3, [r4, #4]
 8008fcc:	6123      	str	r3, [r4, #16]
 8008fce:	2300      	movs	r3, #0
 8008fd0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008fd4:	e7a8      	b.n	8008f28 <_printf_i+0x150>
 8008fd6:	6923      	ldr	r3, [r4, #16]
 8008fd8:	462a      	mov	r2, r5
 8008fda:	4649      	mov	r1, r9
 8008fdc:	4640      	mov	r0, r8
 8008fde:	47d0      	blx	sl
 8008fe0:	3001      	adds	r0, #1
 8008fe2:	d0ab      	beq.n	8008f3c <_printf_i+0x164>
 8008fe4:	6823      	ldr	r3, [r4, #0]
 8008fe6:	079b      	lsls	r3, r3, #30
 8008fe8:	d413      	bmi.n	8009012 <_printf_i+0x23a>
 8008fea:	68e0      	ldr	r0, [r4, #12]
 8008fec:	9b03      	ldr	r3, [sp, #12]
 8008fee:	4298      	cmp	r0, r3
 8008ff0:	bfb8      	it	lt
 8008ff2:	4618      	movlt	r0, r3
 8008ff4:	e7a4      	b.n	8008f40 <_printf_i+0x168>
 8008ff6:	2301      	movs	r3, #1
 8008ff8:	4632      	mov	r2, r6
 8008ffa:	4649      	mov	r1, r9
 8008ffc:	4640      	mov	r0, r8
 8008ffe:	47d0      	blx	sl
 8009000:	3001      	adds	r0, #1
 8009002:	d09b      	beq.n	8008f3c <_printf_i+0x164>
 8009004:	3501      	adds	r5, #1
 8009006:	68e3      	ldr	r3, [r4, #12]
 8009008:	9903      	ldr	r1, [sp, #12]
 800900a:	1a5b      	subs	r3, r3, r1
 800900c:	42ab      	cmp	r3, r5
 800900e:	dcf2      	bgt.n	8008ff6 <_printf_i+0x21e>
 8009010:	e7eb      	b.n	8008fea <_printf_i+0x212>
 8009012:	2500      	movs	r5, #0
 8009014:	f104 0619 	add.w	r6, r4, #25
 8009018:	e7f5      	b.n	8009006 <_printf_i+0x22e>
 800901a:	bf00      	nop
 800901c:	0800bc26 	.word	0x0800bc26
 8009020:	0800bc37 	.word	0x0800bc37

08009024 <iprintf>:
 8009024:	b40f      	push	{r0, r1, r2, r3}
 8009026:	4b0a      	ldr	r3, [pc, #40]	; (8009050 <iprintf+0x2c>)
 8009028:	b513      	push	{r0, r1, r4, lr}
 800902a:	681c      	ldr	r4, [r3, #0]
 800902c:	b124      	cbz	r4, 8009038 <iprintf+0x14>
 800902e:	69a3      	ldr	r3, [r4, #24]
 8009030:	b913      	cbnz	r3, 8009038 <iprintf+0x14>
 8009032:	4620      	mov	r0, r4
 8009034:	f001 f8f8 	bl	800a228 <__sinit>
 8009038:	ab05      	add	r3, sp, #20
 800903a:	9a04      	ldr	r2, [sp, #16]
 800903c:	68a1      	ldr	r1, [r4, #8]
 800903e:	9301      	str	r3, [sp, #4]
 8009040:	4620      	mov	r0, r4
 8009042:	f002 f803 	bl	800b04c <_vfiprintf_r>
 8009046:	b002      	add	sp, #8
 8009048:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800904c:	b004      	add	sp, #16
 800904e:	4770      	bx	lr
 8009050:	20000024 	.word	0x20000024

08009054 <_puts_r>:
 8009054:	b570      	push	{r4, r5, r6, lr}
 8009056:	460e      	mov	r6, r1
 8009058:	4605      	mov	r5, r0
 800905a:	b118      	cbz	r0, 8009064 <_puts_r+0x10>
 800905c:	6983      	ldr	r3, [r0, #24]
 800905e:	b90b      	cbnz	r3, 8009064 <_puts_r+0x10>
 8009060:	f001 f8e2 	bl	800a228 <__sinit>
 8009064:	69ab      	ldr	r3, [r5, #24]
 8009066:	68ac      	ldr	r4, [r5, #8]
 8009068:	b913      	cbnz	r3, 8009070 <_puts_r+0x1c>
 800906a:	4628      	mov	r0, r5
 800906c:	f001 f8dc 	bl	800a228 <__sinit>
 8009070:	4b2c      	ldr	r3, [pc, #176]	; (8009124 <_puts_r+0xd0>)
 8009072:	429c      	cmp	r4, r3
 8009074:	d120      	bne.n	80090b8 <_puts_r+0x64>
 8009076:	686c      	ldr	r4, [r5, #4]
 8009078:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800907a:	07db      	lsls	r3, r3, #31
 800907c:	d405      	bmi.n	800908a <_puts_r+0x36>
 800907e:	89a3      	ldrh	r3, [r4, #12]
 8009080:	0598      	lsls	r0, r3, #22
 8009082:	d402      	bmi.n	800908a <_puts_r+0x36>
 8009084:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009086:	f001 f972 	bl	800a36e <__retarget_lock_acquire_recursive>
 800908a:	89a3      	ldrh	r3, [r4, #12]
 800908c:	0719      	lsls	r1, r3, #28
 800908e:	d51d      	bpl.n	80090cc <_puts_r+0x78>
 8009090:	6923      	ldr	r3, [r4, #16]
 8009092:	b1db      	cbz	r3, 80090cc <_puts_r+0x78>
 8009094:	3e01      	subs	r6, #1
 8009096:	68a3      	ldr	r3, [r4, #8]
 8009098:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800909c:	3b01      	subs	r3, #1
 800909e:	60a3      	str	r3, [r4, #8]
 80090a0:	bb39      	cbnz	r1, 80090f2 <_puts_r+0x9e>
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	da38      	bge.n	8009118 <_puts_r+0xc4>
 80090a6:	4622      	mov	r2, r4
 80090a8:	210a      	movs	r1, #10
 80090aa:	4628      	mov	r0, r5
 80090ac:	f000 f868 	bl	8009180 <__swbuf_r>
 80090b0:	3001      	adds	r0, #1
 80090b2:	d011      	beq.n	80090d8 <_puts_r+0x84>
 80090b4:	250a      	movs	r5, #10
 80090b6:	e011      	b.n	80090dc <_puts_r+0x88>
 80090b8:	4b1b      	ldr	r3, [pc, #108]	; (8009128 <_puts_r+0xd4>)
 80090ba:	429c      	cmp	r4, r3
 80090bc:	d101      	bne.n	80090c2 <_puts_r+0x6e>
 80090be:	68ac      	ldr	r4, [r5, #8]
 80090c0:	e7da      	b.n	8009078 <_puts_r+0x24>
 80090c2:	4b1a      	ldr	r3, [pc, #104]	; (800912c <_puts_r+0xd8>)
 80090c4:	429c      	cmp	r4, r3
 80090c6:	bf08      	it	eq
 80090c8:	68ec      	ldreq	r4, [r5, #12]
 80090ca:	e7d5      	b.n	8009078 <_puts_r+0x24>
 80090cc:	4621      	mov	r1, r4
 80090ce:	4628      	mov	r0, r5
 80090d0:	f000 f8a8 	bl	8009224 <__swsetup_r>
 80090d4:	2800      	cmp	r0, #0
 80090d6:	d0dd      	beq.n	8009094 <_puts_r+0x40>
 80090d8:	f04f 35ff 	mov.w	r5, #4294967295
 80090dc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80090de:	07da      	lsls	r2, r3, #31
 80090e0:	d405      	bmi.n	80090ee <_puts_r+0x9a>
 80090e2:	89a3      	ldrh	r3, [r4, #12]
 80090e4:	059b      	lsls	r3, r3, #22
 80090e6:	d402      	bmi.n	80090ee <_puts_r+0x9a>
 80090e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80090ea:	f001 f941 	bl	800a370 <__retarget_lock_release_recursive>
 80090ee:	4628      	mov	r0, r5
 80090f0:	bd70      	pop	{r4, r5, r6, pc}
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	da04      	bge.n	8009100 <_puts_r+0xac>
 80090f6:	69a2      	ldr	r2, [r4, #24]
 80090f8:	429a      	cmp	r2, r3
 80090fa:	dc06      	bgt.n	800910a <_puts_r+0xb6>
 80090fc:	290a      	cmp	r1, #10
 80090fe:	d004      	beq.n	800910a <_puts_r+0xb6>
 8009100:	6823      	ldr	r3, [r4, #0]
 8009102:	1c5a      	adds	r2, r3, #1
 8009104:	6022      	str	r2, [r4, #0]
 8009106:	7019      	strb	r1, [r3, #0]
 8009108:	e7c5      	b.n	8009096 <_puts_r+0x42>
 800910a:	4622      	mov	r2, r4
 800910c:	4628      	mov	r0, r5
 800910e:	f000 f837 	bl	8009180 <__swbuf_r>
 8009112:	3001      	adds	r0, #1
 8009114:	d1bf      	bne.n	8009096 <_puts_r+0x42>
 8009116:	e7df      	b.n	80090d8 <_puts_r+0x84>
 8009118:	6823      	ldr	r3, [r4, #0]
 800911a:	250a      	movs	r5, #10
 800911c:	1c5a      	adds	r2, r3, #1
 800911e:	6022      	str	r2, [r4, #0]
 8009120:	701d      	strb	r5, [r3, #0]
 8009122:	e7db      	b.n	80090dc <_puts_r+0x88>
 8009124:	0800bcf8 	.word	0x0800bcf8
 8009128:	0800bd18 	.word	0x0800bd18
 800912c:	0800bcd8 	.word	0x0800bcd8

08009130 <puts>:
 8009130:	4b02      	ldr	r3, [pc, #8]	; (800913c <puts+0xc>)
 8009132:	4601      	mov	r1, r0
 8009134:	6818      	ldr	r0, [r3, #0]
 8009136:	f7ff bf8d 	b.w	8009054 <_puts_r>
 800913a:	bf00      	nop
 800913c:	20000024 	.word	0x20000024

08009140 <siprintf>:
 8009140:	b40e      	push	{r1, r2, r3}
 8009142:	b500      	push	{lr}
 8009144:	b09c      	sub	sp, #112	; 0x70
 8009146:	ab1d      	add	r3, sp, #116	; 0x74
 8009148:	9002      	str	r0, [sp, #8]
 800914a:	9006      	str	r0, [sp, #24]
 800914c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009150:	4809      	ldr	r0, [pc, #36]	; (8009178 <siprintf+0x38>)
 8009152:	9107      	str	r1, [sp, #28]
 8009154:	9104      	str	r1, [sp, #16]
 8009156:	4909      	ldr	r1, [pc, #36]	; (800917c <siprintf+0x3c>)
 8009158:	f853 2b04 	ldr.w	r2, [r3], #4
 800915c:	9105      	str	r1, [sp, #20]
 800915e:	6800      	ldr	r0, [r0, #0]
 8009160:	9301      	str	r3, [sp, #4]
 8009162:	a902      	add	r1, sp, #8
 8009164:	f001 fe48 	bl	800adf8 <_svfiprintf_r>
 8009168:	9b02      	ldr	r3, [sp, #8]
 800916a:	2200      	movs	r2, #0
 800916c:	701a      	strb	r2, [r3, #0]
 800916e:	b01c      	add	sp, #112	; 0x70
 8009170:	f85d eb04 	ldr.w	lr, [sp], #4
 8009174:	b003      	add	sp, #12
 8009176:	4770      	bx	lr
 8009178:	20000024 	.word	0x20000024
 800917c:	ffff0208 	.word	0xffff0208

08009180 <__swbuf_r>:
 8009180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009182:	460e      	mov	r6, r1
 8009184:	4614      	mov	r4, r2
 8009186:	4605      	mov	r5, r0
 8009188:	b118      	cbz	r0, 8009192 <__swbuf_r+0x12>
 800918a:	6983      	ldr	r3, [r0, #24]
 800918c:	b90b      	cbnz	r3, 8009192 <__swbuf_r+0x12>
 800918e:	f001 f84b 	bl	800a228 <__sinit>
 8009192:	4b21      	ldr	r3, [pc, #132]	; (8009218 <__swbuf_r+0x98>)
 8009194:	429c      	cmp	r4, r3
 8009196:	d12b      	bne.n	80091f0 <__swbuf_r+0x70>
 8009198:	686c      	ldr	r4, [r5, #4]
 800919a:	69a3      	ldr	r3, [r4, #24]
 800919c:	60a3      	str	r3, [r4, #8]
 800919e:	89a3      	ldrh	r3, [r4, #12]
 80091a0:	071a      	lsls	r2, r3, #28
 80091a2:	d52f      	bpl.n	8009204 <__swbuf_r+0x84>
 80091a4:	6923      	ldr	r3, [r4, #16]
 80091a6:	b36b      	cbz	r3, 8009204 <__swbuf_r+0x84>
 80091a8:	6923      	ldr	r3, [r4, #16]
 80091aa:	6820      	ldr	r0, [r4, #0]
 80091ac:	1ac0      	subs	r0, r0, r3
 80091ae:	6963      	ldr	r3, [r4, #20]
 80091b0:	b2f6      	uxtb	r6, r6
 80091b2:	4283      	cmp	r3, r0
 80091b4:	4637      	mov	r7, r6
 80091b6:	dc04      	bgt.n	80091c2 <__swbuf_r+0x42>
 80091b8:	4621      	mov	r1, r4
 80091ba:	4628      	mov	r0, r5
 80091bc:	f000 ffa0 	bl	800a100 <_fflush_r>
 80091c0:	bb30      	cbnz	r0, 8009210 <__swbuf_r+0x90>
 80091c2:	68a3      	ldr	r3, [r4, #8]
 80091c4:	3b01      	subs	r3, #1
 80091c6:	60a3      	str	r3, [r4, #8]
 80091c8:	6823      	ldr	r3, [r4, #0]
 80091ca:	1c5a      	adds	r2, r3, #1
 80091cc:	6022      	str	r2, [r4, #0]
 80091ce:	701e      	strb	r6, [r3, #0]
 80091d0:	6963      	ldr	r3, [r4, #20]
 80091d2:	3001      	adds	r0, #1
 80091d4:	4283      	cmp	r3, r0
 80091d6:	d004      	beq.n	80091e2 <__swbuf_r+0x62>
 80091d8:	89a3      	ldrh	r3, [r4, #12]
 80091da:	07db      	lsls	r3, r3, #31
 80091dc:	d506      	bpl.n	80091ec <__swbuf_r+0x6c>
 80091de:	2e0a      	cmp	r6, #10
 80091e0:	d104      	bne.n	80091ec <__swbuf_r+0x6c>
 80091e2:	4621      	mov	r1, r4
 80091e4:	4628      	mov	r0, r5
 80091e6:	f000 ff8b 	bl	800a100 <_fflush_r>
 80091ea:	b988      	cbnz	r0, 8009210 <__swbuf_r+0x90>
 80091ec:	4638      	mov	r0, r7
 80091ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80091f0:	4b0a      	ldr	r3, [pc, #40]	; (800921c <__swbuf_r+0x9c>)
 80091f2:	429c      	cmp	r4, r3
 80091f4:	d101      	bne.n	80091fa <__swbuf_r+0x7a>
 80091f6:	68ac      	ldr	r4, [r5, #8]
 80091f8:	e7cf      	b.n	800919a <__swbuf_r+0x1a>
 80091fa:	4b09      	ldr	r3, [pc, #36]	; (8009220 <__swbuf_r+0xa0>)
 80091fc:	429c      	cmp	r4, r3
 80091fe:	bf08      	it	eq
 8009200:	68ec      	ldreq	r4, [r5, #12]
 8009202:	e7ca      	b.n	800919a <__swbuf_r+0x1a>
 8009204:	4621      	mov	r1, r4
 8009206:	4628      	mov	r0, r5
 8009208:	f000 f80c 	bl	8009224 <__swsetup_r>
 800920c:	2800      	cmp	r0, #0
 800920e:	d0cb      	beq.n	80091a8 <__swbuf_r+0x28>
 8009210:	f04f 37ff 	mov.w	r7, #4294967295
 8009214:	e7ea      	b.n	80091ec <__swbuf_r+0x6c>
 8009216:	bf00      	nop
 8009218:	0800bcf8 	.word	0x0800bcf8
 800921c:	0800bd18 	.word	0x0800bd18
 8009220:	0800bcd8 	.word	0x0800bcd8

08009224 <__swsetup_r>:
 8009224:	4b32      	ldr	r3, [pc, #200]	; (80092f0 <__swsetup_r+0xcc>)
 8009226:	b570      	push	{r4, r5, r6, lr}
 8009228:	681d      	ldr	r5, [r3, #0]
 800922a:	4606      	mov	r6, r0
 800922c:	460c      	mov	r4, r1
 800922e:	b125      	cbz	r5, 800923a <__swsetup_r+0x16>
 8009230:	69ab      	ldr	r3, [r5, #24]
 8009232:	b913      	cbnz	r3, 800923a <__swsetup_r+0x16>
 8009234:	4628      	mov	r0, r5
 8009236:	f000 fff7 	bl	800a228 <__sinit>
 800923a:	4b2e      	ldr	r3, [pc, #184]	; (80092f4 <__swsetup_r+0xd0>)
 800923c:	429c      	cmp	r4, r3
 800923e:	d10f      	bne.n	8009260 <__swsetup_r+0x3c>
 8009240:	686c      	ldr	r4, [r5, #4]
 8009242:	89a3      	ldrh	r3, [r4, #12]
 8009244:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009248:	0719      	lsls	r1, r3, #28
 800924a:	d42c      	bmi.n	80092a6 <__swsetup_r+0x82>
 800924c:	06dd      	lsls	r5, r3, #27
 800924e:	d411      	bmi.n	8009274 <__swsetup_r+0x50>
 8009250:	2309      	movs	r3, #9
 8009252:	6033      	str	r3, [r6, #0]
 8009254:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009258:	81a3      	strh	r3, [r4, #12]
 800925a:	f04f 30ff 	mov.w	r0, #4294967295
 800925e:	e03e      	b.n	80092de <__swsetup_r+0xba>
 8009260:	4b25      	ldr	r3, [pc, #148]	; (80092f8 <__swsetup_r+0xd4>)
 8009262:	429c      	cmp	r4, r3
 8009264:	d101      	bne.n	800926a <__swsetup_r+0x46>
 8009266:	68ac      	ldr	r4, [r5, #8]
 8009268:	e7eb      	b.n	8009242 <__swsetup_r+0x1e>
 800926a:	4b24      	ldr	r3, [pc, #144]	; (80092fc <__swsetup_r+0xd8>)
 800926c:	429c      	cmp	r4, r3
 800926e:	bf08      	it	eq
 8009270:	68ec      	ldreq	r4, [r5, #12]
 8009272:	e7e6      	b.n	8009242 <__swsetup_r+0x1e>
 8009274:	0758      	lsls	r0, r3, #29
 8009276:	d512      	bpl.n	800929e <__swsetup_r+0x7a>
 8009278:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800927a:	b141      	cbz	r1, 800928e <__swsetup_r+0x6a>
 800927c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009280:	4299      	cmp	r1, r3
 8009282:	d002      	beq.n	800928a <__swsetup_r+0x66>
 8009284:	4630      	mov	r0, r6
 8009286:	f001 fc7b 	bl	800ab80 <_free_r>
 800928a:	2300      	movs	r3, #0
 800928c:	6363      	str	r3, [r4, #52]	; 0x34
 800928e:	89a3      	ldrh	r3, [r4, #12]
 8009290:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009294:	81a3      	strh	r3, [r4, #12]
 8009296:	2300      	movs	r3, #0
 8009298:	6063      	str	r3, [r4, #4]
 800929a:	6923      	ldr	r3, [r4, #16]
 800929c:	6023      	str	r3, [r4, #0]
 800929e:	89a3      	ldrh	r3, [r4, #12]
 80092a0:	f043 0308 	orr.w	r3, r3, #8
 80092a4:	81a3      	strh	r3, [r4, #12]
 80092a6:	6923      	ldr	r3, [r4, #16]
 80092a8:	b94b      	cbnz	r3, 80092be <__swsetup_r+0x9a>
 80092aa:	89a3      	ldrh	r3, [r4, #12]
 80092ac:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80092b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80092b4:	d003      	beq.n	80092be <__swsetup_r+0x9a>
 80092b6:	4621      	mov	r1, r4
 80092b8:	4630      	mov	r0, r6
 80092ba:	f001 f87f 	bl	800a3bc <__smakebuf_r>
 80092be:	89a0      	ldrh	r0, [r4, #12]
 80092c0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80092c4:	f010 0301 	ands.w	r3, r0, #1
 80092c8:	d00a      	beq.n	80092e0 <__swsetup_r+0xbc>
 80092ca:	2300      	movs	r3, #0
 80092cc:	60a3      	str	r3, [r4, #8]
 80092ce:	6963      	ldr	r3, [r4, #20]
 80092d0:	425b      	negs	r3, r3
 80092d2:	61a3      	str	r3, [r4, #24]
 80092d4:	6923      	ldr	r3, [r4, #16]
 80092d6:	b943      	cbnz	r3, 80092ea <__swsetup_r+0xc6>
 80092d8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80092dc:	d1ba      	bne.n	8009254 <__swsetup_r+0x30>
 80092de:	bd70      	pop	{r4, r5, r6, pc}
 80092e0:	0781      	lsls	r1, r0, #30
 80092e2:	bf58      	it	pl
 80092e4:	6963      	ldrpl	r3, [r4, #20]
 80092e6:	60a3      	str	r3, [r4, #8]
 80092e8:	e7f4      	b.n	80092d4 <__swsetup_r+0xb0>
 80092ea:	2000      	movs	r0, #0
 80092ec:	e7f7      	b.n	80092de <__swsetup_r+0xba>
 80092ee:	bf00      	nop
 80092f0:	20000024 	.word	0x20000024
 80092f4:	0800bcf8 	.word	0x0800bcf8
 80092f8:	0800bd18 	.word	0x0800bd18
 80092fc:	0800bcd8 	.word	0x0800bcd8

08009300 <quorem>:
 8009300:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009304:	6903      	ldr	r3, [r0, #16]
 8009306:	690c      	ldr	r4, [r1, #16]
 8009308:	42a3      	cmp	r3, r4
 800930a:	4607      	mov	r7, r0
 800930c:	f2c0 8081 	blt.w	8009412 <quorem+0x112>
 8009310:	3c01      	subs	r4, #1
 8009312:	f101 0814 	add.w	r8, r1, #20
 8009316:	f100 0514 	add.w	r5, r0, #20
 800931a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800931e:	9301      	str	r3, [sp, #4]
 8009320:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009324:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009328:	3301      	adds	r3, #1
 800932a:	429a      	cmp	r2, r3
 800932c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009330:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009334:	fbb2 f6f3 	udiv	r6, r2, r3
 8009338:	d331      	bcc.n	800939e <quorem+0x9e>
 800933a:	f04f 0e00 	mov.w	lr, #0
 800933e:	4640      	mov	r0, r8
 8009340:	46ac      	mov	ip, r5
 8009342:	46f2      	mov	sl, lr
 8009344:	f850 2b04 	ldr.w	r2, [r0], #4
 8009348:	b293      	uxth	r3, r2
 800934a:	fb06 e303 	mla	r3, r6, r3, lr
 800934e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009352:	b29b      	uxth	r3, r3
 8009354:	ebaa 0303 	sub.w	r3, sl, r3
 8009358:	f8dc a000 	ldr.w	sl, [ip]
 800935c:	0c12      	lsrs	r2, r2, #16
 800935e:	fa13 f38a 	uxtah	r3, r3, sl
 8009362:	fb06 e202 	mla	r2, r6, r2, lr
 8009366:	9300      	str	r3, [sp, #0]
 8009368:	9b00      	ldr	r3, [sp, #0]
 800936a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800936e:	b292      	uxth	r2, r2
 8009370:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009374:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009378:	f8bd 3000 	ldrh.w	r3, [sp]
 800937c:	4581      	cmp	r9, r0
 800937e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009382:	f84c 3b04 	str.w	r3, [ip], #4
 8009386:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800938a:	d2db      	bcs.n	8009344 <quorem+0x44>
 800938c:	f855 300b 	ldr.w	r3, [r5, fp]
 8009390:	b92b      	cbnz	r3, 800939e <quorem+0x9e>
 8009392:	9b01      	ldr	r3, [sp, #4]
 8009394:	3b04      	subs	r3, #4
 8009396:	429d      	cmp	r5, r3
 8009398:	461a      	mov	r2, r3
 800939a:	d32e      	bcc.n	80093fa <quorem+0xfa>
 800939c:	613c      	str	r4, [r7, #16]
 800939e:	4638      	mov	r0, r7
 80093a0:	f001 fad6 	bl	800a950 <__mcmp>
 80093a4:	2800      	cmp	r0, #0
 80093a6:	db24      	blt.n	80093f2 <quorem+0xf2>
 80093a8:	3601      	adds	r6, #1
 80093aa:	4628      	mov	r0, r5
 80093ac:	f04f 0c00 	mov.w	ip, #0
 80093b0:	f858 2b04 	ldr.w	r2, [r8], #4
 80093b4:	f8d0 e000 	ldr.w	lr, [r0]
 80093b8:	b293      	uxth	r3, r2
 80093ba:	ebac 0303 	sub.w	r3, ip, r3
 80093be:	0c12      	lsrs	r2, r2, #16
 80093c0:	fa13 f38e 	uxtah	r3, r3, lr
 80093c4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80093c8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80093cc:	b29b      	uxth	r3, r3
 80093ce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80093d2:	45c1      	cmp	r9, r8
 80093d4:	f840 3b04 	str.w	r3, [r0], #4
 80093d8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80093dc:	d2e8      	bcs.n	80093b0 <quorem+0xb0>
 80093de:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80093e2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80093e6:	b922      	cbnz	r2, 80093f2 <quorem+0xf2>
 80093e8:	3b04      	subs	r3, #4
 80093ea:	429d      	cmp	r5, r3
 80093ec:	461a      	mov	r2, r3
 80093ee:	d30a      	bcc.n	8009406 <quorem+0x106>
 80093f0:	613c      	str	r4, [r7, #16]
 80093f2:	4630      	mov	r0, r6
 80093f4:	b003      	add	sp, #12
 80093f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093fa:	6812      	ldr	r2, [r2, #0]
 80093fc:	3b04      	subs	r3, #4
 80093fe:	2a00      	cmp	r2, #0
 8009400:	d1cc      	bne.n	800939c <quorem+0x9c>
 8009402:	3c01      	subs	r4, #1
 8009404:	e7c7      	b.n	8009396 <quorem+0x96>
 8009406:	6812      	ldr	r2, [r2, #0]
 8009408:	3b04      	subs	r3, #4
 800940a:	2a00      	cmp	r2, #0
 800940c:	d1f0      	bne.n	80093f0 <quorem+0xf0>
 800940e:	3c01      	subs	r4, #1
 8009410:	e7eb      	b.n	80093ea <quorem+0xea>
 8009412:	2000      	movs	r0, #0
 8009414:	e7ee      	b.n	80093f4 <quorem+0xf4>
	...

08009418 <_dtoa_r>:
 8009418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800941c:	ed2d 8b04 	vpush	{d8-d9}
 8009420:	ec57 6b10 	vmov	r6, r7, d0
 8009424:	b093      	sub	sp, #76	; 0x4c
 8009426:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009428:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800942c:	9106      	str	r1, [sp, #24]
 800942e:	ee10 aa10 	vmov	sl, s0
 8009432:	4604      	mov	r4, r0
 8009434:	9209      	str	r2, [sp, #36]	; 0x24
 8009436:	930c      	str	r3, [sp, #48]	; 0x30
 8009438:	46bb      	mov	fp, r7
 800943a:	b975      	cbnz	r5, 800945a <_dtoa_r+0x42>
 800943c:	2010      	movs	r0, #16
 800943e:	f000 fffd 	bl	800a43c <malloc>
 8009442:	4602      	mov	r2, r0
 8009444:	6260      	str	r0, [r4, #36]	; 0x24
 8009446:	b920      	cbnz	r0, 8009452 <_dtoa_r+0x3a>
 8009448:	4ba7      	ldr	r3, [pc, #668]	; (80096e8 <_dtoa_r+0x2d0>)
 800944a:	21ea      	movs	r1, #234	; 0xea
 800944c:	48a7      	ldr	r0, [pc, #668]	; (80096ec <_dtoa_r+0x2d4>)
 800944e:	f001 ff93 	bl	800b378 <__assert_func>
 8009452:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009456:	6005      	str	r5, [r0, #0]
 8009458:	60c5      	str	r5, [r0, #12]
 800945a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800945c:	6819      	ldr	r1, [r3, #0]
 800945e:	b151      	cbz	r1, 8009476 <_dtoa_r+0x5e>
 8009460:	685a      	ldr	r2, [r3, #4]
 8009462:	604a      	str	r2, [r1, #4]
 8009464:	2301      	movs	r3, #1
 8009466:	4093      	lsls	r3, r2
 8009468:	608b      	str	r3, [r1, #8]
 800946a:	4620      	mov	r0, r4
 800946c:	f001 f82e 	bl	800a4cc <_Bfree>
 8009470:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009472:	2200      	movs	r2, #0
 8009474:	601a      	str	r2, [r3, #0]
 8009476:	1e3b      	subs	r3, r7, #0
 8009478:	bfaa      	itet	ge
 800947a:	2300      	movge	r3, #0
 800947c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8009480:	f8c8 3000 	strge.w	r3, [r8]
 8009484:	4b9a      	ldr	r3, [pc, #616]	; (80096f0 <_dtoa_r+0x2d8>)
 8009486:	bfbc      	itt	lt
 8009488:	2201      	movlt	r2, #1
 800948a:	f8c8 2000 	strlt.w	r2, [r8]
 800948e:	ea33 030b 	bics.w	r3, r3, fp
 8009492:	d11b      	bne.n	80094cc <_dtoa_r+0xb4>
 8009494:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009496:	f242 730f 	movw	r3, #9999	; 0x270f
 800949a:	6013      	str	r3, [r2, #0]
 800949c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80094a0:	4333      	orrs	r3, r6
 80094a2:	f000 8592 	beq.w	8009fca <_dtoa_r+0xbb2>
 80094a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80094a8:	b963      	cbnz	r3, 80094c4 <_dtoa_r+0xac>
 80094aa:	4b92      	ldr	r3, [pc, #584]	; (80096f4 <_dtoa_r+0x2dc>)
 80094ac:	e022      	b.n	80094f4 <_dtoa_r+0xdc>
 80094ae:	4b92      	ldr	r3, [pc, #584]	; (80096f8 <_dtoa_r+0x2e0>)
 80094b0:	9301      	str	r3, [sp, #4]
 80094b2:	3308      	adds	r3, #8
 80094b4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80094b6:	6013      	str	r3, [r2, #0]
 80094b8:	9801      	ldr	r0, [sp, #4]
 80094ba:	b013      	add	sp, #76	; 0x4c
 80094bc:	ecbd 8b04 	vpop	{d8-d9}
 80094c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094c4:	4b8b      	ldr	r3, [pc, #556]	; (80096f4 <_dtoa_r+0x2dc>)
 80094c6:	9301      	str	r3, [sp, #4]
 80094c8:	3303      	adds	r3, #3
 80094ca:	e7f3      	b.n	80094b4 <_dtoa_r+0x9c>
 80094cc:	2200      	movs	r2, #0
 80094ce:	2300      	movs	r3, #0
 80094d0:	4650      	mov	r0, sl
 80094d2:	4659      	mov	r1, fp
 80094d4:	f7f7 fb00 	bl	8000ad8 <__aeabi_dcmpeq>
 80094d8:	ec4b ab19 	vmov	d9, sl, fp
 80094dc:	4680      	mov	r8, r0
 80094de:	b158      	cbz	r0, 80094f8 <_dtoa_r+0xe0>
 80094e0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80094e2:	2301      	movs	r3, #1
 80094e4:	6013      	str	r3, [r2, #0]
 80094e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	f000 856b 	beq.w	8009fc4 <_dtoa_r+0xbac>
 80094ee:	4883      	ldr	r0, [pc, #524]	; (80096fc <_dtoa_r+0x2e4>)
 80094f0:	6018      	str	r0, [r3, #0]
 80094f2:	1e43      	subs	r3, r0, #1
 80094f4:	9301      	str	r3, [sp, #4]
 80094f6:	e7df      	b.n	80094b8 <_dtoa_r+0xa0>
 80094f8:	ec4b ab10 	vmov	d0, sl, fp
 80094fc:	aa10      	add	r2, sp, #64	; 0x40
 80094fe:	a911      	add	r1, sp, #68	; 0x44
 8009500:	4620      	mov	r0, r4
 8009502:	f001 facb 	bl	800aa9c <__d2b>
 8009506:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800950a:	ee08 0a10 	vmov	s16, r0
 800950e:	2d00      	cmp	r5, #0
 8009510:	f000 8084 	beq.w	800961c <_dtoa_r+0x204>
 8009514:	ee19 3a90 	vmov	r3, s19
 8009518:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800951c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8009520:	4656      	mov	r6, sl
 8009522:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8009526:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800952a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800952e:	4b74      	ldr	r3, [pc, #464]	; (8009700 <_dtoa_r+0x2e8>)
 8009530:	2200      	movs	r2, #0
 8009532:	4630      	mov	r0, r6
 8009534:	4639      	mov	r1, r7
 8009536:	f7f6 feaf 	bl	8000298 <__aeabi_dsub>
 800953a:	a365      	add	r3, pc, #404	; (adr r3, 80096d0 <_dtoa_r+0x2b8>)
 800953c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009540:	f7f7 f862 	bl	8000608 <__aeabi_dmul>
 8009544:	a364      	add	r3, pc, #400	; (adr r3, 80096d8 <_dtoa_r+0x2c0>)
 8009546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800954a:	f7f6 fea7 	bl	800029c <__adddf3>
 800954e:	4606      	mov	r6, r0
 8009550:	4628      	mov	r0, r5
 8009552:	460f      	mov	r7, r1
 8009554:	f7f6 ffee 	bl	8000534 <__aeabi_i2d>
 8009558:	a361      	add	r3, pc, #388	; (adr r3, 80096e0 <_dtoa_r+0x2c8>)
 800955a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800955e:	f7f7 f853 	bl	8000608 <__aeabi_dmul>
 8009562:	4602      	mov	r2, r0
 8009564:	460b      	mov	r3, r1
 8009566:	4630      	mov	r0, r6
 8009568:	4639      	mov	r1, r7
 800956a:	f7f6 fe97 	bl	800029c <__adddf3>
 800956e:	4606      	mov	r6, r0
 8009570:	460f      	mov	r7, r1
 8009572:	f7f7 faf9 	bl	8000b68 <__aeabi_d2iz>
 8009576:	2200      	movs	r2, #0
 8009578:	9000      	str	r0, [sp, #0]
 800957a:	2300      	movs	r3, #0
 800957c:	4630      	mov	r0, r6
 800957e:	4639      	mov	r1, r7
 8009580:	f7f7 fab4 	bl	8000aec <__aeabi_dcmplt>
 8009584:	b150      	cbz	r0, 800959c <_dtoa_r+0x184>
 8009586:	9800      	ldr	r0, [sp, #0]
 8009588:	f7f6 ffd4 	bl	8000534 <__aeabi_i2d>
 800958c:	4632      	mov	r2, r6
 800958e:	463b      	mov	r3, r7
 8009590:	f7f7 faa2 	bl	8000ad8 <__aeabi_dcmpeq>
 8009594:	b910      	cbnz	r0, 800959c <_dtoa_r+0x184>
 8009596:	9b00      	ldr	r3, [sp, #0]
 8009598:	3b01      	subs	r3, #1
 800959a:	9300      	str	r3, [sp, #0]
 800959c:	9b00      	ldr	r3, [sp, #0]
 800959e:	2b16      	cmp	r3, #22
 80095a0:	d85a      	bhi.n	8009658 <_dtoa_r+0x240>
 80095a2:	9a00      	ldr	r2, [sp, #0]
 80095a4:	4b57      	ldr	r3, [pc, #348]	; (8009704 <_dtoa_r+0x2ec>)
 80095a6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80095aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095ae:	ec51 0b19 	vmov	r0, r1, d9
 80095b2:	f7f7 fa9b 	bl	8000aec <__aeabi_dcmplt>
 80095b6:	2800      	cmp	r0, #0
 80095b8:	d050      	beq.n	800965c <_dtoa_r+0x244>
 80095ba:	9b00      	ldr	r3, [sp, #0]
 80095bc:	3b01      	subs	r3, #1
 80095be:	9300      	str	r3, [sp, #0]
 80095c0:	2300      	movs	r3, #0
 80095c2:	930b      	str	r3, [sp, #44]	; 0x2c
 80095c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80095c6:	1b5d      	subs	r5, r3, r5
 80095c8:	1e6b      	subs	r3, r5, #1
 80095ca:	9305      	str	r3, [sp, #20]
 80095cc:	bf45      	ittet	mi
 80095ce:	f1c5 0301 	rsbmi	r3, r5, #1
 80095d2:	9304      	strmi	r3, [sp, #16]
 80095d4:	2300      	movpl	r3, #0
 80095d6:	2300      	movmi	r3, #0
 80095d8:	bf4c      	ite	mi
 80095da:	9305      	strmi	r3, [sp, #20]
 80095dc:	9304      	strpl	r3, [sp, #16]
 80095de:	9b00      	ldr	r3, [sp, #0]
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	db3d      	blt.n	8009660 <_dtoa_r+0x248>
 80095e4:	9b05      	ldr	r3, [sp, #20]
 80095e6:	9a00      	ldr	r2, [sp, #0]
 80095e8:	920a      	str	r2, [sp, #40]	; 0x28
 80095ea:	4413      	add	r3, r2
 80095ec:	9305      	str	r3, [sp, #20]
 80095ee:	2300      	movs	r3, #0
 80095f0:	9307      	str	r3, [sp, #28]
 80095f2:	9b06      	ldr	r3, [sp, #24]
 80095f4:	2b09      	cmp	r3, #9
 80095f6:	f200 8089 	bhi.w	800970c <_dtoa_r+0x2f4>
 80095fa:	2b05      	cmp	r3, #5
 80095fc:	bfc4      	itt	gt
 80095fe:	3b04      	subgt	r3, #4
 8009600:	9306      	strgt	r3, [sp, #24]
 8009602:	9b06      	ldr	r3, [sp, #24]
 8009604:	f1a3 0302 	sub.w	r3, r3, #2
 8009608:	bfcc      	ite	gt
 800960a:	2500      	movgt	r5, #0
 800960c:	2501      	movle	r5, #1
 800960e:	2b03      	cmp	r3, #3
 8009610:	f200 8087 	bhi.w	8009722 <_dtoa_r+0x30a>
 8009614:	e8df f003 	tbb	[pc, r3]
 8009618:	59383a2d 	.word	0x59383a2d
 800961c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8009620:	441d      	add	r5, r3
 8009622:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009626:	2b20      	cmp	r3, #32
 8009628:	bfc1      	itttt	gt
 800962a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800962e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8009632:	fa0b f303 	lslgt.w	r3, fp, r3
 8009636:	fa26 f000 	lsrgt.w	r0, r6, r0
 800963a:	bfda      	itte	le
 800963c:	f1c3 0320 	rsble	r3, r3, #32
 8009640:	fa06 f003 	lslle.w	r0, r6, r3
 8009644:	4318      	orrgt	r0, r3
 8009646:	f7f6 ff65 	bl	8000514 <__aeabi_ui2d>
 800964a:	2301      	movs	r3, #1
 800964c:	4606      	mov	r6, r0
 800964e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8009652:	3d01      	subs	r5, #1
 8009654:	930e      	str	r3, [sp, #56]	; 0x38
 8009656:	e76a      	b.n	800952e <_dtoa_r+0x116>
 8009658:	2301      	movs	r3, #1
 800965a:	e7b2      	b.n	80095c2 <_dtoa_r+0x1aa>
 800965c:	900b      	str	r0, [sp, #44]	; 0x2c
 800965e:	e7b1      	b.n	80095c4 <_dtoa_r+0x1ac>
 8009660:	9b04      	ldr	r3, [sp, #16]
 8009662:	9a00      	ldr	r2, [sp, #0]
 8009664:	1a9b      	subs	r3, r3, r2
 8009666:	9304      	str	r3, [sp, #16]
 8009668:	4253      	negs	r3, r2
 800966a:	9307      	str	r3, [sp, #28]
 800966c:	2300      	movs	r3, #0
 800966e:	930a      	str	r3, [sp, #40]	; 0x28
 8009670:	e7bf      	b.n	80095f2 <_dtoa_r+0x1da>
 8009672:	2300      	movs	r3, #0
 8009674:	9308      	str	r3, [sp, #32]
 8009676:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009678:	2b00      	cmp	r3, #0
 800967a:	dc55      	bgt.n	8009728 <_dtoa_r+0x310>
 800967c:	2301      	movs	r3, #1
 800967e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009682:	461a      	mov	r2, r3
 8009684:	9209      	str	r2, [sp, #36]	; 0x24
 8009686:	e00c      	b.n	80096a2 <_dtoa_r+0x28a>
 8009688:	2301      	movs	r3, #1
 800968a:	e7f3      	b.n	8009674 <_dtoa_r+0x25c>
 800968c:	2300      	movs	r3, #0
 800968e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009690:	9308      	str	r3, [sp, #32]
 8009692:	9b00      	ldr	r3, [sp, #0]
 8009694:	4413      	add	r3, r2
 8009696:	9302      	str	r3, [sp, #8]
 8009698:	3301      	adds	r3, #1
 800969a:	2b01      	cmp	r3, #1
 800969c:	9303      	str	r3, [sp, #12]
 800969e:	bfb8      	it	lt
 80096a0:	2301      	movlt	r3, #1
 80096a2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80096a4:	2200      	movs	r2, #0
 80096a6:	6042      	str	r2, [r0, #4]
 80096a8:	2204      	movs	r2, #4
 80096aa:	f102 0614 	add.w	r6, r2, #20
 80096ae:	429e      	cmp	r6, r3
 80096b0:	6841      	ldr	r1, [r0, #4]
 80096b2:	d93d      	bls.n	8009730 <_dtoa_r+0x318>
 80096b4:	4620      	mov	r0, r4
 80096b6:	f000 fec9 	bl	800a44c <_Balloc>
 80096ba:	9001      	str	r0, [sp, #4]
 80096bc:	2800      	cmp	r0, #0
 80096be:	d13b      	bne.n	8009738 <_dtoa_r+0x320>
 80096c0:	4b11      	ldr	r3, [pc, #68]	; (8009708 <_dtoa_r+0x2f0>)
 80096c2:	4602      	mov	r2, r0
 80096c4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80096c8:	e6c0      	b.n	800944c <_dtoa_r+0x34>
 80096ca:	2301      	movs	r3, #1
 80096cc:	e7df      	b.n	800968e <_dtoa_r+0x276>
 80096ce:	bf00      	nop
 80096d0:	636f4361 	.word	0x636f4361
 80096d4:	3fd287a7 	.word	0x3fd287a7
 80096d8:	8b60c8b3 	.word	0x8b60c8b3
 80096dc:	3fc68a28 	.word	0x3fc68a28
 80096e0:	509f79fb 	.word	0x509f79fb
 80096e4:	3fd34413 	.word	0x3fd34413
 80096e8:	0800bc55 	.word	0x0800bc55
 80096ec:	0800bc6c 	.word	0x0800bc6c
 80096f0:	7ff00000 	.word	0x7ff00000
 80096f4:	0800bc51 	.word	0x0800bc51
 80096f8:	0800bc48 	.word	0x0800bc48
 80096fc:	0800bc25 	.word	0x0800bc25
 8009700:	3ff80000 	.word	0x3ff80000
 8009704:	0800bdc0 	.word	0x0800bdc0
 8009708:	0800bcc7 	.word	0x0800bcc7
 800970c:	2501      	movs	r5, #1
 800970e:	2300      	movs	r3, #0
 8009710:	9306      	str	r3, [sp, #24]
 8009712:	9508      	str	r5, [sp, #32]
 8009714:	f04f 33ff 	mov.w	r3, #4294967295
 8009718:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800971c:	2200      	movs	r2, #0
 800971e:	2312      	movs	r3, #18
 8009720:	e7b0      	b.n	8009684 <_dtoa_r+0x26c>
 8009722:	2301      	movs	r3, #1
 8009724:	9308      	str	r3, [sp, #32]
 8009726:	e7f5      	b.n	8009714 <_dtoa_r+0x2fc>
 8009728:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800972a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800972e:	e7b8      	b.n	80096a2 <_dtoa_r+0x28a>
 8009730:	3101      	adds	r1, #1
 8009732:	6041      	str	r1, [r0, #4]
 8009734:	0052      	lsls	r2, r2, #1
 8009736:	e7b8      	b.n	80096aa <_dtoa_r+0x292>
 8009738:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800973a:	9a01      	ldr	r2, [sp, #4]
 800973c:	601a      	str	r2, [r3, #0]
 800973e:	9b03      	ldr	r3, [sp, #12]
 8009740:	2b0e      	cmp	r3, #14
 8009742:	f200 809d 	bhi.w	8009880 <_dtoa_r+0x468>
 8009746:	2d00      	cmp	r5, #0
 8009748:	f000 809a 	beq.w	8009880 <_dtoa_r+0x468>
 800974c:	9b00      	ldr	r3, [sp, #0]
 800974e:	2b00      	cmp	r3, #0
 8009750:	dd32      	ble.n	80097b8 <_dtoa_r+0x3a0>
 8009752:	4ab7      	ldr	r2, [pc, #732]	; (8009a30 <_dtoa_r+0x618>)
 8009754:	f003 030f 	and.w	r3, r3, #15
 8009758:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800975c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009760:	9b00      	ldr	r3, [sp, #0]
 8009762:	05d8      	lsls	r0, r3, #23
 8009764:	ea4f 1723 	mov.w	r7, r3, asr #4
 8009768:	d516      	bpl.n	8009798 <_dtoa_r+0x380>
 800976a:	4bb2      	ldr	r3, [pc, #712]	; (8009a34 <_dtoa_r+0x61c>)
 800976c:	ec51 0b19 	vmov	r0, r1, d9
 8009770:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009774:	f7f7 f872 	bl	800085c <__aeabi_ddiv>
 8009778:	f007 070f 	and.w	r7, r7, #15
 800977c:	4682      	mov	sl, r0
 800977e:	468b      	mov	fp, r1
 8009780:	2503      	movs	r5, #3
 8009782:	4eac      	ldr	r6, [pc, #688]	; (8009a34 <_dtoa_r+0x61c>)
 8009784:	b957      	cbnz	r7, 800979c <_dtoa_r+0x384>
 8009786:	4642      	mov	r2, r8
 8009788:	464b      	mov	r3, r9
 800978a:	4650      	mov	r0, sl
 800978c:	4659      	mov	r1, fp
 800978e:	f7f7 f865 	bl	800085c <__aeabi_ddiv>
 8009792:	4682      	mov	sl, r0
 8009794:	468b      	mov	fp, r1
 8009796:	e028      	b.n	80097ea <_dtoa_r+0x3d2>
 8009798:	2502      	movs	r5, #2
 800979a:	e7f2      	b.n	8009782 <_dtoa_r+0x36a>
 800979c:	07f9      	lsls	r1, r7, #31
 800979e:	d508      	bpl.n	80097b2 <_dtoa_r+0x39a>
 80097a0:	4640      	mov	r0, r8
 80097a2:	4649      	mov	r1, r9
 80097a4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80097a8:	f7f6 ff2e 	bl	8000608 <__aeabi_dmul>
 80097ac:	3501      	adds	r5, #1
 80097ae:	4680      	mov	r8, r0
 80097b0:	4689      	mov	r9, r1
 80097b2:	107f      	asrs	r7, r7, #1
 80097b4:	3608      	adds	r6, #8
 80097b6:	e7e5      	b.n	8009784 <_dtoa_r+0x36c>
 80097b8:	f000 809b 	beq.w	80098f2 <_dtoa_r+0x4da>
 80097bc:	9b00      	ldr	r3, [sp, #0]
 80097be:	4f9d      	ldr	r7, [pc, #628]	; (8009a34 <_dtoa_r+0x61c>)
 80097c0:	425e      	negs	r6, r3
 80097c2:	4b9b      	ldr	r3, [pc, #620]	; (8009a30 <_dtoa_r+0x618>)
 80097c4:	f006 020f 	and.w	r2, r6, #15
 80097c8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80097cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097d0:	ec51 0b19 	vmov	r0, r1, d9
 80097d4:	f7f6 ff18 	bl	8000608 <__aeabi_dmul>
 80097d8:	1136      	asrs	r6, r6, #4
 80097da:	4682      	mov	sl, r0
 80097dc:	468b      	mov	fp, r1
 80097de:	2300      	movs	r3, #0
 80097e0:	2502      	movs	r5, #2
 80097e2:	2e00      	cmp	r6, #0
 80097e4:	d17a      	bne.n	80098dc <_dtoa_r+0x4c4>
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d1d3      	bne.n	8009792 <_dtoa_r+0x37a>
 80097ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	f000 8082 	beq.w	80098f6 <_dtoa_r+0x4de>
 80097f2:	4b91      	ldr	r3, [pc, #580]	; (8009a38 <_dtoa_r+0x620>)
 80097f4:	2200      	movs	r2, #0
 80097f6:	4650      	mov	r0, sl
 80097f8:	4659      	mov	r1, fp
 80097fa:	f7f7 f977 	bl	8000aec <__aeabi_dcmplt>
 80097fe:	2800      	cmp	r0, #0
 8009800:	d079      	beq.n	80098f6 <_dtoa_r+0x4de>
 8009802:	9b03      	ldr	r3, [sp, #12]
 8009804:	2b00      	cmp	r3, #0
 8009806:	d076      	beq.n	80098f6 <_dtoa_r+0x4de>
 8009808:	9b02      	ldr	r3, [sp, #8]
 800980a:	2b00      	cmp	r3, #0
 800980c:	dd36      	ble.n	800987c <_dtoa_r+0x464>
 800980e:	9b00      	ldr	r3, [sp, #0]
 8009810:	4650      	mov	r0, sl
 8009812:	4659      	mov	r1, fp
 8009814:	1e5f      	subs	r7, r3, #1
 8009816:	2200      	movs	r2, #0
 8009818:	4b88      	ldr	r3, [pc, #544]	; (8009a3c <_dtoa_r+0x624>)
 800981a:	f7f6 fef5 	bl	8000608 <__aeabi_dmul>
 800981e:	9e02      	ldr	r6, [sp, #8]
 8009820:	4682      	mov	sl, r0
 8009822:	468b      	mov	fp, r1
 8009824:	3501      	adds	r5, #1
 8009826:	4628      	mov	r0, r5
 8009828:	f7f6 fe84 	bl	8000534 <__aeabi_i2d>
 800982c:	4652      	mov	r2, sl
 800982e:	465b      	mov	r3, fp
 8009830:	f7f6 feea 	bl	8000608 <__aeabi_dmul>
 8009834:	4b82      	ldr	r3, [pc, #520]	; (8009a40 <_dtoa_r+0x628>)
 8009836:	2200      	movs	r2, #0
 8009838:	f7f6 fd30 	bl	800029c <__adddf3>
 800983c:	46d0      	mov	r8, sl
 800983e:	46d9      	mov	r9, fp
 8009840:	4682      	mov	sl, r0
 8009842:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8009846:	2e00      	cmp	r6, #0
 8009848:	d158      	bne.n	80098fc <_dtoa_r+0x4e4>
 800984a:	4b7e      	ldr	r3, [pc, #504]	; (8009a44 <_dtoa_r+0x62c>)
 800984c:	2200      	movs	r2, #0
 800984e:	4640      	mov	r0, r8
 8009850:	4649      	mov	r1, r9
 8009852:	f7f6 fd21 	bl	8000298 <__aeabi_dsub>
 8009856:	4652      	mov	r2, sl
 8009858:	465b      	mov	r3, fp
 800985a:	4680      	mov	r8, r0
 800985c:	4689      	mov	r9, r1
 800985e:	f7f7 f963 	bl	8000b28 <__aeabi_dcmpgt>
 8009862:	2800      	cmp	r0, #0
 8009864:	f040 8295 	bne.w	8009d92 <_dtoa_r+0x97a>
 8009868:	4652      	mov	r2, sl
 800986a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800986e:	4640      	mov	r0, r8
 8009870:	4649      	mov	r1, r9
 8009872:	f7f7 f93b 	bl	8000aec <__aeabi_dcmplt>
 8009876:	2800      	cmp	r0, #0
 8009878:	f040 8289 	bne.w	8009d8e <_dtoa_r+0x976>
 800987c:	ec5b ab19 	vmov	sl, fp, d9
 8009880:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009882:	2b00      	cmp	r3, #0
 8009884:	f2c0 8148 	blt.w	8009b18 <_dtoa_r+0x700>
 8009888:	9a00      	ldr	r2, [sp, #0]
 800988a:	2a0e      	cmp	r2, #14
 800988c:	f300 8144 	bgt.w	8009b18 <_dtoa_r+0x700>
 8009890:	4b67      	ldr	r3, [pc, #412]	; (8009a30 <_dtoa_r+0x618>)
 8009892:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009896:	e9d3 8900 	ldrd	r8, r9, [r3]
 800989a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800989c:	2b00      	cmp	r3, #0
 800989e:	f280 80d5 	bge.w	8009a4c <_dtoa_r+0x634>
 80098a2:	9b03      	ldr	r3, [sp, #12]
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	f300 80d1 	bgt.w	8009a4c <_dtoa_r+0x634>
 80098aa:	f040 826f 	bne.w	8009d8c <_dtoa_r+0x974>
 80098ae:	4b65      	ldr	r3, [pc, #404]	; (8009a44 <_dtoa_r+0x62c>)
 80098b0:	2200      	movs	r2, #0
 80098b2:	4640      	mov	r0, r8
 80098b4:	4649      	mov	r1, r9
 80098b6:	f7f6 fea7 	bl	8000608 <__aeabi_dmul>
 80098ba:	4652      	mov	r2, sl
 80098bc:	465b      	mov	r3, fp
 80098be:	f7f7 f929 	bl	8000b14 <__aeabi_dcmpge>
 80098c2:	9e03      	ldr	r6, [sp, #12]
 80098c4:	4637      	mov	r7, r6
 80098c6:	2800      	cmp	r0, #0
 80098c8:	f040 8245 	bne.w	8009d56 <_dtoa_r+0x93e>
 80098cc:	9d01      	ldr	r5, [sp, #4]
 80098ce:	2331      	movs	r3, #49	; 0x31
 80098d0:	f805 3b01 	strb.w	r3, [r5], #1
 80098d4:	9b00      	ldr	r3, [sp, #0]
 80098d6:	3301      	adds	r3, #1
 80098d8:	9300      	str	r3, [sp, #0]
 80098da:	e240      	b.n	8009d5e <_dtoa_r+0x946>
 80098dc:	07f2      	lsls	r2, r6, #31
 80098de:	d505      	bpl.n	80098ec <_dtoa_r+0x4d4>
 80098e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80098e4:	f7f6 fe90 	bl	8000608 <__aeabi_dmul>
 80098e8:	3501      	adds	r5, #1
 80098ea:	2301      	movs	r3, #1
 80098ec:	1076      	asrs	r6, r6, #1
 80098ee:	3708      	adds	r7, #8
 80098f0:	e777      	b.n	80097e2 <_dtoa_r+0x3ca>
 80098f2:	2502      	movs	r5, #2
 80098f4:	e779      	b.n	80097ea <_dtoa_r+0x3d2>
 80098f6:	9f00      	ldr	r7, [sp, #0]
 80098f8:	9e03      	ldr	r6, [sp, #12]
 80098fa:	e794      	b.n	8009826 <_dtoa_r+0x40e>
 80098fc:	9901      	ldr	r1, [sp, #4]
 80098fe:	4b4c      	ldr	r3, [pc, #304]	; (8009a30 <_dtoa_r+0x618>)
 8009900:	4431      	add	r1, r6
 8009902:	910d      	str	r1, [sp, #52]	; 0x34
 8009904:	9908      	ldr	r1, [sp, #32]
 8009906:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800990a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800990e:	2900      	cmp	r1, #0
 8009910:	d043      	beq.n	800999a <_dtoa_r+0x582>
 8009912:	494d      	ldr	r1, [pc, #308]	; (8009a48 <_dtoa_r+0x630>)
 8009914:	2000      	movs	r0, #0
 8009916:	f7f6 ffa1 	bl	800085c <__aeabi_ddiv>
 800991a:	4652      	mov	r2, sl
 800991c:	465b      	mov	r3, fp
 800991e:	f7f6 fcbb 	bl	8000298 <__aeabi_dsub>
 8009922:	9d01      	ldr	r5, [sp, #4]
 8009924:	4682      	mov	sl, r0
 8009926:	468b      	mov	fp, r1
 8009928:	4649      	mov	r1, r9
 800992a:	4640      	mov	r0, r8
 800992c:	f7f7 f91c 	bl	8000b68 <__aeabi_d2iz>
 8009930:	4606      	mov	r6, r0
 8009932:	f7f6 fdff 	bl	8000534 <__aeabi_i2d>
 8009936:	4602      	mov	r2, r0
 8009938:	460b      	mov	r3, r1
 800993a:	4640      	mov	r0, r8
 800993c:	4649      	mov	r1, r9
 800993e:	f7f6 fcab 	bl	8000298 <__aeabi_dsub>
 8009942:	3630      	adds	r6, #48	; 0x30
 8009944:	f805 6b01 	strb.w	r6, [r5], #1
 8009948:	4652      	mov	r2, sl
 800994a:	465b      	mov	r3, fp
 800994c:	4680      	mov	r8, r0
 800994e:	4689      	mov	r9, r1
 8009950:	f7f7 f8cc 	bl	8000aec <__aeabi_dcmplt>
 8009954:	2800      	cmp	r0, #0
 8009956:	d163      	bne.n	8009a20 <_dtoa_r+0x608>
 8009958:	4642      	mov	r2, r8
 800995a:	464b      	mov	r3, r9
 800995c:	4936      	ldr	r1, [pc, #216]	; (8009a38 <_dtoa_r+0x620>)
 800995e:	2000      	movs	r0, #0
 8009960:	f7f6 fc9a 	bl	8000298 <__aeabi_dsub>
 8009964:	4652      	mov	r2, sl
 8009966:	465b      	mov	r3, fp
 8009968:	f7f7 f8c0 	bl	8000aec <__aeabi_dcmplt>
 800996c:	2800      	cmp	r0, #0
 800996e:	f040 80b5 	bne.w	8009adc <_dtoa_r+0x6c4>
 8009972:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009974:	429d      	cmp	r5, r3
 8009976:	d081      	beq.n	800987c <_dtoa_r+0x464>
 8009978:	4b30      	ldr	r3, [pc, #192]	; (8009a3c <_dtoa_r+0x624>)
 800997a:	2200      	movs	r2, #0
 800997c:	4650      	mov	r0, sl
 800997e:	4659      	mov	r1, fp
 8009980:	f7f6 fe42 	bl	8000608 <__aeabi_dmul>
 8009984:	4b2d      	ldr	r3, [pc, #180]	; (8009a3c <_dtoa_r+0x624>)
 8009986:	4682      	mov	sl, r0
 8009988:	468b      	mov	fp, r1
 800998a:	4640      	mov	r0, r8
 800998c:	4649      	mov	r1, r9
 800998e:	2200      	movs	r2, #0
 8009990:	f7f6 fe3a 	bl	8000608 <__aeabi_dmul>
 8009994:	4680      	mov	r8, r0
 8009996:	4689      	mov	r9, r1
 8009998:	e7c6      	b.n	8009928 <_dtoa_r+0x510>
 800999a:	4650      	mov	r0, sl
 800999c:	4659      	mov	r1, fp
 800999e:	f7f6 fe33 	bl	8000608 <__aeabi_dmul>
 80099a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80099a4:	9d01      	ldr	r5, [sp, #4]
 80099a6:	930f      	str	r3, [sp, #60]	; 0x3c
 80099a8:	4682      	mov	sl, r0
 80099aa:	468b      	mov	fp, r1
 80099ac:	4649      	mov	r1, r9
 80099ae:	4640      	mov	r0, r8
 80099b0:	f7f7 f8da 	bl	8000b68 <__aeabi_d2iz>
 80099b4:	4606      	mov	r6, r0
 80099b6:	f7f6 fdbd 	bl	8000534 <__aeabi_i2d>
 80099ba:	3630      	adds	r6, #48	; 0x30
 80099bc:	4602      	mov	r2, r0
 80099be:	460b      	mov	r3, r1
 80099c0:	4640      	mov	r0, r8
 80099c2:	4649      	mov	r1, r9
 80099c4:	f7f6 fc68 	bl	8000298 <__aeabi_dsub>
 80099c8:	f805 6b01 	strb.w	r6, [r5], #1
 80099cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80099ce:	429d      	cmp	r5, r3
 80099d0:	4680      	mov	r8, r0
 80099d2:	4689      	mov	r9, r1
 80099d4:	f04f 0200 	mov.w	r2, #0
 80099d8:	d124      	bne.n	8009a24 <_dtoa_r+0x60c>
 80099da:	4b1b      	ldr	r3, [pc, #108]	; (8009a48 <_dtoa_r+0x630>)
 80099dc:	4650      	mov	r0, sl
 80099de:	4659      	mov	r1, fp
 80099e0:	f7f6 fc5c 	bl	800029c <__adddf3>
 80099e4:	4602      	mov	r2, r0
 80099e6:	460b      	mov	r3, r1
 80099e8:	4640      	mov	r0, r8
 80099ea:	4649      	mov	r1, r9
 80099ec:	f7f7 f89c 	bl	8000b28 <__aeabi_dcmpgt>
 80099f0:	2800      	cmp	r0, #0
 80099f2:	d173      	bne.n	8009adc <_dtoa_r+0x6c4>
 80099f4:	4652      	mov	r2, sl
 80099f6:	465b      	mov	r3, fp
 80099f8:	4913      	ldr	r1, [pc, #76]	; (8009a48 <_dtoa_r+0x630>)
 80099fa:	2000      	movs	r0, #0
 80099fc:	f7f6 fc4c 	bl	8000298 <__aeabi_dsub>
 8009a00:	4602      	mov	r2, r0
 8009a02:	460b      	mov	r3, r1
 8009a04:	4640      	mov	r0, r8
 8009a06:	4649      	mov	r1, r9
 8009a08:	f7f7 f870 	bl	8000aec <__aeabi_dcmplt>
 8009a0c:	2800      	cmp	r0, #0
 8009a0e:	f43f af35 	beq.w	800987c <_dtoa_r+0x464>
 8009a12:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009a14:	1e6b      	subs	r3, r5, #1
 8009a16:	930f      	str	r3, [sp, #60]	; 0x3c
 8009a18:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009a1c:	2b30      	cmp	r3, #48	; 0x30
 8009a1e:	d0f8      	beq.n	8009a12 <_dtoa_r+0x5fa>
 8009a20:	9700      	str	r7, [sp, #0]
 8009a22:	e049      	b.n	8009ab8 <_dtoa_r+0x6a0>
 8009a24:	4b05      	ldr	r3, [pc, #20]	; (8009a3c <_dtoa_r+0x624>)
 8009a26:	f7f6 fdef 	bl	8000608 <__aeabi_dmul>
 8009a2a:	4680      	mov	r8, r0
 8009a2c:	4689      	mov	r9, r1
 8009a2e:	e7bd      	b.n	80099ac <_dtoa_r+0x594>
 8009a30:	0800bdc0 	.word	0x0800bdc0
 8009a34:	0800bd98 	.word	0x0800bd98
 8009a38:	3ff00000 	.word	0x3ff00000
 8009a3c:	40240000 	.word	0x40240000
 8009a40:	401c0000 	.word	0x401c0000
 8009a44:	40140000 	.word	0x40140000
 8009a48:	3fe00000 	.word	0x3fe00000
 8009a4c:	9d01      	ldr	r5, [sp, #4]
 8009a4e:	4656      	mov	r6, sl
 8009a50:	465f      	mov	r7, fp
 8009a52:	4642      	mov	r2, r8
 8009a54:	464b      	mov	r3, r9
 8009a56:	4630      	mov	r0, r6
 8009a58:	4639      	mov	r1, r7
 8009a5a:	f7f6 feff 	bl	800085c <__aeabi_ddiv>
 8009a5e:	f7f7 f883 	bl	8000b68 <__aeabi_d2iz>
 8009a62:	4682      	mov	sl, r0
 8009a64:	f7f6 fd66 	bl	8000534 <__aeabi_i2d>
 8009a68:	4642      	mov	r2, r8
 8009a6a:	464b      	mov	r3, r9
 8009a6c:	f7f6 fdcc 	bl	8000608 <__aeabi_dmul>
 8009a70:	4602      	mov	r2, r0
 8009a72:	460b      	mov	r3, r1
 8009a74:	4630      	mov	r0, r6
 8009a76:	4639      	mov	r1, r7
 8009a78:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8009a7c:	f7f6 fc0c 	bl	8000298 <__aeabi_dsub>
 8009a80:	f805 6b01 	strb.w	r6, [r5], #1
 8009a84:	9e01      	ldr	r6, [sp, #4]
 8009a86:	9f03      	ldr	r7, [sp, #12]
 8009a88:	1bae      	subs	r6, r5, r6
 8009a8a:	42b7      	cmp	r7, r6
 8009a8c:	4602      	mov	r2, r0
 8009a8e:	460b      	mov	r3, r1
 8009a90:	d135      	bne.n	8009afe <_dtoa_r+0x6e6>
 8009a92:	f7f6 fc03 	bl	800029c <__adddf3>
 8009a96:	4642      	mov	r2, r8
 8009a98:	464b      	mov	r3, r9
 8009a9a:	4606      	mov	r6, r0
 8009a9c:	460f      	mov	r7, r1
 8009a9e:	f7f7 f843 	bl	8000b28 <__aeabi_dcmpgt>
 8009aa2:	b9d0      	cbnz	r0, 8009ada <_dtoa_r+0x6c2>
 8009aa4:	4642      	mov	r2, r8
 8009aa6:	464b      	mov	r3, r9
 8009aa8:	4630      	mov	r0, r6
 8009aaa:	4639      	mov	r1, r7
 8009aac:	f7f7 f814 	bl	8000ad8 <__aeabi_dcmpeq>
 8009ab0:	b110      	cbz	r0, 8009ab8 <_dtoa_r+0x6a0>
 8009ab2:	f01a 0f01 	tst.w	sl, #1
 8009ab6:	d110      	bne.n	8009ada <_dtoa_r+0x6c2>
 8009ab8:	4620      	mov	r0, r4
 8009aba:	ee18 1a10 	vmov	r1, s16
 8009abe:	f000 fd05 	bl	800a4cc <_Bfree>
 8009ac2:	2300      	movs	r3, #0
 8009ac4:	9800      	ldr	r0, [sp, #0]
 8009ac6:	702b      	strb	r3, [r5, #0]
 8009ac8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009aca:	3001      	adds	r0, #1
 8009acc:	6018      	str	r0, [r3, #0]
 8009ace:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	f43f acf1 	beq.w	80094b8 <_dtoa_r+0xa0>
 8009ad6:	601d      	str	r5, [r3, #0]
 8009ad8:	e4ee      	b.n	80094b8 <_dtoa_r+0xa0>
 8009ada:	9f00      	ldr	r7, [sp, #0]
 8009adc:	462b      	mov	r3, r5
 8009ade:	461d      	mov	r5, r3
 8009ae0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009ae4:	2a39      	cmp	r2, #57	; 0x39
 8009ae6:	d106      	bne.n	8009af6 <_dtoa_r+0x6de>
 8009ae8:	9a01      	ldr	r2, [sp, #4]
 8009aea:	429a      	cmp	r2, r3
 8009aec:	d1f7      	bne.n	8009ade <_dtoa_r+0x6c6>
 8009aee:	9901      	ldr	r1, [sp, #4]
 8009af0:	2230      	movs	r2, #48	; 0x30
 8009af2:	3701      	adds	r7, #1
 8009af4:	700a      	strb	r2, [r1, #0]
 8009af6:	781a      	ldrb	r2, [r3, #0]
 8009af8:	3201      	adds	r2, #1
 8009afa:	701a      	strb	r2, [r3, #0]
 8009afc:	e790      	b.n	8009a20 <_dtoa_r+0x608>
 8009afe:	4ba6      	ldr	r3, [pc, #664]	; (8009d98 <_dtoa_r+0x980>)
 8009b00:	2200      	movs	r2, #0
 8009b02:	f7f6 fd81 	bl	8000608 <__aeabi_dmul>
 8009b06:	2200      	movs	r2, #0
 8009b08:	2300      	movs	r3, #0
 8009b0a:	4606      	mov	r6, r0
 8009b0c:	460f      	mov	r7, r1
 8009b0e:	f7f6 ffe3 	bl	8000ad8 <__aeabi_dcmpeq>
 8009b12:	2800      	cmp	r0, #0
 8009b14:	d09d      	beq.n	8009a52 <_dtoa_r+0x63a>
 8009b16:	e7cf      	b.n	8009ab8 <_dtoa_r+0x6a0>
 8009b18:	9a08      	ldr	r2, [sp, #32]
 8009b1a:	2a00      	cmp	r2, #0
 8009b1c:	f000 80d7 	beq.w	8009cce <_dtoa_r+0x8b6>
 8009b20:	9a06      	ldr	r2, [sp, #24]
 8009b22:	2a01      	cmp	r2, #1
 8009b24:	f300 80ba 	bgt.w	8009c9c <_dtoa_r+0x884>
 8009b28:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009b2a:	2a00      	cmp	r2, #0
 8009b2c:	f000 80b2 	beq.w	8009c94 <_dtoa_r+0x87c>
 8009b30:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009b34:	9e07      	ldr	r6, [sp, #28]
 8009b36:	9d04      	ldr	r5, [sp, #16]
 8009b38:	9a04      	ldr	r2, [sp, #16]
 8009b3a:	441a      	add	r2, r3
 8009b3c:	9204      	str	r2, [sp, #16]
 8009b3e:	9a05      	ldr	r2, [sp, #20]
 8009b40:	2101      	movs	r1, #1
 8009b42:	441a      	add	r2, r3
 8009b44:	4620      	mov	r0, r4
 8009b46:	9205      	str	r2, [sp, #20]
 8009b48:	f000 fd78 	bl	800a63c <__i2b>
 8009b4c:	4607      	mov	r7, r0
 8009b4e:	2d00      	cmp	r5, #0
 8009b50:	dd0c      	ble.n	8009b6c <_dtoa_r+0x754>
 8009b52:	9b05      	ldr	r3, [sp, #20]
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	dd09      	ble.n	8009b6c <_dtoa_r+0x754>
 8009b58:	42ab      	cmp	r3, r5
 8009b5a:	9a04      	ldr	r2, [sp, #16]
 8009b5c:	bfa8      	it	ge
 8009b5e:	462b      	movge	r3, r5
 8009b60:	1ad2      	subs	r2, r2, r3
 8009b62:	9204      	str	r2, [sp, #16]
 8009b64:	9a05      	ldr	r2, [sp, #20]
 8009b66:	1aed      	subs	r5, r5, r3
 8009b68:	1ad3      	subs	r3, r2, r3
 8009b6a:	9305      	str	r3, [sp, #20]
 8009b6c:	9b07      	ldr	r3, [sp, #28]
 8009b6e:	b31b      	cbz	r3, 8009bb8 <_dtoa_r+0x7a0>
 8009b70:	9b08      	ldr	r3, [sp, #32]
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	f000 80af 	beq.w	8009cd6 <_dtoa_r+0x8be>
 8009b78:	2e00      	cmp	r6, #0
 8009b7a:	dd13      	ble.n	8009ba4 <_dtoa_r+0x78c>
 8009b7c:	4639      	mov	r1, r7
 8009b7e:	4632      	mov	r2, r6
 8009b80:	4620      	mov	r0, r4
 8009b82:	f000 fe1b 	bl	800a7bc <__pow5mult>
 8009b86:	ee18 2a10 	vmov	r2, s16
 8009b8a:	4601      	mov	r1, r0
 8009b8c:	4607      	mov	r7, r0
 8009b8e:	4620      	mov	r0, r4
 8009b90:	f000 fd6a 	bl	800a668 <__multiply>
 8009b94:	ee18 1a10 	vmov	r1, s16
 8009b98:	4680      	mov	r8, r0
 8009b9a:	4620      	mov	r0, r4
 8009b9c:	f000 fc96 	bl	800a4cc <_Bfree>
 8009ba0:	ee08 8a10 	vmov	s16, r8
 8009ba4:	9b07      	ldr	r3, [sp, #28]
 8009ba6:	1b9a      	subs	r2, r3, r6
 8009ba8:	d006      	beq.n	8009bb8 <_dtoa_r+0x7a0>
 8009baa:	ee18 1a10 	vmov	r1, s16
 8009bae:	4620      	mov	r0, r4
 8009bb0:	f000 fe04 	bl	800a7bc <__pow5mult>
 8009bb4:	ee08 0a10 	vmov	s16, r0
 8009bb8:	2101      	movs	r1, #1
 8009bba:	4620      	mov	r0, r4
 8009bbc:	f000 fd3e 	bl	800a63c <__i2b>
 8009bc0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	4606      	mov	r6, r0
 8009bc6:	f340 8088 	ble.w	8009cda <_dtoa_r+0x8c2>
 8009bca:	461a      	mov	r2, r3
 8009bcc:	4601      	mov	r1, r0
 8009bce:	4620      	mov	r0, r4
 8009bd0:	f000 fdf4 	bl	800a7bc <__pow5mult>
 8009bd4:	9b06      	ldr	r3, [sp, #24]
 8009bd6:	2b01      	cmp	r3, #1
 8009bd8:	4606      	mov	r6, r0
 8009bda:	f340 8081 	ble.w	8009ce0 <_dtoa_r+0x8c8>
 8009bde:	f04f 0800 	mov.w	r8, #0
 8009be2:	6933      	ldr	r3, [r6, #16]
 8009be4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009be8:	6918      	ldr	r0, [r3, #16]
 8009bea:	f000 fcd7 	bl	800a59c <__hi0bits>
 8009bee:	f1c0 0020 	rsb	r0, r0, #32
 8009bf2:	9b05      	ldr	r3, [sp, #20]
 8009bf4:	4418      	add	r0, r3
 8009bf6:	f010 001f 	ands.w	r0, r0, #31
 8009bfa:	f000 8092 	beq.w	8009d22 <_dtoa_r+0x90a>
 8009bfe:	f1c0 0320 	rsb	r3, r0, #32
 8009c02:	2b04      	cmp	r3, #4
 8009c04:	f340 808a 	ble.w	8009d1c <_dtoa_r+0x904>
 8009c08:	f1c0 001c 	rsb	r0, r0, #28
 8009c0c:	9b04      	ldr	r3, [sp, #16]
 8009c0e:	4403      	add	r3, r0
 8009c10:	9304      	str	r3, [sp, #16]
 8009c12:	9b05      	ldr	r3, [sp, #20]
 8009c14:	4403      	add	r3, r0
 8009c16:	4405      	add	r5, r0
 8009c18:	9305      	str	r3, [sp, #20]
 8009c1a:	9b04      	ldr	r3, [sp, #16]
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	dd07      	ble.n	8009c30 <_dtoa_r+0x818>
 8009c20:	ee18 1a10 	vmov	r1, s16
 8009c24:	461a      	mov	r2, r3
 8009c26:	4620      	mov	r0, r4
 8009c28:	f000 fe22 	bl	800a870 <__lshift>
 8009c2c:	ee08 0a10 	vmov	s16, r0
 8009c30:	9b05      	ldr	r3, [sp, #20]
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	dd05      	ble.n	8009c42 <_dtoa_r+0x82a>
 8009c36:	4631      	mov	r1, r6
 8009c38:	461a      	mov	r2, r3
 8009c3a:	4620      	mov	r0, r4
 8009c3c:	f000 fe18 	bl	800a870 <__lshift>
 8009c40:	4606      	mov	r6, r0
 8009c42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d06e      	beq.n	8009d26 <_dtoa_r+0x90e>
 8009c48:	ee18 0a10 	vmov	r0, s16
 8009c4c:	4631      	mov	r1, r6
 8009c4e:	f000 fe7f 	bl	800a950 <__mcmp>
 8009c52:	2800      	cmp	r0, #0
 8009c54:	da67      	bge.n	8009d26 <_dtoa_r+0x90e>
 8009c56:	9b00      	ldr	r3, [sp, #0]
 8009c58:	3b01      	subs	r3, #1
 8009c5a:	ee18 1a10 	vmov	r1, s16
 8009c5e:	9300      	str	r3, [sp, #0]
 8009c60:	220a      	movs	r2, #10
 8009c62:	2300      	movs	r3, #0
 8009c64:	4620      	mov	r0, r4
 8009c66:	f000 fc53 	bl	800a510 <__multadd>
 8009c6a:	9b08      	ldr	r3, [sp, #32]
 8009c6c:	ee08 0a10 	vmov	s16, r0
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	f000 81b1 	beq.w	8009fd8 <_dtoa_r+0xbc0>
 8009c76:	2300      	movs	r3, #0
 8009c78:	4639      	mov	r1, r7
 8009c7a:	220a      	movs	r2, #10
 8009c7c:	4620      	mov	r0, r4
 8009c7e:	f000 fc47 	bl	800a510 <__multadd>
 8009c82:	9b02      	ldr	r3, [sp, #8]
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	4607      	mov	r7, r0
 8009c88:	f300 808e 	bgt.w	8009da8 <_dtoa_r+0x990>
 8009c8c:	9b06      	ldr	r3, [sp, #24]
 8009c8e:	2b02      	cmp	r3, #2
 8009c90:	dc51      	bgt.n	8009d36 <_dtoa_r+0x91e>
 8009c92:	e089      	b.n	8009da8 <_dtoa_r+0x990>
 8009c94:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009c96:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009c9a:	e74b      	b.n	8009b34 <_dtoa_r+0x71c>
 8009c9c:	9b03      	ldr	r3, [sp, #12]
 8009c9e:	1e5e      	subs	r6, r3, #1
 8009ca0:	9b07      	ldr	r3, [sp, #28]
 8009ca2:	42b3      	cmp	r3, r6
 8009ca4:	bfbf      	itttt	lt
 8009ca6:	9b07      	ldrlt	r3, [sp, #28]
 8009ca8:	9607      	strlt	r6, [sp, #28]
 8009caa:	1af2      	sublt	r2, r6, r3
 8009cac:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8009cae:	bfb6      	itet	lt
 8009cb0:	189b      	addlt	r3, r3, r2
 8009cb2:	1b9e      	subge	r6, r3, r6
 8009cb4:	930a      	strlt	r3, [sp, #40]	; 0x28
 8009cb6:	9b03      	ldr	r3, [sp, #12]
 8009cb8:	bfb8      	it	lt
 8009cba:	2600      	movlt	r6, #0
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	bfb7      	itett	lt
 8009cc0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8009cc4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8009cc8:	1a9d      	sublt	r5, r3, r2
 8009cca:	2300      	movlt	r3, #0
 8009ccc:	e734      	b.n	8009b38 <_dtoa_r+0x720>
 8009cce:	9e07      	ldr	r6, [sp, #28]
 8009cd0:	9d04      	ldr	r5, [sp, #16]
 8009cd2:	9f08      	ldr	r7, [sp, #32]
 8009cd4:	e73b      	b.n	8009b4e <_dtoa_r+0x736>
 8009cd6:	9a07      	ldr	r2, [sp, #28]
 8009cd8:	e767      	b.n	8009baa <_dtoa_r+0x792>
 8009cda:	9b06      	ldr	r3, [sp, #24]
 8009cdc:	2b01      	cmp	r3, #1
 8009cde:	dc18      	bgt.n	8009d12 <_dtoa_r+0x8fa>
 8009ce0:	f1ba 0f00 	cmp.w	sl, #0
 8009ce4:	d115      	bne.n	8009d12 <_dtoa_r+0x8fa>
 8009ce6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009cea:	b993      	cbnz	r3, 8009d12 <_dtoa_r+0x8fa>
 8009cec:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009cf0:	0d1b      	lsrs	r3, r3, #20
 8009cf2:	051b      	lsls	r3, r3, #20
 8009cf4:	b183      	cbz	r3, 8009d18 <_dtoa_r+0x900>
 8009cf6:	9b04      	ldr	r3, [sp, #16]
 8009cf8:	3301      	adds	r3, #1
 8009cfa:	9304      	str	r3, [sp, #16]
 8009cfc:	9b05      	ldr	r3, [sp, #20]
 8009cfe:	3301      	adds	r3, #1
 8009d00:	9305      	str	r3, [sp, #20]
 8009d02:	f04f 0801 	mov.w	r8, #1
 8009d06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	f47f af6a 	bne.w	8009be2 <_dtoa_r+0x7ca>
 8009d0e:	2001      	movs	r0, #1
 8009d10:	e76f      	b.n	8009bf2 <_dtoa_r+0x7da>
 8009d12:	f04f 0800 	mov.w	r8, #0
 8009d16:	e7f6      	b.n	8009d06 <_dtoa_r+0x8ee>
 8009d18:	4698      	mov	r8, r3
 8009d1a:	e7f4      	b.n	8009d06 <_dtoa_r+0x8ee>
 8009d1c:	f43f af7d 	beq.w	8009c1a <_dtoa_r+0x802>
 8009d20:	4618      	mov	r0, r3
 8009d22:	301c      	adds	r0, #28
 8009d24:	e772      	b.n	8009c0c <_dtoa_r+0x7f4>
 8009d26:	9b03      	ldr	r3, [sp, #12]
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	dc37      	bgt.n	8009d9c <_dtoa_r+0x984>
 8009d2c:	9b06      	ldr	r3, [sp, #24]
 8009d2e:	2b02      	cmp	r3, #2
 8009d30:	dd34      	ble.n	8009d9c <_dtoa_r+0x984>
 8009d32:	9b03      	ldr	r3, [sp, #12]
 8009d34:	9302      	str	r3, [sp, #8]
 8009d36:	9b02      	ldr	r3, [sp, #8]
 8009d38:	b96b      	cbnz	r3, 8009d56 <_dtoa_r+0x93e>
 8009d3a:	4631      	mov	r1, r6
 8009d3c:	2205      	movs	r2, #5
 8009d3e:	4620      	mov	r0, r4
 8009d40:	f000 fbe6 	bl	800a510 <__multadd>
 8009d44:	4601      	mov	r1, r0
 8009d46:	4606      	mov	r6, r0
 8009d48:	ee18 0a10 	vmov	r0, s16
 8009d4c:	f000 fe00 	bl	800a950 <__mcmp>
 8009d50:	2800      	cmp	r0, #0
 8009d52:	f73f adbb 	bgt.w	80098cc <_dtoa_r+0x4b4>
 8009d56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d58:	9d01      	ldr	r5, [sp, #4]
 8009d5a:	43db      	mvns	r3, r3
 8009d5c:	9300      	str	r3, [sp, #0]
 8009d5e:	f04f 0800 	mov.w	r8, #0
 8009d62:	4631      	mov	r1, r6
 8009d64:	4620      	mov	r0, r4
 8009d66:	f000 fbb1 	bl	800a4cc <_Bfree>
 8009d6a:	2f00      	cmp	r7, #0
 8009d6c:	f43f aea4 	beq.w	8009ab8 <_dtoa_r+0x6a0>
 8009d70:	f1b8 0f00 	cmp.w	r8, #0
 8009d74:	d005      	beq.n	8009d82 <_dtoa_r+0x96a>
 8009d76:	45b8      	cmp	r8, r7
 8009d78:	d003      	beq.n	8009d82 <_dtoa_r+0x96a>
 8009d7a:	4641      	mov	r1, r8
 8009d7c:	4620      	mov	r0, r4
 8009d7e:	f000 fba5 	bl	800a4cc <_Bfree>
 8009d82:	4639      	mov	r1, r7
 8009d84:	4620      	mov	r0, r4
 8009d86:	f000 fba1 	bl	800a4cc <_Bfree>
 8009d8a:	e695      	b.n	8009ab8 <_dtoa_r+0x6a0>
 8009d8c:	2600      	movs	r6, #0
 8009d8e:	4637      	mov	r7, r6
 8009d90:	e7e1      	b.n	8009d56 <_dtoa_r+0x93e>
 8009d92:	9700      	str	r7, [sp, #0]
 8009d94:	4637      	mov	r7, r6
 8009d96:	e599      	b.n	80098cc <_dtoa_r+0x4b4>
 8009d98:	40240000 	.word	0x40240000
 8009d9c:	9b08      	ldr	r3, [sp, #32]
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	f000 80ca 	beq.w	8009f38 <_dtoa_r+0xb20>
 8009da4:	9b03      	ldr	r3, [sp, #12]
 8009da6:	9302      	str	r3, [sp, #8]
 8009da8:	2d00      	cmp	r5, #0
 8009daa:	dd05      	ble.n	8009db8 <_dtoa_r+0x9a0>
 8009dac:	4639      	mov	r1, r7
 8009dae:	462a      	mov	r2, r5
 8009db0:	4620      	mov	r0, r4
 8009db2:	f000 fd5d 	bl	800a870 <__lshift>
 8009db6:	4607      	mov	r7, r0
 8009db8:	f1b8 0f00 	cmp.w	r8, #0
 8009dbc:	d05b      	beq.n	8009e76 <_dtoa_r+0xa5e>
 8009dbe:	6879      	ldr	r1, [r7, #4]
 8009dc0:	4620      	mov	r0, r4
 8009dc2:	f000 fb43 	bl	800a44c <_Balloc>
 8009dc6:	4605      	mov	r5, r0
 8009dc8:	b928      	cbnz	r0, 8009dd6 <_dtoa_r+0x9be>
 8009dca:	4b87      	ldr	r3, [pc, #540]	; (8009fe8 <_dtoa_r+0xbd0>)
 8009dcc:	4602      	mov	r2, r0
 8009dce:	f240 21ea 	movw	r1, #746	; 0x2ea
 8009dd2:	f7ff bb3b 	b.w	800944c <_dtoa_r+0x34>
 8009dd6:	693a      	ldr	r2, [r7, #16]
 8009dd8:	3202      	adds	r2, #2
 8009dda:	0092      	lsls	r2, r2, #2
 8009ddc:	f107 010c 	add.w	r1, r7, #12
 8009de0:	300c      	adds	r0, #12
 8009de2:	f7fe fc9f 	bl	8008724 <memcpy>
 8009de6:	2201      	movs	r2, #1
 8009de8:	4629      	mov	r1, r5
 8009dea:	4620      	mov	r0, r4
 8009dec:	f000 fd40 	bl	800a870 <__lshift>
 8009df0:	9b01      	ldr	r3, [sp, #4]
 8009df2:	f103 0901 	add.w	r9, r3, #1
 8009df6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8009dfa:	4413      	add	r3, r2
 8009dfc:	9305      	str	r3, [sp, #20]
 8009dfe:	f00a 0301 	and.w	r3, sl, #1
 8009e02:	46b8      	mov	r8, r7
 8009e04:	9304      	str	r3, [sp, #16]
 8009e06:	4607      	mov	r7, r0
 8009e08:	4631      	mov	r1, r6
 8009e0a:	ee18 0a10 	vmov	r0, s16
 8009e0e:	f7ff fa77 	bl	8009300 <quorem>
 8009e12:	4641      	mov	r1, r8
 8009e14:	9002      	str	r0, [sp, #8]
 8009e16:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8009e1a:	ee18 0a10 	vmov	r0, s16
 8009e1e:	f000 fd97 	bl	800a950 <__mcmp>
 8009e22:	463a      	mov	r2, r7
 8009e24:	9003      	str	r0, [sp, #12]
 8009e26:	4631      	mov	r1, r6
 8009e28:	4620      	mov	r0, r4
 8009e2a:	f000 fdad 	bl	800a988 <__mdiff>
 8009e2e:	68c2      	ldr	r2, [r0, #12]
 8009e30:	f109 3bff 	add.w	fp, r9, #4294967295
 8009e34:	4605      	mov	r5, r0
 8009e36:	bb02      	cbnz	r2, 8009e7a <_dtoa_r+0xa62>
 8009e38:	4601      	mov	r1, r0
 8009e3a:	ee18 0a10 	vmov	r0, s16
 8009e3e:	f000 fd87 	bl	800a950 <__mcmp>
 8009e42:	4602      	mov	r2, r0
 8009e44:	4629      	mov	r1, r5
 8009e46:	4620      	mov	r0, r4
 8009e48:	9207      	str	r2, [sp, #28]
 8009e4a:	f000 fb3f 	bl	800a4cc <_Bfree>
 8009e4e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8009e52:	ea43 0102 	orr.w	r1, r3, r2
 8009e56:	9b04      	ldr	r3, [sp, #16]
 8009e58:	430b      	orrs	r3, r1
 8009e5a:	464d      	mov	r5, r9
 8009e5c:	d10f      	bne.n	8009e7e <_dtoa_r+0xa66>
 8009e5e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009e62:	d02a      	beq.n	8009eba <_dtoa_r+0xaa2>
 8009e64:	9b03      	ldr	r3, [sp, #12]
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	dd02      	ble.n	8009e70 <_dtoa_r+0xa58>
 8009e6a:	9b02      	ldr	r3, [sp, #8]
 8009e6c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8009e70:	f88b a000 	strb.w	sl, [fp]
 8009e74:	e775      	b.n	8009d62 <_dtoa_r+0x94a>
 8009e76:	4638      	mov	r0, r7
 8009e78:	e7ba      	b.n	8009df0 <_dtoa_r+0x9d8>
 8009e7a:	2201      	movs	r2, #1
 8009e7c:	e7e2      	b.n	8009e44 <_dtoa_r+0xa2c>
 8009e7e:	9b03      	ldr	r3, [sp, #12]
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	db04      	blt.n	8009e8e <_dtoa_r+0xa76>
 8009e84:	9906      	ldr	r1, [sp, #24]
 8009e86:	430b      	orrs	r3, r1
 8009e88:	9904      	ldr	r1, [sp, #16]
 8009e8a:	430b      	orrs	r3, r1
 8009e8c:	d122      	bne.n	8009ed4 <_dtoa_r+0xabc>
 8009e8e:	2a00      	cmp	r2, #0
 8009e90:	ddee      	ble.n	8009e70 <_dtoa_r+0xa58>
 8009e92:	ee18 1a10 	vmov	r1, s16
 8009e96:	2201      	movs	r2, #1
 8009e98:	4620      	mov	r0, r4
 8009e9a:	f000 fce9 	bl	800a870 <__lshift>
 8009e9e:	4631      	mov	r1, r6
 8009ea0:	ee08 0a10 	vmov	s16, r0
 8009ea4:	f000 fd54 	bl	800a950 <__mcmp>
 8009ea8:	2800      	cmp	r0, #0
 8009eaa:	dc03      	bgt.n	8009eb4 <_dtoa_r+0xa9c>
 8009eac:	d1e0      	bne.n	8009e70 <_dtoa_r+0xa58>
 8009eae:	f01a 0f01 	tst.w	sl, #1
 8009eb2:	d0dd      	beq.n	8009e70 <_dtoa_r+0xa58>
 8009eb4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009eb8:	d1d7      	bne.n	8009e6a <_dtoa_r+0xa52>
 8009eba:	2339      	movs	r3, #57	; 0x39
 8009ebc:	f88b 3000 	strb.w	r3, [fp]
 8009ec0:	462b      	mov	r3, r5
 8009ec2:	461d      	mov	r5, r3
 8009ec4:	3b01      	subs	r3, #1
 8009ec6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009eca:	2a39      	cmp	r2, #57	; 0x39
 8009ecc:	d071      	beq.n	8009fb2 <_dtoa_r+0xb9a>
 8009ece:	3201      	adds	r2, #1
 8009ed0:	701a      	strb	r2, [r3, #0]
 8009ed2:	e746      	b.n	8009d62 <_dtoa_r+0x94a>
 8009ed4:	2a00      	cmp	r2, #0
 8009ed6:	dd07      	ble.n	8009ee8 <_dtoa_r+0xad0>
 8009ed8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009edc:	d0ed      	beq.n	8009eba <_dtoa_r+0xaa2>
 8009ede:	f10a 0301 	add.w	r3, sl, #1
 8009ee2:	f88b 3000 	strb.w	r3, [fp]
 8009ee6:	e73c      	b.n	8009d62 <_dtoa_r+0x94a>
 8009ee8:	9b05      	ldr	r3, [sp, #20]
 8009eea:	f809 ac01 	strb.w	sl, [r9, #-1]
 8009eee:	4599      	cmp	r9, r3
 8009ef0:	d047      	beq.n	8009f82 <_dtoa_r+0xb6a>
 8009ef2:	ee18 1a10 	vmov	r1, s16
 8009ef6:	2300      	movs	r3, #0
 8009ef8:	220a      	movs	r2, #10
 8009efa:	4620      	mov	r0, r4
 8009efc:	f000 fb08 	bl	800a510 <__multadd>
 8009f00:	45b8      	cmp	r8, r7
 8009f02:	ee08 0a10 	vmov	s16, r0
 8009f06:	f04f 0300 	mov.w	r3, #0
 8009f0a:	f04f 020a 	mov.w	r2, #10
 8009f0e:	4641      	mov	r1, r8
 8009f10:	4620      	mov	r0, r4
 8009f12:	d106      	bne.n	8009f22 <_dtoa_r+0xb0a>
 8009f14:	f000 fafc 	bl	800a510 <__multadd>
 8009f18:	4680      	mov	r8, r0
 8009f1a:	4607      	mov	r7, r0
 8009f1c:	f109 0901 	add.w	r9, r9, #1
 8009f20:	e772      	b.n	8009e08 <_dtoa_r+0x9f0>
 8009f22:	f000 faf5 	bl	800a510 <__multadd>
 8009f26:	4639      	mov	r1, r7
 8009f28:	4680      	mov	r8, r0
 8009f2a:	2300      	movs	r3, #0
 8009f2c:	220a      	movs	r2, #10
 8009f2e:	4620      	mov	r0, r4
 8009f30:	f000 faee 	bl	800a510 <__multadd>
 8009f34:	4607      	mov	r7, r0
 8009f36:	e7f1      	b.n	8009f1c <_dtoa_r+0xb04>
 8009f38:	9b03      	ldr	r3, [sp, #12]
 8009f3a:	9302      	str	r3, [sp, #8]
 8009f3c:	9d01      	ldr	r5, [sp, #4]
 8009f3e:	ee18 0a10 	vmov	r0, s16
 8009f42:	4631      	mov	r1, r6
 8009f44:	f7ff f9dc 	bl	8009300 <quorem>
 8009f48:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8009f4c:	9b01      	ldr	r3, [sp, #4]
 8009f4e:	f805 ab01 	strb.w	sl, [r5], #1
 8009f52:	1aea      	subs	r2, r5, r3
 8009f54:	9b02      	ldr	r3, [sp, #8]
 8009f56:	4293      	cmp	r3, r2
 8009f58:	dd09      	ble.n	8009f6e <_dtoa_r+0xb56>
 8009f5a:	ee18 1a10 	vmov	r1, s16
 8009f5e:	2300      	movs	r3, #0
 8009f60:	220a      	movs	r2, #10
 8009f62:	4620      	mov	r0, r4
 8009f64:	f000 fad4 	bl	800a510 <__multadd>
 8009f68:	ee08 0a10 	vmov	s16, r0
 8009f6c:	e7e7      	b.n	8009f3e <_dtoa_r+0xb26>
 8009f6e:	9b02      	ldr	r3, [sp, #8]
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	bfc8      	it	gt
 8009f74:	461d      	movgt	r5, r3
 8009f76:	9b01      	ldr	r3, [sp, #4]
 8009f78:	bfd8      	it	le
 8009f7a:	2501      	movle	r5, #1
 8009f7c:	441d      	add	r5, r3
 8009f7e:	f04f 0800 	mov.w	r8, #0
 8009f82:	ee18 1a10 	vmov	r1, s16
 8009f86:	2201      	movs	r2, #1
 8009f88:	4620      	mov	r0, r4
 8009f8a:	f000 fc71 	bl	800a870 <__lshift>
 8009f8e:	4631      	mov	r1, r6
 8009f90:	ee08 0a10 	vmov	s16, r0
 8009f94:	f000 fcdc 	bl	800a950 <__mcmp>
 8009f98:	2800      	cmp	r0, #0
 8009f9a:	dc91      	bgt.n	8009ec0 <_dtoa_r+0xaa8>
 8009f9c:	d102      	bne.n	8009fa4 <_dtoa_r+0xb8c>
 8009f9e:	f01a 0f01 	tst.w	sl, #1
 8009fa2:	d18d      	bne.n	8009ec0 <_dtoa_r+0xaa8>
 8009fa4:	462b      	mov	r3, r5
 8009fa6:	461d      	mov	r5, r3
 8009fa8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009fac:	2a30      	cmp	r2, #48	; 0x30
 8009fae:	d0fa      	beq.n	8009fa6 <_dtoa_r+0xb8e>
 8009fb0:	e6d7      	b.n	8009d62 <_dtoa_r+0x94a>
 8009fb2:	9a01      	ldr	r2, [sp, #4]
 8009fb4:	429a      	cmp	r2, r3
 8009fb6:	d184      	bne.n	8009ec2 <_dtoa_r+0xaaa>
 8009fb8:	9b00      	ldr	r3, [sp, #0]
 8009fba:	3301      	adds	r3, #1
 8009fbc:	9300      	str	r3, [sp, #0]
 8009fbe:	2331      	movs	r3, #49	; 0x31
 8009fc0:	7013      	strb	r3, [r2, #0]
 8009fc2:	e6ce      	b.n	8009d62 <_dtoa_r+0x94a>
 8009fc4:	4b09      	ldr	r3, [pc, #36]	; (8009fec <_dtoa_r+0xbd4>)
 8009fc6:	f7ff ba95 	b.w	80094f4 <_dtoa_r+0xdc>
 8009fca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	f47f aa6e 	bne.w	80094ae <_dtoa_r+0x96>
 8009fd2:	4b07      	ldr	r3, [pc, #28]	; (8009ff0 <_dtoa_r+0xbd8>)
 8009fd4:	f7ff ba8e 	b.w	80094f4 <_dtoa_r+0xdc>
 8009fd8:	9b02      	ldr	r3, [sp, #8]
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	dcae      	bgt.n	8009f3c <_dtoa_r+0xb24>
 8009fde:	9b06      	ldr	r3, [sp, #24]
 8009fe0:	2b02      	cmp	r3, #2
 8009fe2:	f73f aea8 	bgt.w	8009d36 <_dtoa_r+0x91e>
 8009fe6:	e7a9      	b.n	8009f3c <_dtoa_r+0xb24>
 8009fe8:	0800bcc7 	.word	0x0800bcc7
 8009fec:	0800bc24 	.word	0x0800bc24
 8009ff0:	0800bc48 	.word	0x0800bc48

08009ff4 <__sflush_r>:
 8009ff4:	898a      	ldrh	r2, [r1, #12]
 8009ff6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ffa:	4605      	mov	r5, r0
 8009ffc:	0710      	lsls	r0, r2, #28
 8009ffe:	460c      	mov	r4, r1
 800a000:	d458      	bmi.n	800a0b4 <__sflush_r+0xc0>
 800a002:	684b      	ldr	r3, [r1, #4]
 800a004:	2b00      	cmp	r3, #0
 800a006:	dc05      	bgt.n	800a014 <__sflush_r+0x20>
 800a008:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	dc02      	bgt.n	800a014 <__sflush_r+0x20>
 800a00e:	2000      	movs	r0, #0
 800a010:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a014:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a016:	2e00      	cmp	r6, #0
 800a018:	d0f9      	beq.n	800a00e <__sflush_r+0x1a>
 800a01a:	2300      	movs	r3, #0
 800a01c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a020:	682f      	ldr	r7, [r5, #0]
 800a022:	602b      	str	r3, [r5, #0]
 800a024:	d032      	beq.n	800a08c <__sflush_r+0x98>
 800a026:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a028:	89a3      	ldrh	r3, [r4, #12]
 800a02a:	075a      	lsls	r2, r3, #29
 800a02c:	d505      	bpl.n	800a03a <__sflush_r+0x46>
 800a02e:	6863      	ldr	r3, [r4, #4]
 800a030:	1ac0      	subs	r0, r0, r3
 800a032:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a034:	b10b      	cbz	r3, 800a03a <__sflush_r+0x46>
 800a036:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a038:	1ac0      	subs	r0, r0, r3
 800a03a:	2300      	movs	r3, #0
 800a03c:	4602      	mov	r2, r0
 800a03e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a040:	6a21      	ldr	r1, [r4, #32]
 800a042:	4628      	mov	r0, r5
 800a044:	47b0      	blx	r6
 800a046:	1c43      	adds	r3, r0, #1
 800a048:	89a3      	ldrh	r3, [r4, #12]
 800a04a:	d106      	bne.n	800a05a <__sflush_r+0x66>
 800a04c:	6829      	ldr	r1, [r5, #0]
 800a04e:	291d      	cmp	r1, #29
 800a050:	d82c      	bhi.n	800a0ac <__sflush_r+0xb8>
 800a052:	4a2a      	ldr	r2, [pc, #168]	; (800a0fc <__sflush_r+0x108>)
 800a054:	40ca      	lsrs	r2, r1
 800a056:	07d6      	lsls	r6, r2, #31
 800a058:	d528      	bpl.n	800a0ac <__sflush_r+0xb8>
 800a05a:	2200      	movs	r2, #0
 800a05c:	6062      	str	r2, [r4, #4]
 800a05e:	04d9      	lsls	r1, r3, #19
 800a060:	6922      	ldr	r2, [r4, #16]
 800a062:	6022      	str	r2, [r4, #0]
 800a064:	d504      	bpl.n	800a070 <__sflush_r+0x7c>
 800a066:	1c42      	adds	r2, r0, #1
 800a068:	d101      	bne.n	800a06e <__sflush_r+0x7a>
 800a06a:	682b      	ldr	r3, [r5, #0]
 800a06c:	b903      	cbnz	r3, 800a070 <__sflush_r+0x7c>
 800a06e:	6560      	str	r0, [r4, #84]	; 0x54
 800a070:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a072:	602f      	str	r7, [r5, #0]
 800a074:	2900      	cmp	r1, #0
 800a076:	d0ca      	beq.n	800a00e <__sflush_r+0x1a>
 800a078:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a07c:	4299      	cmp	r1, r3
 800a07e:	d002      	beq.n	800a086 <__sflush_r+0x92>
 800a080:	4628      	mov	r0, r5
 800a082:	f000 fd7d 	bl	800ab80 <_free_r>
 800a086:	2000      	movs	r0, #0
 800a088:	6360      	str	r0, [r4, #52]	; 0x34
 800a08a:	e7c1      	b.n	800a010 <__sflush_r+0x1c>
 800a08c:	6a21      	ldr	r1, [r4, #32]
 800a08e:	2301      	movs	r3, #1
 800a090:	4628      	mov	r0, r5
 800a092:	47b0      	blx	r6
 800a094:	1c41      	adds	r1, r0, #1
 800a096:	d1c7      	bne.n	800a028 <__sflush_r+0x34>
 800a098:	682b      	ldr	r3, [r5, #0]
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d0c4      	beq.n	800a028 <__sflush_r+0x34>
 800a09e:	2b1d      	cmp	r3, #29
 800a0a0:	d001      	beq.n	800a0a6 <__sflush_r+0xb2>
 800a0a2:	2b16      	cmp	r3, #22
 800a0a4:	d101      	bne.n	800a0aa <__sflush_r+0xb6>
 800a0a6:	602f      	str	r7, [r5, #0]
 800a0a8:	e7b1      	b.n	800a00e <__sflush_r+0x1a>
 800a0aa:	89a3      	ldrh	r3, [r4, #12]
 800a0ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a0b0:	81a3      	strh	r3, [r4, #12]
 800a0b2:	e7ad      	b.n	800a010 <__sflush_r+0x1c>
 800a0b4:	690f      	ldr	r7, [r1, #16]
 800a0b6:	2f00      	cmp	r7, #0
 800a0b8:	d0a9      	beq.n	800a00e <__sflush_r+0x1a>
 800a0ba:	0793      	lsls	r3, r2, #30
 800a0bc:	680e      	ldr	r6, [r1, #0]
 800a0be:	bf08      	it	eq
 800a0c0:	694b      	ldreq	r3, [r1, #20]
 800a0c2:	600f      	str	r7, [r1, #0]
 800a0c4:	bf18      	it	ne
 800a0c6:	2300      	movne	r3, #0
 800a0c8:	eba6 0807 	sub.w	r8, r6, r7
 800a0cc:	608b      	str	r3, [r1, #8]
 800a0ce:	f1b8 0f00 	cmp.w	r8, #0
 800a0d2:	dd9c      	ble.n	800a00e <__sflush_r+0x1a>
 800a0d4:	6a21      	ldr	r1, [r4, #32]
 800a0d6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a0d8:	4643      	mov	r3, r8
 800a0da:	463a      	mov	r2, r7
 800a0dc:	4628      	mov	r0, r5
 800a0de:	47b0      	blx	r6
 800a0e0:	2800      	cmp	r0, #0
 800a0e2:	dc06      	bgt.n	800a0f2 <__sflush_r+0xfe>
 800a0e4:	89a3      	ldrh	r3, [r4, #12]
 800a0e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a0ea:	81a3      	strh	r3, [r4, #12]
 800a0ec:	f04f 30ff 	mov.w	r0, #4294967295
 800a0f0:	e78e      	b.n	800a010 <__sflush_r+0x1c>
 800a0f2:	4407      	add	r7, r0
 800a0f4:	eba8 0800 	sub.w	r8, r8, r0
 800a0f8:	e7e9      	b.n	800a0ce <__sflush_r+0xda>
 800a0fa:	bf00      	nop
 800a0fc:	20400001 	.word	0x20400001

0800a100 <_fflush_r>:
 800a100:	b538      	push	{r3, r4, r5, lr}
 800a102:	690b      	ldr	r3, [r1, #16]
 800a104:	4605      	mov	r5, r0
 800a106:	460c      	mov	r4, r1
 800a108:	b913      	cbnz	r3, 800a110 <_fflush_r+0x10>
 800a10a:	2500      	movs	r5, #0
 800a10c:	4628      	mov	r0, r5
 800a10e:	bd38      	pop	{r3, r4, r5, pc}
 800a110:	b118      	cbz	r0, 800a11a <_fflush_r+0x1a>
 800a112:	6983      	ldr	r3, [r0, #24]
 800a114:	b90b      	cbnz	r3, 800a11a <_fflush_r+0x1a>
 800a116:	f000 f887 	bl	800a228 <__sinit>
 800a11a:	4b14      	ldr	r3, [pc, #80]	; (800a16c <_fflush_r+0x6c>)
 800a11c:	429c      	cmp	r4, r3
 800a11e:	d11b      	bne.n	800a158 <_fflush_r+0x58>
 800a120:	686c      	ldr	r4, [r5, #4]
 800a122:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a126:	2b00      	cmp	r3, #0
 800a128:	d0ef      	beq.n	800a10a <_fflush_r+0xa>
 800a12a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a12c:	07d0      	lsls	r0, r2, #31
 800a12e:	d404      	bmi.n	800a13a <_fflush_r+0x3a>
 800a130:	0599      	lsls	r1, r3, #22
 800a132:	d402      	bmi.n	800a13a <_fflush_r+0x3a>
 800a134:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a136:	f000 f91a 	bl	800a36e <__retarget_lock_acquire_recursive>
 800a13a:	4628      	mov	r0, r5
 800a13c:	4621      	mov	r1, r4
 800a13e:	f7ff ff59 	bl	8009ff4 <__sflush_r>
 800a142:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a144:	07da      	lsls	r2, r3, #31
 800a146:	4605      	mov	r5, r0
 800a148:	d4e0      	bmi.n	800a10c <_fflush_r+0xc>
 800a14a:	89a3      	ldrh	r3, [r4, #12]
 800a14c:	059b      	lsls	r3, r3, #22
 800a14e:	d4dd      	bmi.n	800a10c <_fflush_r+0xc>
 800a150:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a152:	f000 f90d 	bl	800a370 <__retarget_lock_release_recursive>
 800a156:	e7d9      	b.n	800a10c <_fflush_r+0xc>
 800a158:	4b05      	ldr	r3, [pc, #20]	; (800a170 <_fflush_r+0x70>)
 800a15a:	429c      	cmp	r4, r3
 800a15c:	d101      	bne.n	800a162 <_fflush_r+0x62>
 800a15e:	68ac      	ldr	r4, [r5, #8]
 800a160:	e7df      	b.n	800a122 <_fflush_r+0x22>
 800a162:	4b04      	ldr	r3, [pc, #16]	; (800a174 <_fflush_r+0x74>)
 800a164:	429c      	cmp	r4, r3
 800a166:	bf08      	it	eq
 800a168:	68ec      	ldreq	r4, [r5, #12]
 800a16a:	e7da      	b.n	800a122 <_fflush_r+0x22>
 800a16c:	0800bcf8 	.word	0x0800bcf8
 800a170:	0800bd18 	.word	0x0800bd18
 800a174:	0800bcd8 	.word	0x0800bcd8

0800a178 <std>:
 800a178:	2300      	movs	r3, #0
 800a17a:	b510      	push	{r4, lr}
 800a17c:	4604      	mov	r4, r0
 800a17e:	e9c0 3300 	strd	r3, r3, [r0]
 800a182:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a186:	6083      	str	r3, [r0, #8]
 800a188:	8181      	strh	r1, [r0, #12]
 800a18a:	6643      	str	r3, [r0, #100]	; 0x64
 800a18c:	81c2      	strh	r2, [r0, #14]
 800a18e:	6183      	str	r3, [r0, #24]
 800a190:	4619      	mov	r1, r3
 800a192:	2208      	movs	r2, #8
 800a194:	305c      	adds	r0, #92	; 0x5c
 800a196:	f7fe fad3 	bl	8008740 <memset>
 800a19a:	4b05      	ldr	r3, [pc, #20]	; (800a1b0 <std+0x38>)
 800a19c:	6263      	str	r3, [r4, #36]	; 0x24
 800a19e:	4b05      	ldr	r3, [pc, #20]	; (800a1b4 <std+0x3c>)
 800a1a0:	62a3      	str	r3, [r4, #40]	; 0x28
 800a1a2:	4b05      	ldr	r3, [pc, #20]	; (800a1b8 <std+0x40>)
 800a1a4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a1a6:	4b05      	ldr	r3, [pc, #20]	; (800a1bc <std+0x44>)
 800a1a8:	6224      	str	r4, [r4, #32]
 800a1aa:	6323      	str	r3, [r4, #48]	; 0x30
 800a1ac:	bd10      	pop	{r4, pc}
 800a1ae:	bf00      	nop
 800a1b0:	0800b2cd 	.word	0x0800b2cd
 800a1b4:	0800b2ef 	.word	0x0800b2ef
 800a1b8:	0800b327 	.word	0x0800b327
 800a1bc:	0800b34b 	.word	0x0800b34b

0800a1c0 <_cleanup_r>:
 800a1c0:	4901      	ldr	r1, [pc, #4]	; (800a1c8 <_cleanup_r+0x8>)
 800a1c2:	f000 b8af 	b.w	800a324 <_fwalk_reent>
 800a1c6:	bf00      	nop
 800a1c8:	0800a101 	.word	0x0800a101

0800a1cc <__sfmoreglue>:
 800a1cc:	b570      	push	{r4, r5, r6, lr}
 800a1ce:	2268      	movs	r2, #104	; 0x68
 800a1d0:	1e4d      	subs	r5, r1, #1
 800a1d2:	4355      	muls	r5, r2
 800a1d4:	460e      	mov	r6, r1
 800a1d6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a1da:	f000 fd3d 	bl	800ac58 <_malloc_r>
 800a1de:	4604      	mov	r4, r0
 800a1e0:	b140      	cbz	r0, 800a1f4 <__sfmoreglue+0x28>
 800a1e2:	2100      	movs	r1, #0
 800a1e4:	e9c0 1600 	strd	r1, r6, [r0]
 800a1e8:	300c      	adds	r0, #12
 800a1ea:	60a0      	str	r0, [r4, #8]
 800a1ec:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a1f0:	f7fe faa6 	bl	8008740 <memset>
 800a1f4:	4620      	mov	r0, r4
 800a1f6:	bd70      	pop	{r4, r5, r6, pc}

0800a1f8 <__sfp_lock_acquire>:
 800a1f8:	4801      	ldr	r0, [pc, #4]	; (800a200 <__sfp_lock_acquire+0x8>)
 800a1fa:	f000 b8b8 	b.w	800a36e <__retarget_lock_acquire_recursive>
 800a1fe:	bf00      	nop
 800a200:	200005a5 	.word	0x200005a5

0800a204 <__sfp_lock_release>:
 800a204:	4801      	ldr	r0, [pc, #4]	; (800a20c <__sfp_lock_release+0x8>)
 800a206:	f000 b8b3 	b.w	800a370 <__retarget_lock_release_recursive>
 800a20a:	bf00      	nop
 800a20c:	200005a5 	.word	0x200005a5

0800a210 <__sinit_lock_acquire>:
 800a210:	4801      	ldr	r0, [pc, #4]	; (800a218 <__sinit_lock_acquire+0x8>)
 800a212:	f000 b8ac 	b.w	800a36e <__retarget_lock_acquire_recursive>
 800a216:	bf00      	nop
 800a218:	200005a6 	.word	0x200005a6

0800a21c <__sinit_lock_release>:
 800a21c:	4801      	ldr	r0, [pc, #4]	; (800a224 <__sinit_lock_release+0x8>)
 800a21e:	f000 b8a7 	b.w	800a370 <__retarget_lock_release_recursive>
 800a222:	bf00      	nop
 800a224:	200005a6 	.word	0x200005a6

0800a228 <__sinit>:
 800a228:	b510      	push	{r4, lr}
 800a22a:	4604      	mov	r4, r0
 800a22c:	f7ff fff0 	bl	800a210 <__sinit_lock_acquire>
 800a230:	69a3      	ldr	r3, [r4, #24]
 800a232:	b11b      	cbz	r3, 800a23c <__sinit+0x14>
 800a234:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a238:	f7ff bff0 	b.w	800a21c <__sinit_lock_release>
 800a23c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a240:	6523      	str	r3, [r4, #80]	; 0x50
 800a242:	4b13      	ldr	r3, [pc, #76]	; (800a290 <__sinit+0x68>)
 800a244:	4a13      	ldr	r2, [pc, #76]	; (800a294 <__sinit+0x6c>)
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	62a2      	str	r2, [r4, #40]	; 0x28
 800a24a:	42a3      	cmp	r3, r4
 800a24c:	bf04      	itt	eq
 800a24e:	2301      	moveq	r3, #1
 800a250:	61a3      	streq	r3, [r4, #24]
 800a252:	4620      	mov	r0, r4
 800a254:	f000 f820 	bl	800a298 <__sfp>
 800a258:	6060      	str	r0, [r4, #4]
 800a25a:	4620      	mov	r0, r4
 800a25c:	f000 f81c 	bl	800a298 <__sfp>
 800a260:	60a0      	str	r0, [r4, #8]
 800a262:	4620      	mov	r0, r4
 800a264:	f000 f818 	bl	800a298 <__sfp>
 800a268:	2200      	movs	r2, #0
 800a26a:	60e0      	str	r0, [r4, #12]
 800a26c:	2104      	movs	r1, #4
 800a26e:	6860      	ldr	r0, [r4, #4]
 800a270:	f7ff ff82 	bl	800a178 <std>
 800a274:	68a0      	ldr	r0, [r4, #8]
 800a276:	2201      	movs	r2, #1
 800a278:	2109      	movs	r1, #9
 800a27a:	f7ff ff7d 	bl	800a178 <std>
 800a27e:	68e0      	ldr	r0, [r4, #12]
 800a280:	2202      	movs	r2, #2
 800a282:	2112      	movs	r1, #18
 800a284:	f7ff ff78 	bl	800a178 <std>
 800a288:	2301      	movs	r3, #1
 800a28a:	61a3      	str	r3, [r4, #24]
 800a28c:	e7d2      	b.n	800a234 <__sinit+0xc>
 800a28e:	bf00      	nop
 800a290:	0800bc10 	.word	0x0800bc10
 800a294:	0800a1c1 	.word	0x0800a1c1

0800a298 <__sfp>:
 800a298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a29a:	4607      	mov	r7, r0
 800a29c:	f7ff ffac 	bl	800a1f8 <__sfp_lock_acquire>
 800a2a0:	4b1e      	ldr	r3, [pc, #120]	; (800a31c <__sfp+0x84>)
 800a2a2:	681e      	ldr	r6, [r3, #0]
 800a2a4:	69b3      	ldr	r3, [r6, #24]
 800a2a6:	b913      	cbnz	r3, 800a2ae <__sfp+0x16>
 800a2a8:	4630      	mov	r0, r6
 800a2aa:	f7ff ffbd 	bl	800a228 <__sinit>
 800a2ae:	3648      	adds	r6, #72	; 0x48
 800a2b0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a2b4:	3b01      	subs	r3, #1
 800a2b6:	d503      	bpl.n	800a2c0 <__sfp+0x28>
 800a2b8:	6833      	ldr	r3, [r6, #0]
 800a2ba:	b30b      	cbz	r3, 800a300 <__sfp+0x68>
 800a2bc:	6836      	ldr	r6, [r6, #0]
 800a2be:	e7f7      	b.n	800a2b0 <__sfp+0x18>
 800a2c0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a2c4:	b9d5      	cbnz	r5, 800a2fc <__sfp+0x64>
 800a2c6:	4b16      	ldr	r3, [pc, #88]	; (800a320 <__sfp+0x88>)
 800a2c8:	60e3      	str	r3, [r4, #12]
 800a2ca:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a2ce:	6665      	str	r5, [r4, #100]	; 0x64
 800a2d0:	f000 f84c 	bl	800a36c <__retarget_lock_init_recursive>
 800a2d4:	f7ff ff96 	bl	800a204 <__sfp_lock_release>
 800a2d8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a2dc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a2e0:	6025      	str	r5, [r4, #0]
 800a2e2:	61a5      	str	r5, [r4, #24]
 800a2e4:	2208      	movs	r2, #8
 800a2e6:	4629      	mov	r1, r5
 800a2e8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a2ec:	f7fe fa28 	bl	8008740 <memset>
 800a2f0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a2f4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a2f8:	4620      	mov	r0, r4
 800a2fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a2fc:	3468      	adds	r4, #104	; 0x68
 800a2fe:	e7d9      	b.n	800a2b4 <__sfp+0x1c>
 800a300:	2104      	movs	r1, #4
 800a302:	4638      	mov	r0, r7
 800a304:	f7ff ff62 	bl	800a1cc <__sfmoreglue>
 800a308:	4604      	mov	r4, r0
 800a30a:	6030      	str	r0, [r6, #0]
 800a30c:	2800      	cmp	r0, #0
 800a30e:	d1d5      	bne.n	800a2bc <__sfp+0x24>
 800a310:	f7ff ff78 	bl	800a204 <__sfp_lock_release>
 800a314:	230c      	movs	r3, #12
 800a316:	603b      	str	r3, [r7, #0]
 800a318:	e7ee      	b.n	800a2f8 <__sfp+0x60>
 800a31a:	bf00      	nop
 800a31c:	0800bc10 	.word	0x0800bc10
 800a320:	ffff0001 	.word	0xffff0001

0800a324 <_fwalk_reent>:
 800a324:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a328:	4606      	mov	r6, r0
 800a32a:	4688      	mov	r8, r1
 800a32c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a330:	2700      	movs	r7, #0
 800a332:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a336:	f1b9 0901 	subs.w	r9, r9, #1
 800a33a:	d505      	bpl.n	800a348 <_fwalk_reent+0x24>
 800a33c:	6824      	ldr	r4, [r4, #0]
 800a33e:	2c00      	cmp	r4, #0
 800a340:	d1f7      	bne.n	800a332 <_fwalk_reent+0xe>
 800a342:	4638      	mov	r0, r7
 800a344:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a348:	89ab      	ldrh	r3, [r5, #12]
 800a34a:	2b01      	cmp	r3, #1
 800a34c:	d907      	bls.n	800a35e <_fwalk_reent+0x3a>
 800a34e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a352:	3301      	adds	r3, #1
 800a354:	d003      	beq.n	800a35e <_fwalk_reent+0x3a>
 800a356:	4629      	mov	r1, r5
 800a358:	4630      	mov	r0, r6
 800a35a:	47c0      	blx	r8
 800a35c:	4307      	orrs	r7, r0
 800a35e:	3568      	adds	r5, #104	; 0x68
 800a360:	e7e9      	b.n	800a336 <_fwalk_reent+0x12>
	...

0800a364 <_localeconv_r>:
 800a364:	4800      	ldr	r0, [pc, #0]	; (800a368 <_localeconv_r+0x4>)
 800a366:	4770      	bx	lr
 800a368:	20000178 	.word	0x20000178

0800a36c <__retarget_lock_init_recursive>:
 800a36c:	4770      	bx	lr

0800a36e <__retarget_lock_acquire_recursive>:
 800a36e:	4770      	bx	lr

0800a370 <__retarget_lock_release_recursive>:
 800a370:	4770      	bx	lr

0800a372 <__swhatbuf_r>:
 800a372:	b570      	push	{r4, r5, r6, lr}
 800a374:	460e      	mov	r6, r1
 800a376:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a37a:	2900      	cmp	r1, #0
 800a37c:	b096      	sub	sp, #88	; 0x58
 800a37e:	4614      	mov	r4, r2
 800a380:	461d      	mov	r5, r3
 800a382:	da08      	bge.n	800a396 <__swhatbuf_r+0x24>
 800a384:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a388:	2200      	movs	r2, #0
 800a38a:	602a      	str	r2, [r5, #0]
 800a38c:	061a      	lsls	r2, r3, #24
 800a38e:	d410      	bmi.n	800a3b2 <__swhatbuf_r+0x40>
 800a390:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a394:	e00e      	b.n	800a3b4 <__swhatbuf_r+0x42>
 800a396:	466a      	mov	r2, sp
 800a398:	f001 f82e 	bl	800b3f8 <_fstat_r>
 800a39c:	2800      	cmp	r0, #0
 800a39e:	dbf1      	blt.n	800a384 <__swhatbuf_r+0x12>
 800a3a0:	9a01      	ldr	r2, [sp, #4]
 800a3a2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a3a6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a3aa:	425a      	negs	r2, r3
 800a3ac:	415a      	adcs	r2, r3
 800a3ae:	602a      	str	r2, [r5, #0]
 800a3b0:	e7ee      	b.n	800a390 <__swhatbuf_r+0x1e>
 800a3b2:	2340      	movs	r3, #64	; 0x40
 800a3b4:	2000      	movs	r0, #0
 800a3b6:	6023      	str	r3, [r4, #0]
 800a3b8:	b016      	add	sp, #88	; 0x58
 800a3ba:	bd70      	pop	{r4, r5, r6, pc}

0800a3bc <__smakebuf_r>:
 800a3bc:	898b      	ldrh	r3, [r1, #12]
 800a3be:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a3c0:	079d      	lsls	r5, r3, #30
 800a3c2:	4606      	mov	r6, r0
 800a3c4:	460c      	mov	r4, r1
 800a3c6:	d507      	bpl.n	800a3d8 <__smakebuf_r+0x1c>
 800a3c8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a3cc:	6023      	str	r3, [r4, #0]
 800a3ce:	6123      	str	r3, [r4, #16]
 800a3d0:	2301      	movs	r3, #1
 800a3d2:	6163      	str	r3, [r4, #20]
 800a3d4:	b002      	add	sp, #8
 800a3d6:	bd70      	pop	{r4, r5, r6, pc}
 800a3d8:	ab01      	add	r3, sp, #4
 800a3da:	466a      	mov	r2, sp
 800a3dc:	f7ff ffc9 	bl	800a372 <__swhatbuf_r>
 800a3e0:	9900      	ldr	r1, [sp, #0]
 800a3e2:	4605      	mov	r5, r0
 800a3e4:	4630      	mov	r0, r6
 800a3e6:	f000 fc37 	bl	800ac58 <_malloc_r>
 800a3ea:	b948      	cbnz	r0, 800a400 <__smakebuf_r+0x44>
 800a3ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a3f0:	059a      	lsls	r2, r3, #22
 800a3f2:	d4ef      	bmi.n	800a3d4 <__smakebuf_r+0x18>
 800a3f4:	f023 0303 	bic.w	r3, r3, #3
 800a3f8:	f043 0302 	orr.w	r3, r3, #2
 800a3fc:	81a3      	strh	r3, [r4, #12]
 800a3fe:	e7e3      	b.n	800a3c8 <__smakebuf_r+0xc>
 800a400:	4b0d      	ldr	r3, [pc, #52]	; (800a438 <__smakebuf_r+0x7c>)
 800a402:	62b3      	str	r3, [r6, #40]	; 0x28
 800a404:	89a3      	ldrh	r3, [r4, #12]
 800a406:	6020      	str	r0, [r4, #0]
 800a408:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a40c:	81a3      	strh	r3, [r4, #12]
 800a40e:	9b00      	ldr	r3, [sp, #0]
 800a410:	6163      	str	r3, [r4, #20]
 800a412:	9b01      	ldr	r3, [sp, #4]
 800a414:	6120      	str	r0, [r4, #16]
 800a416:	b15b      	cbz	r3, 800a430 <__smakebuf_r+0x74>
 800a418:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a41c:	4630      	mov	r0, r6
 800a41e:	f000 fffd 	bl	800b41c <_isatty_r>
 800a422:	b128      	cbz	r0, 800a430 <__smakebuf_r+0x74>
 800a424:	89a3      	ldrh	r3, [r4, #12]
 800a426:	f023 0303 	bic.w	r3, r3, #3
 800a42a:	f043 0301 	orr.w	r3, r3, #1
 800a42e:	81a3      	strh	r3, [r4, #12]
 800a430:	89a0      	ldrh	r0, [r4, #12]
 800a432:	4305      	orrs	r5, r0
 800a434:	81a5      	strh	r5, [r4, #12]
 800a436:	e7cd      	b.n	800a3d4 <__smakebuf_r+0x18>
 800a438:	0800a1c1 	.word	0x0800a1c1

0800a43c <malloc>:
 800a43c:	4b02      	ldr	r3, [pc, #8]	; (800a448 <malloc+0xc>)
 800a43e:	4601      	mov	r1, r0
 800a440:	6818      	ldr	r0, [r3, #0]
 800a442:	f000 bc09 	b.w	800ac58 <_malloc_r>
 800a446:	bf00      	nop
 800a448:	20000024 	.word	0x20000024

0800a44c <_Balloc>:
 800a44c:	b570      	push	{r4, r5, r6, lr}
 800a44e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a450:	4604      	mov	r4, r0
 800a452:	460d      	mov	r5, r1
 800a454:	b976      	cbnz	r6, 800a474 <_Balloc+0x28>
 800a456:	2010      	movs	r0, #16
 800a458:	f7ff fff0 	bl	800a43c <malloc>
 800a45c:	4602      	mov	r2, r0
 800a45e:	6260      	str	r0, [r4, #36]	; 0x24
 800a460:	b920      	cbnz	r0, 800a46c <_Balloc+0x20>
 800a462:	4b18      	ldr	r3, [pc, #96]	; (800a4c4 <_Balloc+0x78>)
 800a464:	4818      	ldr	r0, [pc, #96]	; (800a4c8 <_Balloc+0x7c>)
 800a466:	2166      	movs	r1, #102	; 0x66
 800a468:	f000 ff86 	bl	800b378 <__assert_func>
 800a46c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a470:	6006      	str	r6, [r0, #0]
 800a472:	60c6      	str	r6, [r0, #12]
 800a474:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a476:	68f3      	ldr	r3, [r6, #12]
 800a478:	b183      	cbz	r3, 800a49c <_Balloc+0x50>
 800a47a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a47c:	68db      	ldr	r3, [r3, #12]
 800a47e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a482:	b9b8      	cbnz	r0, 800a4b4 <_Balloc+0x68>
 800a484:	2101      	movs	r1, #1
 800a486:	fa01 f605 	lsl.w	r6, r1, r5
 800a48a:	1d72      	adds	r2, r6, #5
 800a48c:	0092      	lsls	r2, r2, #2
 800a48e:	4620      	mov	r0, r4
 800a490:	f000 fb60 	bl	800ab54 <_calloc_r>
 800a494:	b160      	cbz	r0, 800a4b0 <_Balloc+0x64>
 800a496:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a49a:	e00e      	b.n	800a4ba <_Balloc+0x6e>
 800a49c:	2221      	movs	r2, #33	; 0x21
 800a49e:	2104      	movs	r1, #4
 800a4a0:	4620      	mov	r0, r4
 800a4a2:	f000 fb57 	bl	800ab54 <_calloc_r>
 800a4a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a4a8:	60f0      	str	r0, [r6, #12]
 800a4aa:	68db      	ldr	r3, [r3, #12]
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d1e4      	bne.n	800a47a <_Balloc+0x2e>
 800a4b0:	2000      	movs	r0, #0
 800a4b2:	bd70      	pop	{r4, r5, r6, pc}
 800a4b4:	6802      	ldr	r2, [r0, #0]
 800a4b6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a4ba:	2300      	movs	r3, #0
 800a4bc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a4c0:	e7f7      	b.n	800a4b2 <_Balloc+0x66>
 800a4c2:	bf00      	nop
 800a4c4:	0800bc55 	.word	0x0800bc55
 800a4c8:	0800bd38 	.word	0x0800bd38

0800a4cc <_Bfree>:
 800a4cc:	b570      	push	{r4, r5, r6, lr}
 800a4ce:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a4d0:	4605      	mov	r5, r0
 800a4d2:	460c      	mov	r4, r1
 800a4d4:	b976      	cbnz	r6, 800a4f4 <_Bfree+0x28>
 800a4d6:	2010      	movs	r0, #16
 800a4d8:	f7ff ffb0 	bl	800a43c <malloc>
 800a4dc:	4602      	mov	r2, r0
 800a4de:	6268      	str	r0, [r5, #36]	; 0x24
 800a4e0:	b920      	cbnz	r0, 800a4ec <_Bfree+0x20>
 800a4e2:	4b09      	ldr	r3, [pc, #36]	; (800a508 <_Bfree+0x3c>)
 800a4e4:	4809      	ldr	r0, [pc, #36]	; (800a50c <_Bfree+0x40>)
 800a4e6:	218a      	movs	r1, #138	; 0x8a
 800a4e8:	f000 ff46 	bl	800b378 <__assert_func>
 800a4ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a4f0:	6006      	str	r6, [r0, #0]
 800a4f2:	60c6      	str	r6, [r0, #12]
 800a4f4:	b13c      	cbz	r4, 800a506 <_Bfree+0x3a>
 800a4f6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a4f8:	6862      	ldr	r2, [r4, #4]
 800a4fa:	68db      	ldr	r3, [r3, #12]
 800a4fc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a500:	6021      	str	r1, [r4, #0]
 800a502:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a506:	bd70      	pop	{r4, r5, r6, pc}
 800a508:	0800bc55 	.word	0x0800bc55
 800a50c:	0800bd38 	.word	0x0800bd38

0800a510 <__multadd>:
 800a510:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a514:	690d      	ldr	r5, [r1, #16]
 800a516:	4607      	mov	r7, r0
 800a518:	460c      	mov	r4, r1
 800a51a:	461e      	mov	r6, r3
 800a51c:	f101 0c14 	add.w	ip, r1, #20
 800a520:	2000      	movs	r0, #0
 800a522:	f8dc 3000 	ldr.w	r3, [ip]
 800a526:	b299      	uxth	r1, r3
 800a528:	fb02 6101 	mla	r1, r2, r1, r6
 800a52c:	0c1e      	lsrs	r6, r3, #16
 800a52e:	0c0b      	lsrs	r3, r1, #16
 800a530:	fb02 3306 	mla	r3, r2, r6, r3
 800a534:	b289      	uxth	r1, r1
 800a536:	3001      	adds	r0, #1
 800a538:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a53c:	4285      	cmp	r5, r0
 800a53e:	f84c 1b04 	str.w	r1, [ip], #4
 800a542:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a546:	dcec      	bgt.n	800a522 <__multadd+0x12>
 800a548:	b30e      	cbz	r6, 800a58e <__multadd+0x7e>
 800a54a:	68a3      	ldr	r3, [r4, #8]
 800a54c:	42ab      	cmp	r3, r5
 800a54e:	dc19      	bgt.n	800a584 <__multadd+0x74>
 800a550:	6861      	ldr	r1, [r4, #4]
 800a552:	4638      	mov	r0, r7
 800a554:	3101      	adds	r1, #1
 800a556:	f7ff ff79 	bl	800a44c <_Balloc>
 800a55a:	4680      	mov	r8, r0
 800a55c:	b928      	cbnz	r0, 800a56a <__multadd+0x5a>
 800a55e:	4602      	mov	r2, r0
 800a560:	4b0c      	ldr	r3, [pc, #48]	; (800a594 <__multadd+0x84>)
 800a562:	480d      	ldr	r0, [pc, #52]	; (800a598 <__multadd+0x88>)
 800a564:	21b5      	movs	r1, #181	; 0xb5
 800a566:	f000 ff07 	bl	800b378 <__assert_func>
 800a56a:	6922      	ldr	r2, [r4, #16]
 800a56c:	3202      	adds	r2, #2
 800a56e:	f104 010c 	add.w	r1, r4, #12
 800a572:	0092      	lsls	r2, r2, #2
 800a574:	300c      	adds	r0, #12
 800a576:	f7fe f8d5 	bl	8008724 <memcpy>
 800a57a:	4621      	mov	r1, r4
 800a57c:	4638      	mov	r0, r7
 800a57e:	f7ff ffa5 	bl	800a4cc <_Bfree>
 800a582:	4644      	mov	r4, r8
 800a584:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a588:	3501      	adds	r5, #1
 800a58a:	615e      	str	r6, [r3, #20]
 800a58c:	6125      	str	r5, [r4, #16]
 800a58e:	4620      	mov	r0, r4
 800a590:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a594:	0800bcc7 	.word	0x0800bcc7
 800a598:	0800bd38 	.word	0x0800bd38

0800a59c <__hi0bits>:
 800a59c:	0c03      	lsrs	r3, r0, #16
 800a59e:	041b      	lsls	r3, r3, #16
 800a5a0:	b9d3      	cbnz	r3, 800a5d8 <__hi0bits+0x3c>
 800a5a2:	0400      	lsls	r0, r0, #16
 800a5a4:	2310      	movs	r3, #16
 800a5a6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a5aa:	bf04      	itt	eq
 800a5ac:	0200      	lsleq	r0, r0, #8
 800a5ae:	3308      	addeq	r3, #8
 800a5b0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a5b4:	bf04      	itt	eq
 800a5b6:	0100      	lsleq	r0, r0, #4
 800a5b8:	3304      	addeq	r3, #4
 800a5ba:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a5be:	bf04      	itt	eq
 800a5c0:	0080      	lsleq	r0, r0, #2
 800a5c2:	3302      	addeq	r3, #2
 800a5c4:	2800      	cmp	r0, #0
 800a5c6:	db05      	blt.n	800a5d4 <__hi0bits+0x38>
 800a5c8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a5cc:	f103 0301 	add.w	r3, r3, #1
 800a5d0:	bf08      	it	eq
 800a5d2:	2320      	moveq	r3, #32
 800a5d4:	4618      	mov	r0, r3
 800a5d6:	4770      	bx	lr
 800a5d8:	2300      	movs	r3, #0
 800a5da:	e7e4      	b.n	800a5a6 <__hi0bits+0xa>

0800a5dc <__lo0bits>:
 800a5dc:	6803      	ldr	r3, [r0, #0]
 800a5de:	f013 0207 	ands.w	r2, r3, #7
 800a5e2:	4601      	mov	r1, r0
 800a5e4:	d00b      	beq.n	800a5fe <__lo0bits+0x22>
 800a5e6:	07da      	lsls	r2, r3, #31
 800a5e8:	d423      	bmi.n	800a632 <__lo0bits+0x56>
 800a5ea:	0798      	lsls	r0, r3, #30
 800a5ec:	bf49      	itett	mi
 800a5ee:	085b      	lsrmi	r3, r3, #1
 800a5f0:	089b      	lsrpl	r3, r3, #2
 800a5f2:	2001      	movmi	r0, #1
 800a5f4:	600b      	strmi	r3, [r1, #0]
 800a5f6:	bf5c      	itt	pl
 800a5f8:	600b      	strpl	r3, [r1, #0]
 800a5fa:	2002      	movpl	r0, #2
 800a5fc:	4770      	bx	lr
 800a5fe:	b298      	uxth	r0, r3
 800a600:	b9a8      	cbnz	r0, 800a62e <__lo0bits+0x52>
 800a602:	0c1b      	lsrs	r3, r3, #16
 800a604:	2010      	movs	r0, #16
 800a606:	b2da      	uxtb	r2, r3
 800a608:	b90a      	cbnz	r2, 800a60e <__lo0bits+0x32>
 800a60a:	3008      	adds	r0, #8
 800a60c:	0a1b      	lsrs	r3, r3, #8
 800a60e:	071a      	lsls	r2, r3, #28
 800a610:	bf04      	itt	eq
 800a612:	091b      	lsreq	r3, r3, #4
 800a614:	3004      	addeq	r0, #4
 800a616:	079a      	lsls	r2, r3, #30
 800a618:	bf04      	itt	eq
 800a61a:	089b      	lsreq	r3, r3, #2
 800a61c:	3002      	addeq	r0, #2
 800a61e:	07da      	lsls	r2, r3, #31
 800a620:	d403      	bmi.n	800a62a <__lo0bits+0x4e>
 800a622:	085b      	lsrs	r3, r3, #1
 800a624:	f100 0001 	add.w	r0, r0, #1
 800a628:	d005      	beq.n	800a636 <__lo0bits+0x5a>
 800a62a:	600b      	str	r3, [r1, #0]
 800a62c:	4770      	bx	lr
 800a62e:	4610      	mov	r0, r2
 800a630:	e7e9      	b.n	800a606 <__lo0bits+0x2a>
 800a632:	2000      	movs	r0, #0
 800a634:	4770      	bx	lr
 800a636:	2020      	movs	r0, #32
 800a638:	4770      	bx	lr
	...

0800a63c <__i2b>:
 800a63c:	b510      	push	{r4, lr}
 800a63e:	460c      	mov	r4, r1
 800a640:	2101      	movs	r1, #1
 800a642:	f7ff ff03 	bl	800a44c <_Balloc>
 800a646:	4602      	mov	r2, r0
 800a648:	b928      	cbnz	r0, 800a656 <__i2b+0x1a>
 800a64a:	4b05      	ldr	r3, [pc, #20]	; (800a660 <__i2b+0x24>)
 800a64c:	4805      	ldr	r0, [pc, #20]	; (800a664 <__i2b+0x28>)
 800a64e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a652:	f000 fe91 	bl	800b378 <__assert_func>
 800a656:	2301      	movs	r3, #1
 800a658:	6144      	str	r4, [r0, #20]
 800a65a:	6103      	str	r3, [r0, #16]
 800a65c:	bd10      	pop	{r4, pc}
 800a65e:	bf00      	nop
 800a660:	0800bcc7 	.word	0x0800bcc7
 800a664:	0800bd38 	.word	0x0800bd38

0800a668 <__multiply>:
 800a668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a66c:	4691      	mov	r9, r2
 800a66e:	690a      	ldr	r2, [r1, #16]
 800a670:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a674:	429a      	cmp	r2, r3
 800a676:	bfb8      	it	lt
 800a678:	460b      	movlt	r3, r1
 800a67a:	460c      	mov	r4, r1
 800a67c:	bfbc      	itt	lt
 800a67e:	464c      	movlt	r4, r9
 800a680:	4699      	movlt	r9, r3
 800a682:	6927      	ldr	r7, [r4, #16]
 800a684:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a688:	68a3      	ldr	r3, [r4, #8]
 800a68a:	6861      	ldr	r1, [r4, #4]
 800a68c:	eb07 060a 	add.w	r6, r7, sl
 800a690:	42b3      	cmp	r3, r6
 800a692:	b085      	sub	sp, #20
 800a694:	bfb8      	it	lt
 800a696:	3101      	addlt	r1, #1
 800a698:	f7ff fed8 	bl	800a44c <_Balloc>
 800a69c:	b930      	cbnz	r0, 800a6ac <__multiply+0x44>
 800a69e:	4602      	mov	r2, r0
 800a6a0:	4b44      	ldr	r3, [pc, #272]	; (800a7b4 <__multiply+0x14c>)
 800a6a2:	4845      	ldr	r0, [pc, #276]	; (800a7b8 <__multiply+0x150>)
 800a6a4:	f240 115d 	movw	r1, #349	; 0x15d
 800a6a8:	f000 fe66 	bl	800b378 <__assert_func>
 800a6ac:	f100 0514 	add.w	r5, r0, #20
 800a6b0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a6b4:	462b      	mov	r3, r5
 800a6b6:	2200      	movs	r2, #0
 800a6b8:	4543      	cmp	r3, r8
 800a6ba:	d321      	bcc.n	800a700 <__multiply+0x98>
 800a6bc:	f104 0314 	add.w	r3, r4, #20
 800a6c0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a6c4:	f109 0314 	add.w	r3, r9, #20
 800a6c8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a6cc:	9202      	str	r2, [sp, #8]
 800a6ce:	1b3a      	subs	r2, r7, r4
 800a6d0:	3a15      	subs	r2, #21
 800a6d2:	f022 0203 	bic.w	r2, r2, #3
 800a6d6:	3204      	adds	r2, #4
 800a6d8:	f104 0115 	add.w	r1, r4, #21
 800a6dc:	428f      	cmp	r7, r1
 800a6de:	bf38      	it	cc
 800a6e0:	2204      	movcc	r2, #4
 800a6e2:	9201      	str	r2, [sp, #4]
 800a6e4:	9a02      	ldr	r2, [sp, #8]
 800a6e6:	9303      	str	r3, [sp, #12]
 800a6e8:	429a      	cmp	r2, r3
 800a6ea:	d80c      	bhi.n	800a706 <__multiply+0x9e>
 800a6ec:	2e00      	cmp	r6, #0
 800a6ee:	dd03      	ble.n	800a6f8 <__multiply+0x90>
 800a6f0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d05a      	beq.n	800a7ae <__multiply+0x146>
 800a6f8:	6106      	str	r6, [r0, #16]
 800a6fa:	b005      	add	sp, #20
 800a6fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a700:	f843 2b04 	str.w	r2, [r3], #4
 800a704:	e7d8      	b.n	800a6b8 <__multiply+0x50>
 800a706:	f8b3 a000 	ldrh.w	sl, [r3]
 800a70a:	f1ba 0f00 	cmp.w	sl, #0
 800a70e:	d024      	beq.n	800a75a <__multiply+0xf2>
 800a710:	f104 0e14 	add.w	lr, r4, #20
 800a714:	46a9      	mov	r9, r5
 800a716:	f04f 0c00 	mov.w	ip, #0
 800a71a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a71e:	f8d9 1000 	ldr.w	r1, [r9]
 800a722:	fa1f fb82 	uxth.w	fp, r2
 800a726:	b289      	uxth	r1, r1
 800a728:	fb0a 110b 	mla	r1, sl, fp, r1
 800a72c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a730:	f8d9 2000 	ldr.w	r2, [r9]
 800a734:	4461      	add	r1, ip
 800a736:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a73a:	fb0a c20b 	mla	r2, sl, fp, ip
 800a73e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a742:	b289      	uxth	r1, r1
 800a744:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a748:	4577      	cmp	r7, lr
 800a74a:	f849 1b04 	str.w	r1, [r9], #4
 800a74e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a752:	d8e2      	bhi.n	800a71a <__multiply+0xb2>
 800a754:	9a01      	ldr	r2, [sp, #4]
 800a756:	f845 c002 	str.w	ip, [r5, r2]
 800a75a:	9a03      	ldr	r2, [sp, #12]
 800a75c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a760:	3304      	adds	r3, #4
 800a762:	f1b9 0f00 	cmp.w	r9, #0
 800a766:	d020      	beq.n	800a7aa <__multiply+0x142>
 800a768:	6829      	ldr	r1, [r5, #0]
 800a76a:	f104 0c14 	add.w	ip, r4, #20
 800a76e:	46ae      	mov	lr, r5
 800a770:	f04f 0a00 	mov.w	sl, #0
 800a774:	f8bc b000 	ldrh.w	fp, [ip]
 800a778:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a77c:	fb09 220b 	mla	r2, r9, fp, r2
 800a780:	4492      	add	sl, r2
 800a782:	b289      	uxth	r1, r1
 800a784:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800a788:	f84e 1b04 	str.w	r1, [lr], #4
 800a78c:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a790:	f8be 1000 	ldrh.w	r1, [lr]
 800a794:	0c12      	lsrs	r2, r2, #16
 800a796:	fb09 1102 	mla	r1, r9, r2, r1
 800a79a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800a79e:	4567      	cmp	r7, ip
 800a7a0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a7a4:	d8e6      	bhi.n	800a774 <__multiply+0x10c>
 800a7a6:	9a01      	ldr	r2, [sp, #4]
 800a7a8:	50a9      	str	r1, [r5, r2]
 800a7aa:	3504      	adds	r5, #4
 800a7ac:	e79a      	b.n	800a6e4 <__multiply+0x7c>
 800a7ae:	3e01      	subs	r6, #1
 800a7b0:	e79c      	b.n	800a6ec <__multiply+0x84>
 800a7b2:	bf00      	nop
 800a7b4:	0800bcc7 	.word	0x0800bcc7
 800a7b8:	0800bd38 	.word	0x0800bd38

0800a7bc <__pow5mult>:
 800a7bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a7c0:	4615      	mov	r5, r2
 800a7c2:	f012 0203 	ands.w	r2, r2, #3
 800a7c6:	4606      	mov	r6, r0
 800a7c8:	460f      	mov	r7, r1
 800a7ca:	d007      	beq.n	800a7dc <__pow5mult+0x20>
 800a7cc:	4c25      	ldr	r4, [pc, #148]	; (800a864 <__pow5mult+0xa8>)
 800a7ce:	3a01      	subs	r2, #1
 800a7d0:	2300      	movs	r3, #0
 800a7d2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a7d6:	f7ff fe9b 	bl	800a510 <__multadd>
 800a7da:	4607      	mov	r7, r0
 800a7dc:	10ad      	asrs	r5, r5, #2
 800a7de:	d03d      	beq.n	800a85c <__pow5mult+0xa0>
 800a7e0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a7e2:	b97c      	cbnz	r4, 800a804 <__pow5mult+0x48>
 800a7e4:	2010      	movs	r0, #16
 800a7e6:	f7ff fe29 	bl	800a43c <malloc>
 800a7ea:	4602      	mov	r2, r0
 800a7ec:	6270      	str	r0, [r6, #36]	; 0x24
 800a7ee:	b928      	cbnz	r0, 800a7fc <__pow5mult+0x40>
 800a7f0:	4b1d      	ldr	r3, [pc, #116]	; (800a868 <__pow5mult+0xac>)
 800a7f2:	481e      	ldr	r0, [pc, #120]	; (800a86c <__pow5mult+0xb0>)
 800a7f4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a7f8:	f000 fdbe 	bl	800b378 <__assert_func>
 800a7fc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a800:	6004      	str	r4, [r0, #0]
 800a802:	60c4      	str	r4, [r0, #12]
 800a804:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a808:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a80c:	b94c      	cbnz	r4, 800a822 <__pow5mult+0x66>
 800a80e:	f240 2171 	movw	r1, #625	; 0x271
 800a812:	4630      	mov	r0, r6
 800a814:	f7ff ff12 	bl	800a63c <__i2b>
 800a818:	2300      	movs	r3, #0
 800a81a:	f8c8 0008 	str.w	r0, [r8, #8]
 800a81e:	4604      	mov	r4, r0
 800a820:	6003      	str	r3, [r0, #0]
 800a822:	f04f 0900 	mov.w	r9, #0
 800a826:	07eb      	lsls	r3, r5, #31
 800a828:	d50a      	bpl.n	800a840 <__pow5mult+0x84>
 800a82a:	4639      	mov	r1, r7
 800a82c:	4622      	mov	r2, r4
 800a82e:	4630      	mov	r0, r6
 800a830:	f7ff ff1a 	bl	800a668 <__multiply>
 800a834:	4639      	mov	r1, r7
 800a836:	4680      	mov	r8, r0
 800a838:	4630      	mov	r0, r6
 800a83a:	f7ff fe47 	bl	800a4cc <_Bfree>
 800a83e:	4647      	mov	r7, r8
 800a840:	106d      	asrs	r5, r5, #1
 800a842:	d00b      	beq.n	800a85c <__pow5mult+0xa0>
 800a844:	6820      	ldr	r0, [r4, #0]
 800a846:	b938      	cbnz	r0, 800a858 <__pow5mult+0x9c>
 800a848:	4622      	mov	r2, r4
 800a84a:	4621      	mov	r1, r4
 800a84c:	4630      	mov	r0, r6
 800a84e:	f7ff ff0b 	bl	800a668 <__multiply>
 800a852:	6020      	str	r0, [r4, #0]
 800a854:	f8c0 9000 	str.w	r9, [r0]
 800a858:	4604      	mov	r4, r0
 800a85a:	e7e4      	b.n	800a826 <__pow5mult+0x6a>
 800a85c:	4638      	mov	r0, r7
 800a85e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a862:	bf00      	nop
 800a864:	0800be88 	.word	0x0800be88
 800a868:	0800bc55 	.word	0x0800bc55
 800a86c:	0800bd38 	.word	0x0800bd38

0800a870 <__lshift>:
 800a870:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a874:	460c      	mov	r4, r1
 800a876:	6849      	ldr	r1, [r1, #4]
 800a878:	6923      	ldr	r3, [r4, #16]
 800a87a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a87e:	68a3      	ldr	r3, [r4, #8]
 800a880:	4607      	mov	r7, r0
 800a882:	4691      	mov	r9, r2
 800a884:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a888:	f108 0601 	add.w	r6, r8, #1
 800a88c:	42b3      	cmp	r3, r6
 800a88e:	db0b      	blt.n	800a8a8 <__lshift+0x38>
 800a890:	4638      	mov	r0, r7
 800a892:	f7ff fddb 	bl	800a44c <_Balloc>
 800a896:	4605      	mov	r5, r0
 800a898:	b948      	cbnz	r0, 800a8ae <__lshift+0x3e>
 800a89a:	4602      	mov	r2, r0
 800a89c:	4b2a      	ldr	r3, [pc, #168]	; (800a948 <__lshift+0xd8>)
 800a89e:	482b      	ldr	r0, [pc, #172]	; (800a94c <__lshift+0xdc>)
 800a8a0:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a8a4:	f000 fd68 	bl	800b378 <__assert_func>
 800a8a8:	3101      	adds	r1, #1
 800a8aa:	005b      	lsls	r3, r3, #1
 800a8ac:	e7ee      	b.n	800a88c <__lshift+0x1c>
 800a8ae:	2300      	movs	r3, #0
 800a8b0:	f100 0114 	add.w	r1, r0, #20
 800a8b4:	f100 0210 	add.w	r2, r0, #16
 800a8b8:	4618      	mov	r0, r3
 800a8ba:	4553      	cmp	r3, sl
 800a8bc:	db37      	blt.n	800a92e <__lshift+0xbe>
 800a8be:	6920      	ldr	r0, [r4, #16]
 800a8c0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a8c4:	f104 0314 	add.w	r3, r4, #20
 800a8c8:	f019 091f 	ands.w	r9, r9, #31
 800a8cc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a8d0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a8d4:	d02f      	beq.n	800a936 <__lshift+0xc6>
 800a8d6:	f1c9 0e20 	rsb	lr, r9, #32
 800a8da:	468a      	mov	sl, r1
 800a8dc:	f04f 0c00 	mov.w	ip, #0
 800a8e0:	681a      	ldr	r2, [r3, #0]
 800a8e2:	fa02 f209 	lsl.w	r2, r2, r9
 800a8e6:	ea42 020c 	orr.w	r2, r2, ip
 800a8ea:	f84a 2b04 	str.w	r2, [sl], #4
 800a8ee:	f853 2b04 	ldr.w	r2, [r3], #4
 800a8f2:	4298      	cmp	r0, r3
 800a8f4:	fa22 fc0e 	lsr.w	ip, r2, lr
 800a8f8:	d8f2      	bhi.n	800a8e0 <__lshift+0x70>
 800a8fa:	1b03      	subs	r3, r0, r4
 800a8fc:	3b15      	subs	r3, #21
 800a8fe:	f023 0303 	bic.w	r3, r3, #3
 800a902:	3304      	adds	r3, #4
 800a904:	f104 0215 	add.w	r2, r4, #21
 800a908:	4290      	cmp	r0, r2
 800a90a:	bf38      	it	cc
 800a90c:	2304      	movcc	r3, #4
 800a90e:	f841 c003 	str.w	ip, [r1, r3]
 800a912:	f1bc 0f00 	cmp.w	ip, #0
 800a916:	d001      	beq.n	800a91c <__lshift+0xac>
 800a918:	f108 0602 	add.w	r6, r8, #2
 800a91c:	3e01      	subs	r6, #1
 800a91e:	4638      	mov	r0, r7
 800a920:	612e      	str	r6, [r5, #16]
 800a922:	4621      	mov	r1, r4
 800a924:	f7ff fdd2 	bl	800a4cc <_Bfree>
 800a928:	4628      	mov	r0, r5
 800a92a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a92e:	f842 0f04 	str.w	r0, [r2, #4]!
 800a932:	3301      	adds	r3, #1
 800a934:	e7c1      	b.n	800a8ba <__lshift+0x4a>
 800a936:	3904      	subs	r1, #4
 800a938:	f853 2b04 	ldr.w	r2, [r3], #4
 800a93c:	f841 2f04 	str.w	r2, [r1, #4]!
 800a940:	4298      	cmp	r0, r3
 800a942:	d8f9      	bhi.n	800a938 <__lshift+0xc8>
 800a944:	e7ea      	b.n	800a91c <__lshift+0xac>
 800a946:	bf00      	nop
 800a948:	0800bcc7 	.word	0x0800bcc7
 800a94c:	0800bd38 	.word	0x0800bd38

0800a950 <__mcmp>:
 800a950:	b530      	push	{r4, r5, lr}
 800a952:	6902      	ldr	r2, [r0, #16]
 800a954:	690c      	ldr	r4, [r1, #16]
 800a956:	1b12      	subs	r2, r2, r4
 800a958:	d10e      	bne.n	800a978 <__mcmp+0x28>
 800a95a:	f100 0314 	add.w	r3, r0, #20
 800a95e:	3114      	adds	r1, #20
 800a960:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a964:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a968:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a96c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a970:	42a5      	cmp	r5, r4
 800a972:	d003      	beq.n	800a97c <__mcmp+0x2c>
 800a974:	d305      	bcc.n	800a982 <__mcmp+0x32>
 800a976:	2201      	movs	r2, #1
 800a978:	4610      	mov	r0, r2
 800a97a:	bd30      	pop	{r4, r5, pc}
 800a97c:	4283      	cmp	r3, r0
 800a97e:	d3f3      	bcc.n	800a968 <__mcmp+0x18>
 800a980:	e7fa      	b.n	800a978 <__mcmp+0x28>
 800a982:	f04f 32ff 	mov.w	r2, #4294967295
 800a986:	e7f7      	b.n	800a978 <__mcmp+0x28>

0800a988 <__mdiff>:
 800a988:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a98c:	460c      	mov	r4, r1
 800a98e:	4606      	mov	r6, r0
 800a990:	4611      	mov	r1, r2
 800a992:	4620      	mov	r0, r4
 800a994:	4690      	mov	r8, r2
 800a996:	f7ff ffdb 	bl	800a950 <__mcmp>
 800a99a:	1e05      	subs	r5, r0, #0
 800a99c:	d110      	bne.n	800a9c0 <__mdiff+0x38>
 800a99e:	4629      	mov	r1, r5
 800a9a0:	4630      	mov	r0, r6
 800a9a2:	f7ff fd53 	bl	800a44c <_Balloc>
 800a9a6:	b930      	cbnz	r0, 800a9b6 <__mdiff+0x2e>
 800a9a8:	4b3a      	ldr	r3, [pc, #232]	; (800aa94 <__mdiff+0x10c>)
 800a9aa:	4602      	mov	r2, r0
 800a9ac:	f240 2132 	movw	r1, #562	; 0x232
 800a9b0:	4839      	ldr	r0, [pc, #228]	; (800aa98 <__mdiff+0x110>)
 800a9b2:	f000 fce1 	bl	800b378 <__assert_func>
 800a9b6:	2301      	movs	r3, #1
 800a9b8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a9bc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9c0:	bfa4      	itt	ge
 800a9c2:	4643      	movge	r3, r8
 800a9c4:	46a0      	movge	r8, r4
 800a9c6:	4630      	mov	r0, r6
 800a9c8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a9cc:	bfa6      	itte	ge
 800a9ce:	461c      	movge	r4, r3
 800a9d0:	2500      	movge	r5, #0
 800a9d2:	2501      	movlt	r5, #1
 800a9d4:	f7ff fd3a 	bl	800a44c <_Balloc>
 800a9d8:	b920      	cbnz	r0, 800a9e4 <__mdiff+0x5c>
 800a9da:	4b2e      	ldr	r3, [pc, #184]	; (800aa94 <__mdiff+0x10c>)
 800a9dc:	4602      	mov	r2, r0
 800a9de:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a9e2:	e7e5      	b.n	800a9b0 <__mdiff+0x28>
 800a9e4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a9e8:	6926      	ldr	r6, [r4, #16]
 800a9ea:	60c5      	str	r5, [r0, #12]
 800a9ec:	f104 0914 	add.w	r9, r4, #20
 800a9f0:	f108 0514 	add.w	r5, r8, #20
 800a9f4:	f100 0e14 	add.w	lr, r0, #20
 800a9f8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a9fc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800aa00:	f108 0210 	add.w	r2, r8, #16
 800aa04:	46f2      	mov	sl, lr
 800aa06:	2100      	movs	r1, #0
 800aa08:	f859 3b04 	ldr.w	r3, [r9], #4
 800aa0c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800aa10:	fa1f f883 	uxth.w	r8, r3
 800aa14:	fa11 f18b 	uxtah	r1, r1, fp
 800aa18:	0c1b      	lsrs	r3, r3, #16
 800aa1a:	eba1 0808 	sub.w	r8, r1, r8
 800aa1e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800aa22:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800aa26:	fa1f f888 	uxth.w	r8, r8
 800aa2a:	1419      	asrs	r1, r3, #16
 800aa2c:	454e      	cmp	r6, r9
 800aa2e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800aa32:	f84a 3b04 	str.w	r3, [sl], #4
 800aa36:	d8e7      	bhi.n	800aa08 <__mdiff+0x80>
 800aa38:	1b33      	subs	r3, r6, r4
 800aa3a:	3b15      	subs	r3, #21
 800aa3c:	f023 0303 	bic.w	r3, r3, #3
 800aa40:	3304      	adds	r3, #4
 800aa42:	3415      	adds	r4, #21
 800aa44:	42a6      	cmp	r6, r4
 800aa46:	bf38      	it	cc
 800aa48:	2304      	movcc	r3, #4
 800aa4a:	441d      	add	r5, r3
 800aa4c:	4473      	add	r3, lr
 800aa4e:	469e      	mov	lr, r3
 800aa50:	462e      	mov	r6, r5
 800aa52:	4566      	cmp	r6, ip
 800aa54:	d30e      	bcc.n	800aa74 <__mdiff+0xec>
 800aa56:	f10c 0203 	add.w	r2, ip, #3
 800aa5a:	1b52      	subs	r2, r2, r5
 800aa5c:	f022 0203 	bic.w	r2, r2, #3
 800aa60:	3d03      	subs	r5, #3
 800aa62:	45ac      	cmp	ip, r5
 800aa64:	bf38      	it	cc
 800aa66:	2200      	movcc	r2, #0
 800aa68:	441a      	add	r2, r3
 800aa6a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800aa6e:	b17b      	cbz	r3, 800aa90 <__mdiff+0x108>
 800aa70:	6107      	str	r7, [r0, #16]
 800aa72:	e7a3      	b.n	800a9bc <__mdiff+0x34>
 800aa74:	f856 8b04 	ldr.w	r8, [r6], #4
 800aa78:	fa11 f288 	uxtah	r2, r1, r8
 800aa7c:	1414      	asrs	r4, r2, #16
 800aa7e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800aa82:	b292      	uxth	r2, r2
 800aa84:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800aa88:	f84e 2b04 	str.w	r2, [lr], #4
 800aa8c:	1421      	asrs	r1, r4, #16
 800aa8e:	e7e0      	b.n	800aa52 <__mdiff+0xca>
 800aa90:	3f01      	subs	r7, #1
 800aa92:	e7ea      	b.n	800aa6a <__mdiff+0xe2>
 800aa94:	0800bcc7 	.word	0x0800bcc7
 800aa98:	0800bd38 	.word	0x0800bd38

0800aa9c <__d2b>:
 800aa9c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800aaa0:	4689      	mov	r9, r1
 800aaa2:	2101      	movs	r1, #1
 800aaa4:	ec57 6b10 	vmov	r6, r7, d0
 800aaa8:	4690      	mov	r8, r2
 800aaaa:	f7ff fccf 	bl	800a44c <_Balloc>
 800aaae:	4604      	mov	r4, r0
 800aab0:	b930      	cbnz	r0, 800aac0 <__d2b+0x24>
 800aab2:	4602      	mov	r2, r0
 800aab4:	4b25      	ldr	r3, [pc, #148]	; (800ab4c <__d2b+0xb0>)
 800aab6:	4826      	ldr	r0, [pc, #152]	; (800ab50 <__d2b+0xb4>)
 800aab8:	f240 310a 	movw	r1, #778	; 0x30a
 800aabc:	f000 fc5c 	bl	800b378 <__assert_func>
 800aac0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800aac4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800aac8:	bb35      	cbnz	r5, 800ab18 <__d2b+0x7c>
 800aaca:	2e00      	cmp	r6, #0
 800aacc:	9301      	str	r3, [sp, #4]
 800aace:	d028      	beq.n	800ab22 <__d2b+0x86>
 800aad0:	4668      	mov	r0, sp
 800aad2:	9600      	str	r6, [sp, #0]
 800aad4:	f7ff fd82 	bl	800a5dc <__lo0bits>
 800aad8:	9900      	ldr	r1, [sp, #0]
 800aada:	b300      	cbz	r0, 800ab1e <__d2b+0x82>
 800aadc:	9a01      	ldr	r2, [sp, #4]
 800aade:	f1c0 0320 	rsb	r3, r0, #32
 800aae2:	fa02 f303 	lsl.w	r3, r2, r3
 800aae6:	430b      	orrs	r3, r1
 800aae8:	40c2      	lsrs	r2, r0
 800aaea:	6163      	str	r3, [r4, #20]
 800aaec:	9201      	str	r2, [sp, #4]
 800aaee:	9b01      	ldr	r3, [sp, #4]
 800aaf0:	61a3      	str	r3, [r4, #24]
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	bf14      	ite	ne
 800aaf6:	2202      	movne	r2, #2
 800aaf8:	2201      	moveq	r2, #1
 800aafa:	6122      	str	r2, [r4, #16]
 800aafc:	b1d5      	cbz	r5, 800ab34 <__d2b+0x98>
 800aafe:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ab02:	4405      	add	r5, r0
 800ab04:	f8c9 5000 	str.w	r5, [r9]
 800ab08:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ab0c:	f8c8 0000 	str.w	r0, [r8]
 800ab10:	4620      	mov	r0, r4
 800ab12:	b003      	add	sp, #12
 800ab14:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ab18:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ab1c:	e7d5      	b.n	800aaca <__d2b+0x2e>
 800ab1e:	6161      	str	r1, [r4, #20]
 800ab20:	e7e5      	b.n	800aaee <__d2b+0x52>
 800ab22:	a801      	add	r0, sp, #4
 800ab24:	f7ff fd5a 	bl	800a5dc <__lo0bits>
 800ab28:	9b01      	ldr	r3, [sp, #4]
 800ab2a:	6163      	str	r3, [r4, #20]
 800ab2c:	2201      	movs	r2, #1
 800ab2e:	6122      	str	r2, [r4, #16]
 800ab30:	3020      	adds	r0, #32
 800ab32:	e7e3      	b.n	800aafc <__d2b+0x60>
 800ab34:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ab38:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ab3c:	f8c9 0000 	str.w	r0, [r9]
 800ab40:	6918      	ldr	r0, [r3, #16]
 800ab42:	f7ff fd2b 	bl	800a59c <__hi0bits>
 800ab46:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ab4a:	e7df      	b.n	800ab0c <__d2b+0x70>
 800ab4c:	0800bcc7 	.word	0x0800bcc7
 800ab50:	0800bd38 	.word	0x0800bd38

0800ab54 <_calloc_r>:
 800ab54:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ab56:	fba1 2402 	umull	r2, r4, r1, r2
 800ab5a:	b94c      	cbnz	r4, 800ab70 <_calloc_r+0x1c>
 800ab5c:	4611      	mov	r1, r2
 800ab5e:	9201      	str	r2, [sp, #4]
 800ab60:	f000 f87a 	bl	800ac58 <_malloc_r>
 800ab64:	9a01      	ldr	r2, [sp, #4]
 800ab66:	4605      	mov	r5, r0
 800ab68:	b930      	cbnz	r0, 800ab78 <_calloc_r+0x24>
 800ab6a:	4628      	mov	r0, r5
 800ab6c:	b003      	add	sp, #12
 800ab6e:	bd30      	pop	{r4, r5, pc}
 800ab70:	220c      	movs	r2, #12
 800ab72:	6002      	str	r2, [r0, #0]
 800ab74:	2500      	movs	r5, #0
 800ab76:	e7f8      	b.n	800ab6a <_calloc_r+0x16>
 800ab78:	4621      	mov	r1, r4
 800ab7a:	f7fd fde1 	bl	8008740 <memset>
 800ab7e:	e7f4      	b.n	800ab6a <_calloc_r+0x16>

0800ab80 <_free_r>:
 800ab80:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ab82:	2900      	cmp	r1, #0
 800ab84:	d044      	beq.n	800ac10 <_free_r+0x90>
 800ab86:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ab8a:	9001      	str	r0, [sp, #4]
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	f1a1 0404 	sub.w	r4, r1, #4
 800ab92:	bfb8      	it	lt
 800ab94:	18e4      	addlt	r4, r4, r3
 800ab96:	f000 fc8f 	bl	800b4b8 <__malloc_lock>
 800ab9a:	4a1e      	ldr	r2, [pc, #120]	; (800ac14 <_free_r+0x94>)
 800ab9c:	9801      	ldr	r0, [sp, #4]
 800ab9e:	6813      	ldr	r3, [r2, #0]
 800aba0:	b933      	cbnz	r3, 800abb0 <_free_r+0x30>
 800aba2:	6063      	str	r3, [r4, #4]
 800aba4:	6014      	str	r4, [r2, #0]
 800aba6:	b003      	add	sp, #12
 800aba8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800abac:	f000 bc8a 	b.w	800b4c4 <__malloc_unlock>
 800abb0:	42a3      	cmp	r3, r4
 800abb2:	d908      	bls.n	800abc6 <_free_r+0x46>
 800abb4:	6825      	ldr	r5, [r4, #0]
 800abb6:	1961      	adds	r1, r4, r5
 800abb8:	428b      	cmp	r3, r1
 800abba:	bf01      	itttt	eq
 800abbc:	6819      	ldreq	r1, [r3, #0]
 800abbe:	685b      	ldreq	r3, [r3, #4]
 800abc0:	1949      	addeq	r1, r1, r5
 800abc2:	6021      	streq	r1, [r4, #0]
 800abc4:	e7ed      	b.n	800aba2 <_free_r+0x22>
 800abc6:	461a      	mov	r2, r3
 800abc8:	685b      	ldr	r3, [r3, #4]
 800abca:	b10b      	cbz	r3, 800abd0 <_free_r+0x50>
 800abcc:	42a3      	cmp	r3, r4
 800abce:	d9fa      	bls.n	800abc6 <_free_r+0x46>
 800abd0:	6811      	ldr	r1, [r2, #0]
 800abd2:	1855      	adds	r5, r2, r1
 800abd4:	42a5      	cmp	r5, r4
 800abd6:	d10b      	bne.n	800abf0 <_free_r+0x70>
 800abd8:	6824      	ldr	r4, [r4, #0]
 800abda:	4421      	add	r1, r4
 800abdc:	1854      	adds	r4, r2, r1
 800abde:	42a3      	cmp	r3, r4
 800abe0:	6011      	str	r1, [r2, #0]
 800abe2:	d1e0      	bne.n	800aba6 <_free_r+0x26>
 800abe4:	681c      	ldr	r4, [r3, #0]
 800abe6:	685b      	ldr	r3, [r3, #4]
 800abe8:	6053      	str	r3, [r2, #4]
 800abea:	4421      	add	r1, r4
 800abec:	6011      	str	r1, [r2, #0]
 800abee:	e7da      	b.n	800aba6 <_free_r+0x26>
 800abf0:	d902      	bls.n	800abf8 <_free_r+0x78>
 800abf2:	230c      	movs	r3, #12
 800abf4:	6003      	str	r3, [r0, #0]
 800abf6:	e7d6      	b.n	800aba6 <_free_r+0x26>
 800abf8:	6825      	ldr	r5, [r4, #0]
 800abfa:	1961      	adds	r1, r4, r5
 800abfc:	428b      	cmp	r3, r1
 800abfe:	bf04      	itt	eq
 800ac00:	6819      	ldreq	r1, [r3, #0]
 800ac02:	685b      	ldreq	r3, [r3, #4]
 800ac04:	6063      	str	r3, [r4, #4]
 800ac06:	bf04      	itt	eq
 800ac08:	1949      	addeq	r1, r1, r5
 800ac0a:	6021      	streq	r1, [r4, #0]
 800ac0c:	6054      	str	r4, [r2, #4]
 800ac0e:	e7ca      	b.n	800aba6 <_free_r+0x26>
 800ac10:	b003      	add	sp, #12
 800ac12:	bd30      	pop	{r4, r5, pc}
 800ac14:	200005a8 	.word	0x200005a8

0800ac18 <sbrk_aligned>:
 800ac18:	b570      	push	{r4, r5, r6, lr}
 800ac1a:	4e0e      	ldr	r6, [pc, #56]	; (800ac54 <sbrk_aligned+0x3c>)
 800ac1c:	460c      	mov	r4, r1
 800ac1e:	6831      	ldr	r1, [r6, #0]
 800ac20:	4605      	mov	r5, r0
 800ac22:	b911      	cbnz	r1, 800ac2a <sbrk_aligned+0x12>
 800ac24:	f000 fb42 	bl	800b2ac <_sbrk_r>
 800ac28:	6030      	str	r0, [r6, #0]
 800ac2a:	4621      	mov	r1, r4
 800ac2c:	4628      	mov	r0, r5
 800ac2e:	f000 fb3d 	bl	800b2ac <_sbrk_r>
 800ac32:	1c43      	adds	r3, r0, #1
 800ac34:	d00a      	beq.n	800ac4c <sbrk_aligned+0x34>
 800ac36:	1cc4      	adds	r4, r0, #3
 800ac38:	f024 0403 	bic.w	r4, r4, #3
 800ac3c:	42a0      	cmp	r0, r4
 800ac3e:	d007      	beq.n	800ac50 <sbrk_aligned+0x38>
 800ac40:	1a21      	subs	r1, r4, r0
 800ac42:	4628      	mov	r0, r5
 800ac44:	f000 fb32 	bl	800b2ac <_sbrk_r>
 800ac48:	3001      	adds	r0, #1
 800ac4a:	d101      	bne.n	800ac50 <sbrk_aligned+0x38>
 800ac4c:	f04f 34ff 	mov.w	r4, #4294967295
 800ac50:	4620      	mov	r0, r4
 800ac52:	bd70      	pop	{r4, r5, r6, pc}
 800ac54:	200005ac 	.word	0x200005ac

0800ac58 <_malloc_r>:
 800ac58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac5c:	1ccd      	adds	r5, r1, #3
 800ac5e:	f025 0503 	bic.w	r5, r5, #3
 800ac62:	3508      	adds	r5, #8
 800ac64:	2d0c      	cmp	r5, #12
 800ac66:	bf38      	it	cc
 800ac68:	250c      	movcc	r5, #12
 800ac6a:	2d00      	cmp	r5, #0
 800ac6c:	4607      	mov	r7, r0
 800ac6e:	db01      	blt.n	800ac74 <_malloc_r+0x1c>
 800ac70:	42a9      	cmp	r1, r5
 800ac72:	d905      	bls.n	800ac80 <_malloc_r+0x28>
 800ac74:	230c      	movs	r3, #12
 800ac76:	603b      	str	r3, [r7, #0]
 800ac78:	2600      	movs	r6, #0
 800ac7a:	4630      	mov	r0, r6
 800ac7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac80:	4e2e      	ldr	r6, [pc, #184]	; (800ad3c <_malloc_r+0xe4>)
 800ac82:	f000 fc19 	bl	800b4b8 <__malloc_lock>
 800ac86:	6833      	ldr	r3, [r6, #0]
 800ac88:	461c      	mov	r4, r3
 800ac8a:	bb34      	cbnz	r4, 800acda <_malloc_r+0x82>
 800ac8c:	4629      	mov	r1, r5
 800ac8e:	4638      	mov	r0, r7
 800ac90:	f7ff ffc2 	bl	800ac18 <sbrk_aligned>
 800ac94:	1c43      	adds	r3, r0, #1
 800ac96:	4604      	mov	r4, r0
 800ac98:	d14d      	bne.n	800ad36 <_malloc_r+0xde>
 800ac9a:	6834      	ldr	r4, [r6, #0]
 800ac9c:	4626      	mov	r6, r4
 800ac9e:	2e00      	cmp	r6, #0
 800aca0:	d140      	bne.n	800ad24 <_malloc_r+0xcc>
 800aca2:	6823      	ldr	r3, [r4, #0]
 800aca4:	4631      	mov	r1, r6
 800aca6:	4638      	mov	r0, r7
 800aca8:	eb04 0803 	add.w	r8, r4, r3
 800acac:	f000 fafe 	bl	800b2ac <_sbrk_r>
 800acb0:	4580      	cmp	r8, r0
 800acb2:	d13a      	bne.n	800ad2a <_malloc_r+0xd2>
 800acb4:	6821      	ldr	r1, [r4, #0]
 800acb6:	3503      	adds	r5, #3
 800acb8:	1a6d      	subs	r5, r5, r1
 800acba:	f025 0503 	bic.w	r5, r5, #3
 800acbe:	3508      	adds	r5, #8
 800acc0:	2d0c      	cmp	r5, #12
 800acc2:	bf38      	it	cc
 800acc4:	250c      	movcc	r5, #12
 800acc6:	4629      	mov	r1, r5
 800acc8:	4638      	mov	r0, r7
 800acca:	f7ff ffa5 	bl	800ac18 <sbrk_aligned>
 800acce:	3001      	adds	r0, #1
 800acd0:	d02b      	beq.n	800ad2a <_malloc_r+0xd2>
 800acd2:	6823      	ldr	r3, [r4, #0]
 800acd4:	442b      	add	r3, r5
 800acd6:	6023      	str	r3, [r4, #0]
 800acd8:	e00e      	b.n	800acf8 <_malloc_r+0xa0>
 800acda:	6822      	ldr	r2, [r4, #0]
 800acdc:	1b52      	subs	r2, r2, r5
 800acde:	d41e      	bmi.n	800ad1e <_malloc_r+0xc6>
 800ace0:	2a0b      	cmp	r2, #11
 800ace2:	d916      	bls.n	800ad12 <_malloc_r+0xba>
 800ace4:	1961      	adds	r1, r4, r5
 800ace6:	42a3      	cmp	r3, r4
 800ace8:	6025      	str	r5, [r4, #0]
 800acea:	bf18      	it	ne
 800acec:	6059      	strne	r1, [r3, #4]
 800acee:	6863      	ldr	r3, [r4, #4]
 800acf0:	bf08      	it	eq
 800acf2:	6031      	streq	r1, [r6, #0]
 800acf4:	5162      	str	r2, [r4, r5]
 800acf6:	604b      	str	r3, [r1, #4]
 800acf8:	4638      	mov	r0, r7
 800acfa:	f104 060b 	add.w	r6, r4, #11
 800acfe:	f000 fbe1 	bl	800b4c4 <__malloc_unlock>
 800ad02:	f026 0607 	bic.w	r6, r6, #7
 800ad06:	1d23      	adds	r3, r4, #4
 800ad08:	1af2      	subs	r2, r6, r3
 800ad0a:	d0b6      	beq.n	800ac7a <_malloc_r+0x22>
 800ad0c:	1b9b      	subs	r3, r3, r6
 800ad0e:	50a3      	str	r3, [r4, r2]
 800ad10:	e7b3      	b.n	800ac7a <_malloc_r+0x22>
 800ad12:	6862      	ldr	r2, [r4, #4]
 800ad14:	42a3      	cmp	r3, r4
 800ad16:	bf0c      	ite	eq
 800ad18:	6032      	streq	r2, [r6, #0]
 800ad1a:	605a      	strne	r2, [r3, #4]
 800ad1c:	e7ec      	b.n	800acf8 <_malloc_r+0xa0>
 800ad1e:	4623      	mov	r3, r4
 800ad20:	6864      	ldr	r4, [r4, #4]
 800ad22:	e7b2      	b.n	800ac8a <_malloc_r+0x32>
 800ad24:	4634      	mov	r4, r6
 800ad26:	6876      	ldr	r6, [r6, #4]
 800ad28:	e7b9      	b.n	800ac9e <_malloc_r+0x46>
 800ad2a:	230c      	movs	r3, #12
 800ad2c:	603b      	str	r3, [r7, #0]
 800ad2e:	4638      	mov	r0, r7
 800ad30:	f000 fbc8 	bl	800b4c4 <__malloc_unlock>
 800ad34:	e7a1      	b.n	800ac7a <_malloc_r+0x22>
 800ad36:	6025      	str	r5, [r4, #0]
 800ad38:	e7de      	b.n	800acf8 <_malloc_r+0xa0>
 800ad3a:	bf00      	nop
 800ad3c:	200005a8 	.word	0x200005a8

0800ad40 <__ssputs_r>:
 800ad40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ad44:	688e      	ldr	r6, [r1, #8]
 800ad46:	429e      	cmp	r6, r3
 800ad48:	4682      	mov	sl, r0
 800ad4a:	460c      	mov	r4, r1
 800ad4c:	4690      	mov	r8, r2
 800ad4e:	461f      	mov	r7, r3
 800ad50:	d838      	bhi.n	800adc4 <__ssputs_r+0x84>
 800ad52:	898a      	ldrh	r2, [r1, #12]
 800ad54:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ad58:	d032      	beq.n	800adc0 <__ssputs_r+0x80>
 800ad5a:	6825      	ldr	r5, [r4, #0]
 800ad5c:	6909      	ldr	r1, [r1, #16]
 800ad5e:	eba5 0901 	sub.w	r9, r5, r1
 800ad62:	6965      	ldr	r5, [r4, #20]
 800ad64:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ad68:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ad6c:	3301      	adds	r3, #1
 800ad6e:	444b      	add	r3, r9
 800ad70:	106d      	asrs	r5, r5, #1
 800ad72:	429d      	cmp	r5, r3
 800ad74:	bf38      	it	cc
 800ad76:	461d      	movcc	r5, r3
 800ad78:	0553      	lsls	r3, r2, #21
 800ad7a:	d531      	bpl.n	800ade0 <__ssputs_r+0xa0>
 800ad7c:	4629      	mov	r1, r5
 800ad7e:	f7ff ff6b 	bl	800ac58 <_malloc_r>
 800ad82:	4606      	mov	r6, r0
 800ad84:	b950      	cbnz	r0, 800ad9c <__ssputs_r+0x5c>
 800ad86:	230c      	movs	r3, #12
 800ad88:	f8ca 3000 	str.w	r3, [sl]
 800ad8c:	89a3      	ldrh	r3, [r4, #12]
 800ad8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ad92:	81a3      	strh	r3, [r4, #12]
 800ad94:	f04f 30ff 	mov.w	r0, #4294967295
 800ad98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad9c:	6921      	ldr	r1, [r4, #16]
 800ad9e:	464a      	mov	r2, r9
 800ada0:	f7fd fcc0 	bl	8008724 <memcpy>
 800ada4:	89a3      	ldrh	r3, [r4, #12]
 800ada6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800adaa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800adae:	81a3      	strh	r3, [r4, #12]
 800adb0:	6126      	str	r6, [r4, #16]
 800adb2:	6165      	str	r5, [r4, #20]
 800adb4:	444e      	add	r6, r9
 800adb6:	eba5 0509 	sub.w	r5, r5, r9
 800adba:	6026      	str	r6, [r4, #0]
 800adbc:	60a5      	str	r5, [r4, #8]
 800adbe:	463e      	mov	r6, r7
 800adc0:	42be      	cmp	r6, r7
 800adc2:	d900      	bls.n	800adc6 <__ssputs_r+0x86>
 800adc4:	463e      	mov	r6, r7
 800adc6:	6820      	ldr	r0, [r4, #0]
 800adc8:	4632      	mov	r2, r6
 800adca:	4641      	mov	r1, r8
 800adcc:	f000 fb5a 	bl	800b484 <memmove>
 800add0:	68a3      	ldr	r3, [r4, #8]
 800add2:	1b9b      	subs	r3, r3, r6
 800add4:	60a3      	str	r3, [r4, #8]
 800add6:	6823      	ldr	r3, [r4, #0]
 800add8:	4433      	add	r3, r6
 800adda:	6023      	str	r3, [r4, #0]
 800addc:	2000      	movs	r0, #0
 800adde:	e7db      	b.n	800ad98 <__ssputs_r+0x58>
 800ade0:	462a      	mov	r2, r5
 800ade2:	f000 fb75 	bl	800b4d0 <_realloc_r>
 800ade6:	4606      	mov	r6, r0
 800ade8:	2800      	cmp	r0, #0
 800adea:	d1e1      	bne.n	800adb0 <__ssputs_r+0x70>
 800adec:	6921      	ldr	r1, [r4, #16]
 800adee:	4650      	mov	r0, sl
 800adf0:	f7ff fec6 	bl	800ab80 <_free_r>
 800adf4:	e7c7      	b.n	800ad86 <__ssputs_r+0x46>
	...

0800adf8 <_svfiprintf_r>:
 800adf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800adfc:	4698      	mov	r8, r3
 800adfe:	898b      	ldrh	r3, [r1, #12]
 800ae00:	061b      	lsls	r3, r3, #24
 800ae02:	b09d      	sub	sp, #116	; 0x74
 800ae04:	4607      	mov	r7, r0
 800ae06:	460d      	mov	r5, r1
 800ae08:	4614      	mov	r4, r2
 800ae0a:	d50e      	bpl.n	800ae2a <_svfiprintf_r+0x32>
 800ae0c:	690b      	ldr	r3, [r1, #16]
 800ae0e:	b963      	cbnz	r3, 800ae2a <_svfiprintf_r+0x32>
 800ae10:	2140      	movs	r1, #64	; 0x40
 800ae12:	f7ff ff21 	bl	800ac58 <_malloc_r>
 800ae16:	6028      	str	r0, [r5, #0]
 800ae18:	6128      	str	r0, [r5, #16]
 800ae1a:	b920      	cbnz	r0, 800ae26 <_svfiprintf_r+0x2e>
 800ae1c:	230c      	movs	r3, #12
 800ae1e:	603b      	str	r3, [r7, #0]
 800ae20:	f04f 30ff 	mov.w	r0, #4294967295
 800ae24:	e0d1      	b.n	800afca <_svfiprintf_r+0x1d2>
 800ae26:	2340      	movs	r3, #64	; 0x40
 800ae28:	616b      	str	r3, [r5, #20]
 800ae2a:	2300      	movs	r3, #0
 800ae2c:	9309      	str	r3, [sp, #36]	; 0x24
 800ae2e:	2320      	movs	r3, #32
 800ae30:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ae34:	f8cd 800c 	str.w	r8, [sp, #12]
 800ae38:	2330      	movs	r3, #48	; 0x30
 800ae3a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800afe4 <_svfiprintf_r+0x1ec>
 800ae3e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ae42:	f04f 0901 	mov.w	r9, #1
 800ae46:	4623      	mov	r3, r4
 800ae48:	469a      	mov	sl, r3
 800ae4a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ae4e:	b10a      	cbz	r2, 800ae54 <_svfiprintf_r+0x5c>
 800ae50:	2a25      	cmp	r2, #37	; 0x25
 800ae52:	d1f9      	bne.n	800ae48 <_svfiprintf_r+0x50>
 800ae54:	ebba 0b04 	subs.w	fp, sl, r4
 800ae58:	d00b      	beq.n	800ae72 <_svfiprintf_r+0x7a>
 800ae5a:	465b      	mov	r3, fp
 800ae5c:	4622      	mov	r2, r4
 800ae5e:	4629      	mov	r1, r5
 800ae60:	4638      	mov	r0, r7
 800ae62:	f7ff ff6d 	bl	800ad40 <__ssputs_r>
 800ae66:	3001      	adds	r0, #1
 800ae68:	f000 80aa 	beq.w	800afc0 <_svfiprintf_r+0x1c8>
 800ae6c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ae6e:	445a      	add	r2, fp
 800ae70:	9209      	str	r2, [sp, #36]	; 0x24
 800ae72:	f89a 3000 	ldrb.w	r3, [sl]
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	f000 80a2 	beq.w	800afc0 <_svfiprintf_r+0x1c8>
 800ae7c:	2300      	movs	r3, #0
 800ae7e:	f04f 32ff 	mov.w	r2, #4294967295
 800ae82:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ae86:	f10a 0a01 	add.w	sl, sl, #1
 800ae8a:	9304      	str	r3, [sp, #16]
 800ae8c:	9307      	str	r3, [sp, #28]
 800ae8e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ae92:	931a      	str	r3, [sp, #104]	; 0x68
 800ae94:	4654      	mov	r4, sl
 800ae96:	2205      	movs	r2, #5
 800ae98:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae9c:	4851      	ldr	r0, [pc, #324]	; (800afe4 <_svfiprintf_r+0x1ec>)
 800ae9e:	f7f5 f9a7 	bl	80001f0 <memchr>
 800aea2:	9a04      	ldr	r2, [sp, #16]
 800aea4:	b9d8      	cbnz	r0, 800aede <_svfiprintf_r+0xe6>
 800aea6:	06d0      	lsls	r0, r2, #27
 800aea8:	bf44      	itt	mi
 800aeaa:	2320      	movmi	r3, #32
 800aeac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aeb0:	0711      	lsls	r1, r2, #28
 800aeb2:	bf44      	itt	mi
 800aeb4:	232b      	movmi	r3, #43	; 0x2b
 800aeb6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aeba:	f89a 3000 	ldrb.w	r3, [sl]
 800aebe:	2b2a      	cmp	r3, #42	; 0x2a
 800aec0:	d015      	beq.n	800aeee <_svfiprintf_r+0xf6>
 800aec2:	9a07      	ldr	r2, [sp, #28]
 800aec4:	4654      	mov	r4, sl
 800aec6:	2000      	movs	r0, #0
 800aec8:	f04f 0c0a 	mov.w	ip, #10
 800aecc:	4621      	mov	r1, r4
 800aece:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aed2:	3b30      	subs	r3, #48	; 0x30
 800aed4:	2b09      	cmp	r3, #9
 800aed6:	d94e      	bls.n	800af76 <_svfiprintf_r+0x17e>
 800aed8:	b1b0      	cbz	r0, 800af08 <_svfiprintf_r+0x110>
 800aeda:	9207      	str	r2, [sp, #28]
 800aedc:	e014      	b.n	800af08 <_svfiprintf_r+0x110>
 800aede:	eba0 0308 	sub.w	r3, r0, r8
 800aee2:	fa09 f303 	lsl.w	r3, r9, r3
 800aee6:	4313      	orrs	r3, r2
 800aee8:	9304      	str	r3, [sp, #16]
 800aeea:	46a2      	mov	sl, r4
 800aeec:	e7d2      	b.n	800ae94 <_svfiprintf_r+0x9c>
 800aeee:	9b03      	ldr	r3, [sp, #12]
 800aef0:	1d19      	adds	r1, r3, #4
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	9103      	str	r1, [sp, #12]
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	bfbb      	ittet	lt
 800aefa:	425b      	neglt	r3, r3
 800aefc:	f042 0202 	orrlt.w	r2, r2, #2
 800af00:	9307      	strge	r3, [sp, #28]
 800af02:	9307      	strlt	r3, [sp, #28]
 800af04:	bfb8      	it	lt
 800af06:	9204      	strlt	r2, [sp, #16]
 800af08:	7823      	ldrb	r3, [r4, #0]
 800af0a:	2b2e      	cmp	r3, #46	; 0x2e
 800af0c:	d10c      	bne.n	800af28 <_svfiprintf_r+0x130>
 800af0e:	7863      	ldrb	r3, [r4, #1]
 800af10:	2b2a      	cmp	r3, #42	; 0x2a
 800af12:	d135      	bne.n	800af80 <_svfiprintf_r+0x188>
 800af14:	9b03      	ldr	r3, [sp, #12]
 800af16:	1d1a      	adds	r2, r3, #4
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	9203      	str	r2, [sp, #12]
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	bfb8      	it	lt
 800af20:	f04f 33ff 	movlt.w	r3, #4294967295
 800af24:	3402      	adds	r4, #2
 800af26:	9305      	str	r3, [sp, #20]
 800af28:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800aff4 <_svfiprintf_r+0x1fc>
 800af2c:	7821      	ldrb	r1, [r4, #0]
 800af2e:	2203      	movs	r2, #3
 800af30:	4650      	mov	r0, sl
 800af32:	f7f5 f95d 	bl	80001f0 <memchr>
 800af36:	b140      	cbz	r0, 800af4a <_svfiprintf_r+0x152>
 800af38:	2340      	movs	r3, #64	; 0x40
 800af3a:	eba0 000a 	sub.w	r0, r0, sl
 800af3e:	fa03 f000 	lsl.w	r0, r3, r0
 800af42:	9b04      	ldr	r3, [sp, #16]
 800af44:	4303      	orrs	r3, r0
 800af46:	3401      	adds	r4, #1
 800af48:	9304      	str	r3, [sp, #16]
 800af4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af4e:	4826      	ldr	r0, [pc, #152]	; (800afe8 <_svfiprintf_r+0x1f0>)
 800af50:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800af54:	2206      	movs	r2, #6
 800af56:	f7f5 f94b 	bl	80001f0 <memchr>
 800af5a:	2800      	cmp	r0, #0
 800af5c:	d038      	beq.n	800afd0 <_svfiprintf_r+0x1d8>
 800af5e:	4b23      	ldr	r3, [pc, #140]	; (800afec <_svfiprintf_r+0x1f4>)
 800af60:	bb1b      	cbnz	r3, 800afaa <_svfiprintf_r+0x1b2>
 800af62:	9b03      	ldr	r3, [sp, #12]
 800af64:	3307      	adds	r3, #7
 800af66:	f023 0307 	bic.w	r3, r3, #7
 800af6a:	3308      	adds	r3, #8
 800af6c:	9303      	str	r3, [sp, #12]
 800af6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af70:	4433      	add	r3, r6
 800af72:	9309      	str	r3, [sp, #36]	; 0x24
 800af74:	e767      	b.n	800ae46 <_svfiprintf_r+0x4e>
 800af76:	fb0c 3202 	mla	r2, ip, r2, r3
 800af7a:	460c      	mov	r4, r1
 800af7c:	2001      	movs	r0, #1
 800af7e:	e7a5      	b.n	800aecc <_svfiprintf_r+0xd4>
 800af80:	2300      	movs	r3, #0
 800af82:	3401      	adds	r4, #1
 800af84:	9305      	str	r3, [sp, #20]
 800af86:	4619      	mov	r1, r3
 800af88:	f04f 0c0a 	mov.w	ip, #10
 800af8c:	4620      	mov	r0, r4
 800af8e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800af92:	3a30      	subs	r2, #48	; 0x30
 800af94:	2a09      	cmp	r2, #9
 800af96:	d903      	bls.n	800afa0 <_svfiprintf_r+0x1a8>
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d0c5      	beq.n	800af28 <_svfiprintf_r+0x130>
 800af9c:	9105      	str	r1, [sp, #20]
 800af9e:	e7c3      	b.n	800af28 <_svfiprintf_r+0x130>
 800afa0:	fb0c 2101 	mla	r1, ip, r1, r2
 800afa4:	4604      	mov	r4, r0
 800afa6:	2301      	movs	r3, #1
 800afa8:	e7f0      	b.n	800af8c <_svfiprintf_r+0x194>
 800afaa:	ab03      	add	r3, sp, #12
 800afac:	9300      	str	r3, [sp, #0]
 800afae:	462a      	mov	r2, r5
 800afb0:	4b0f      	ldr	r3, [pc, #60]	; (800aff0 <_svfiprintf_r+0x1f8>)
 800afb2:	a904      	add	r1, sp, #16
 800afb4:	4638      	mov	r0, r7
 800afb6:	f7fd fc6b 	bl	8008890 <_printf_float>
 800afba:	1c42      	adds	r2, r0, #1
 800afbc:	4606      	mov	r6, r0
 800afbe:	d1d6      	bne.n	800af6e <_svfiprintf_r+0x176>
 800afc0:	89ab      	ldrh	r3, [r5, #12]
 800afc2:	065b      	lsls	r3, r3, #25
 800afc4:	f53f af2c 	bmi.w	800ae20 <_svfiprintf_r+0x28>
 800afc8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800afca:	b01d      	add	sp, #116	; 0x74
 800afcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afd0:	ab03      	add	r3, sp, #12
 800afd2:	9300      	str	r3, [sp, #0]
 800afd4:	462a      	mov	r2, r5
 800afd6:	4b06      	ldr	r3, [pc, #24]	; (800aff0 <_svfiprintf_r+0x1f8>)
 800afd8:	a904      	add	r1, sp, #16
 800afda:	4638      	mov	r0, r7
 800afdc:	f7fd fefc 	bl	8008dd8 <_printf_i>
 800afe0:	e7eb      	b.n	800afba <_svfiprintf_r+0x1c2>
 800afe2:	bf00      	nop
 800afe4:	0800be94 	.word	0x0800be94
 800afe8:	0800be9e 	.word	0x0800be9e
 800afec:	08008891 	.word	0x08008891
 800aff0:	0800ad41 	.word	0x0800ad41
 800aff4:	0800be9a 	.word	0x0800be9a

0800aff8 <__sfputc_r>:
 800aff8:	6893      	ldr	r3, [r2, #8]
 800affa:	3b01      	subs	r3, #1
 800affc:	2b00      	cmp	r3, #0
 800affe:	b410      	push	{r4}
 800b000:	6093      	str	r3, [r2, #8]
 800b002:	da08      	bge.n	800b016 <__sfputc_r+0x1e>
 800b004:	6994      	ldr	r4, [r2, #24]
 800b006:	42a3      	cmp	r3, r4
 800b008:	db01      	blt.n	800b00e <__sfputc_r+0x16>
 800b00a:	290a      	cmp	r1, #10
 800b00c:	d103      	bne.n	800b016 <__sfputc_r+0x1e>
 800b00e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b012:	f7fe b8b5 	b.w	8009180 <__swbuf_r>
 800b016:	6813      	ldr	r3, [r2, #0]
 800b018:	1c58      	adds	r0, r3, #1
 800b01a:	6010      	str	r0, [r2, #0]
 800b01c:	7019      	strb	r1, [r3, #0]
 800b01e:	4608      	mov	r0, r1
 800b020:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b024:	4770      	bx	lr

0800b026 <__sfputs_r>:
 800b026:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b028:	4606      	mov	r6, r0
 800b02a:	460f      	mov	r7, r1
 800b02c:	4614      	mov	r4, r2
 800b02e:	18d5      	adds	r5, r2, r3
 800b030:	42ac      	cmp	r4, r5
 800b032:	d101      	bne.n	800b038 <__sfputs_r+0x12>
 800b034:	2000      	movs	r0, #0
 800b036:	e007      	b.n	800b048 <__sfputs_r+0x22>
 800b038:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b03c:	463a      	mov	r2, r7
 800b03e:	4630      	mov	r0, r6
 800b040:	f7ff ffda 	bl	800aff8 <__sfputc_r>
 800b044:	1c43      	adds	r3, r0, #1
 800b046:	d1f3      	bne.n	800b030 <__sfputs_r+0xa>
 800b048:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b04c <_vfiprintf_r>:
 800b04c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b050:	460d      	mov	r5, r1
 800b052:	b09d      	sub	sp, #116	; 0x74
 800b054:	4614      	mov	r4, r2
 800b056:	4698      	mov	r8, r3
 800b058:	4606      	mov	r6, r0
 800b05a:	b118      	cbz	r0, 800b064 <_vfiprintf_r+0x18>
 800b05c:	6983      	ldr	r3, [r0, #24]
 800b05e:	b90b      	cbnz	r3, 800b064 <_vfiprintf_r+0x18>
 800b060:	f7ff f8e2 	bl	800a228 <__sinit>
 800b064:	4b89      	ldr	r3, [pc, #548]	; (800b28c <_vfiprintf_r+0x240>)
 800b066:	429d      	cmp	r5, r3
 800b068:	d11b      	bne.n	800b0a2 <_vfiprintf_r+0x56>
 800b06a:	6875      	ldr	r5, [r6, #4]
 800b06c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b06e:	07d9      	lsls	r1, r3, #31
 800b070:	d405      	bmi.n	800b07e <_vfiprintf_r+0x32>
 800b072:	89ab      	ldrh	r3, [r5, #12]
 800b074:	059a      	lsls	r2, r3, #22
 800b076:	d402      	bmi.n	800b07e <_vfiprintf_r+0x32>
 800b078:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b07a:	f7ff f978 	bl	800a36e <__retarget_lock_acquire_recursive>
 800b07e:	89ab      	ldrh	r3, [r5, #12]
 800b080:	071b      	lsls	r3, r3, #28
 800b082:	d501      	bpl.n	800b088 <_vfiprintf_r+0x3c>
 800b084:	692b      	ldr	r3, [r5, #16]
 800b086:	b9eb      	cbnz	r3, 800b0c4 <_vfiprintf_r+0x78>
 800b088:	4629      	mov	r1, r5
 800b08a:	4630      	mov	r0, r6
 800b08c:	f7fe f8ca 	bl	8009224 <__swsetup_r>
 800b090:	b1c0      	cbz	r0, 800b0c4 <_vfiprintf_r+0x78>
 800b092:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b094:	07dc      	lsls	r4, r3, #31
 800b096:	d50e      	bpl.n	800b0b6 <_vfiprintf_r+0x6a>
 800b098:	f04f 30ff 	mov.w	r0, #4294967295
 800b09c:	b01d      	add	sp, #116	; 0x74
 800b09e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0a2:	4b7b      	ldr	r3, [pc, #492]	; (800b290 <_vfiprintf_r+0x244>)
 800b0a4:	429d      	cmp	r5, r3
 800b0a6:	d101      	bne.n	800b0ac <_vfiprintf_r+0x60>
 800b0a8:	68b5      	ldr	r5, [r6, #8]
 800b0aa:	e7df      	b.n	800b06c <_vfiprintf_r+0x20>
 800b0ac:	4b79      	ldr	r3, [pc, #484]	; (800b294 <_vfiprintf_r+0x248>)
 800b0ae:	429d      	cmp	r5, r3
 800b0b0:	bf08      	it	eq
 800b0b2:	68f5      	ldreq	r5, [r6, #12]
 800b0b4:	e7da      	b.n	800b06c <_vfiprintf_r+0x20>
 800b0b6:	89ab      	ldrh	r3, [r5, #12]
 800b0b8:	0598      	lsls	r0, r3, #22
 800b0ba:	d4ed      	bmi.n	800b098 <_vfiprintf_r+0x4c>
 800b0bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b0be:	f7ff f957 	bl	800a370 <__retarget_lock_release_recursive>
 800b0c2:	e7e9      	b.n	800b098 <_vfiprintf_r+0x4c>
 800b0c4:	2300      	movs	r3, #0
 800b0c6:	9309      	str	r3, [sp, #36]	; 0x24
 800b0c8:	2320      	movs	r3, #32
 800b0ca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b0ce:	f8cd 800c 	str.w	r8, [sp, #12]
 800b0d2:	2330      	movs	r3, #48	; 0x30
 800b0d4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b298 <_vfiprintf_r+0x24c>
 800b0d8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b0dc:	f04f 0901 	mov.w	r9, #1
 800b0e0:	4623      	mov	r3, r4
 800b0e2:	469a      	mov	sl, r3
 800b0e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b0e8:	b10a      	cbz	r2, 800b0ee <_vfiprintf_r+0xa2>
 800b0ea:	2a25      	cmp	r2, #37	; 0x25
 800b0ec:	d1f9      	bne.n	800b0e2 <_vfiprintf_r+0x96>
 800b0ee:	ebba 0b04 	subs.w	fp, sl, r4
 800b0f2:	d00b      	beq.n	800b10c <_vfiprintf_r+0xc0>
 800b0f4:	465b      	mov	r3, fp
 800b0f6:	4622      	mov	r2, r4
 800b0f8:	4629      	mov	r1, r5
 800b0fa:	4630      	mov	r0, r6
 800b0fc:	f7ff ff93 	bl	800b026 <__sfputs_r>
 800b100:	3001      	adds	r0, #1
 800b102:	f000 80aa 	beq.w	800b25a <_vfiprintf_r+0x20e>
 800b106:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b108:	445a      	add	r2, fp
 800b10a:	9209      	str	r2, [sp, #36]	; 0x24
 800b10c:	f89a 3000 	ldrb.w	r3, [sl]
 800b110:	2b00      	cmp	r3, #0
 800b112:	f000 80a2 	beq.w	800b25a <_vfiprintf_r+0x20e>
 800b116:	2300      	movs	r3, #0
 800b118:	f04f 32ff 	mov.w	r2, #4294967295
 800b11c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b120:	f10a 0a01 	add.w	sl, sl, #1
 800b124:	9304      	str	r3, [sp, #16]
 800b126:	9307      	str	r3, [sp, #28]
 800b128:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b12c:	931a      	str	r3, [sp, #104]	; 0x68
 800b12e:	4654      	mov	r4, sl
 800b130:	2205      	movs	r2, #5
 800b132:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b136:	4858      	ldr	r0, [pc, #352]	; (800b298 <_vfiprintf_r+0x24c>)
 800b138:	f7f5 f85a 	bl	80001f0 <memchr>
 800b13c:	9a04      	ldr	r2, [sp, #16]
 800b13e:	b9d8      	cbnz	r0, 800b178 <_vfiprintf_r+0x12c>
 800b140:	06d1      	lsls	r1, r2, #27
 800b142:	bf44      	itt	mi
 800b144:	2320      	movmi	r3, #32
 800b146:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b14a:	0713      	lsls	r3, r2, #28
 800b14c:	bf44      	itt	mi
 800b14e:	232b      	movmi	r3, #43	; 0x2b
 800b150:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b154:	f89a 3000 	ldrb.w	r3, [sl]
 800b158:	2b2a      	cmp	r3, #42	; 0x2a
 800b15a:	d015      	beq.n	800b188 <_vfiprintf_r+0x13c>
 800b15c:	9a07      	ldr	r2, [sp, #28]
 800b15e:	4654      	mov	r4, sl
 800b160:	2000      	movs	r0, #0
 800b162:	f04f 0c0a 	mov.w	ip, #10
 800b166:	4621      	mov	r1, r4
 800b168:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b16c:	3b30      	subs	r3, #48	; 0x30
 800b16e:	2b09      	cmp	r3, #9
 800b170:	d94e      	bls.n	800b210 <_vfiprintf_r+0x1c4>
 800b172:	b1b0      	cbz	r0, 800b1a2 <_vfiprintf_r+0x156>
 800b174:	9207      	str	r2, [sp, #28]
 800b176:	e014      	b.n	800b1a2 <_vfiprintf_r+0x156>
 800b178:	eba0 0308 	sub.w	r3, r0, r8
 800b17c:	fa09 f303 	lsl.w	r3, r9, r3
 800b180:	4313      	orrs	r3, r2
 800b182:	9304      	str	r3, [sp, #16]
 800b184:	46a2      	mov	sl, r4
 800b186:	e7d2      	b.n	800b12e <_vfiprintf_r+0xe2>
 800b188:	9b03      	ldr	r3, [sp, #12]
 800b18a:	1d19      	adds	r1, r3, #4
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	9103      	str	r1, [sp, #12]
 800b190:	2b00      	cmp	r3, #0
 800b192:	bfbb      	ittet	lt
 800b194:	425b      	neglt	r3, r3
 800b196:	f042 0202 	orrlt.w	r2, r2, #2
 800b19a:	9307      	strge	r3, [sp, #28]
 800b19c:	9307      	strlt	r3, [sp, #28]
 800b19e:	bfb8      	it	lt
 800b1a0:	9204      	strlt	r2, [sp, #16]
 800b1a2:	7823      	ldrb	r3, [r4, #0]
 800b1a4:	2b2e      	cmp	r3, #46	; 0x2e
 800b1a6:	d10c      	bne.n	800b1c2 <_vfiprintf_r+0x176>
 800b1a8:	7863      	ldrb	r3, [r4, #1]
 800b1aa:	2b2a      	cmp	r3, #42	; 0x2a
 800b1ac:	d135      	bne.n	800b21a <_vfiprintf_r+0x1ce>
 800b1ae:	9b03      	ldr	r3, [sp, #12]
 800b1b0:	1d1a      	adds	r2, r3, #4
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	9203      	str	r2, [sp, #12]
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	bfb8      	it	lt
 800b1ba:	f04f 33ff 	movlt.w	r3, #4294967295
 800b1be:	3402      	adds	r4, #2
 800b1c0:	9305      	str	r3, [sp, #20]
 800b1c2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b2a8 <_vfiprintf_r+0x25c>
 800b1c6:	7821      	ldrb	r1, [r4, #0]
 800b1c8:	2203      	movs	r2, #3
 800b1ca:	4650      	mov	r0, sl
 800b1cc:	f7f5 f810 	bl	80001f0 <memchr>
 800b1d0:	b140      	cbz	r0, 800b1e4 <_vfiprintf_r+0x198>
 800b1d2:	2340      	movs	r3, #64	; 0x40
 800b1d4:	eba0 000a 	sub.w	r0, r0, sl
 800b1d8:	fa03 f000 	lsl.w	r0, r3, r0
 800b1dc:	9b04      	ldr	r3, [sp, #16]
 800b1de:	4303      	orrs	r3, r0
 800b1e0:	3401      	adds	r4, #1
 800b1e2:	9304      	str	r3, [sp, #16]
 800b1e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b1e8:	482c      	ldr	r0, [pc, #176]	; (800b29c <_vfiprintf_r+0x250>)
 800b1ea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b1ee:	2206      	movs	r2, #6
 800b1f0:	f7f4 fffe 	bl	80001f0 <memchr>
 800b1f4:	2800      	cmp	r0, #0
 800b1f6:	d03f      	beq.n	800b278 <_vfiprintf_r+0x22c>
 800b1f8:	4b29      	ldr	r3, [pc, #164]	; (800b2a0 <_vfiprintf_r+0x254>)
 800b1fa:	bb1b      	cbnz	r3, 800b244 <_vfiprintf_r+0x1f8>
 800b1fc:	9b03      	ldr	r3, [sp, #12]
 800b1fe:	3307      	adds	r3, #7
 800b200:	f023 0307 	bic.w	r3, r3, #7
 800b204:	3308      	adds	r3, #8
 800b206:	9303      	str	r3, [sp, #12]
 800b208:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b20a:	443b      	add	r3, r7
 800b20c:	9309      	str	r3, [sp, #36]	; 0x24
 800b20e:	e767      	b.n	800b0e0 <_vfiprintf_r+0x94>
 800b210:	fb0c 3202 	mla	r2, ip, r2, r3
 800b214:	460c      	mov	r4, r1
 800b216:	2001      	movs	r0, #1
 800b218:	e7a5      	b.n	800b166 <_vfiprintf_r+0x11a>
 800b21a:	2300      	movs	r3, #0
 800b21c:	3401      	adds	r4, #1
 800b21e:	9305      	str	r3, [sp, #20]
 800b220:	4619      	mov	r1, r3
 800b222:	f04f 0c0a 	mov.w	ip, #10
 800b226:	4620      	mov	r0, r4
 800b228:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b22c:	3a30      	subs	r2, #48	; 0x30
 800b22e:	2a09      	cmp	r2, #9
 800b230:	d903      	bls.n	800b23a <_vfiprintf_r+0x1ee>
 800b232:	2b00      	cmp	r3, #0
 800b234:	d0c5      	beq.n	800b1c2 <_vfiprintf_r+0x176>
 800b236:	9105      	str	r1, [sp, #20]
 800b238:	e7c3      	b.n	800b1c2 <_vfiprintf_r+0x176>
 800b23a:	fb0c 2101 	mla	r1, ip, r1, r2
 800b23e:	4604      	mov	r4, r0
 800b240:	2301      	movs	r3, #1
 800b242:	e7f0      	b.n	800b226 <_vfiprintf_r+0x1da>
 800b244:	ab03      	add	r3, sp, #12
 800b246:	9300      	str	r3, [sp, #0]
 800b248:	462a      	mov	r2, r5
 800b24a:	4b16      	ldr	r3, [pc, #88]	; (800b2a4 <_vfiprintf_r+0x258>)
 800b24c:	a904      	add	r1, sp, #16
 800b24e:	4630      	mov	r0, r6
 800b250:	f7fd fb1e 	bl	8008890 <_printf_float>
 800b254:	4607      	mov	r7, r0
 800b256:	1c78      	adds	r0, r7, #1
 800b258:	d1d6      	bne.n	800b208 <_vfiprintf_r+0x1bc>
 800b25a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b25c:	07d9      	lsls	r1, r3, #31
 800b25e:	d405      	bmi.n	800b26c <_vfiprintf_r+0x220>
 800b260:	89ab      	ldrh	r3, [r5, #12]
 800b262:	059a      	lsls	r2, r3, #22
 800b264:	d402      	bmi.n	800b26c <_vfiprintf_r+0x220>
 800b266:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b268:	f7ff f882 	bl	800a370 <__retarget_lock_release_recursive>
 800b26c:	89ab      	ldrh	r3, [r5, #12]
 800b26e:	065b      	lsls	r3, r3, #25
 800b270:	f53f af12 	bmi.w	800b098 <_vfiprintf_r+0x4c>
 800b274:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b276:	e711      	b.n	800b09c <_vfiprintf_r+0x50>
 800b278:	ab03      	add	r3, sp, #12
 800b27a:	9300      	str	r3, [sp, #0]
 800b27c:	462a      	mov	r2, r5
 800b27e:	4b09      	ldr	r3, [pc, #36]	; (800b2a4 <_vfiprintf_r+0x258>)
 800b280:	a904      	add	r1, sp, #16
 800b282:	4630      	mov	r0, r6
 800b284:	f7fd fda8 	bl	8008dd8 <_printf_i>
 800b288:	e7e4      	b.n	800b254 <_vfiprintf_r+0x208>
 800b28a:	bf00      	nop
 800b28c:	0800bcf8 	.word	0x0800bcf8
 800b290:	0800bd18 	.word	0x0800bd18
 800b294:	0800bcd8 	.word	0x0800bcd8
 800b298:	0800be94 	.word	0x0800be94
 800b29c:	0800be9e 	.word	0x0800be9e
 800b2a0:	08008891 	.word	0x08008891
 800b2a4:	0800b027 	.word	0x0800b027
 800b2a8:	0800be9a 	.word	0x0800be9a

0800b2ac <_sbrk_r>:
 800b2ac:	b538      	push	{r3, r4, r5, lr}
 800b2ae:	4d06      	ldr	r5, [pc, #24]	; (800b2c8 <_sbrk_r+0x1c>)
 800b2b0:	2300      	movs	r3, #0
 800b2b2:	4604      	mov	r4, r0
 800b2b4:	4608      	mov	r0, r1
 800b2b6:	602b      	str	r3, [r5, #0]
 800b2b8:	f7f7 fd9c 	bl	8002df4 <_sbrk>
 800b2bc:	1c43      	adds	r3, r0, #1
 800b2be:	d102      	bne.n	800b2c6 <_sbrk_r+0x1a>
 800b2c0:	682b      	ldr	r3, [r5, #0]
 800b2c2:	b103      	cbz	r3, 800b2c6 <_sbrk_r+0x1a>
 800b2c4:	6023      	str	r3, [r4, #0]
 800b2c6:	bd38      	pop	{r3, r4, r5, pc}
 800b2c8:	200005b0 	.word	0x200005b0

0800b2cc <__sread>:
 800b2cc:	b510      	push	{r4, lr}
 800b2ce:	460c      	mov	r4, r1
 800b2d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b2d4:	f000 f92c 	bl	800b530 <_read_r>
 800b2d8:	2800      	cmp	r0, #0
 800b2da:	bfab      	itete	ge
 800b2dc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b2de:	89a3      	ldrhlt	r3, [r4, #12]
 800b2e0:	181b      	addge	r3, r3, r0
 800b2e2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b2e6:	bfac      	ite	ge
 800b2e8:	6563      	strge	r3, [r4, #84]	; 0x54
 800b2ea:	81a3      	strhlt	r3, [r4, #12]
 800b2ec:	bd10      	pop	{r4, pc}

0800b2ee <__swrite>:
 800b2ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b2f2:	461f      	mov	r7, r3
 800b2f4:	898b      	ldrh	r3, [r1, #12]
 800b2f6:	05db      	lsls	r3, r3, #23
 800b2f8:	4605      	mov	r5, r0
 800b2fa:	460c      	mov	r4, r1
 800b2fc:	4616      	mov	r6, r2
 800b2fe:	d505      	bpl.n	800b30c <__swrite+0x1e>
 800b300:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b304:	2302      	movs	r3, #2
 800b306:	2200      	movs	r2, #0
 800b308:	f000 f898 	bl	800b43c <_lseek_r>
 800b30c:	89a3      	ldrh	r3, [r4, #12]
 800b30e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b312:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b316:	81a3      	strh	r3, [r4, #12]
 800b318:	4632      	mov	r2, r6
 800b31a:	463b      	mov	r3, r7
 800b31c:	4628      	mov	r0, r5
 800b31e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b322:	f000 b817 	b.w	800b354 <_write_r>

0800b326 <__sseek>:
 800b326:	b510      	push	{r4, lr}
 800b328:	460c      	mov	r4, r1
 800b32a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b32e:	f000 f885 	bl	800b43c <_lseek_r>
 800b332:	1c43      	adds	r3, r0, #1
 800b334:	89a3      	ldrh	r3, [r4, #12]
 800b336:	bf15      	itete	ne
 800b338:	6560      	strne	r0, [r4, #84]	; 0x54
 800b33a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b33e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b342:	81a3      	strheq	r3, [r4, #12]
 800b344:	bf18      	it	ne
 800b346:	81a3      	strhne	r3, [r4, #12]
 800b348:	bd10      	pop	{r4, pc}

0800b34a <__sclose>:
 800b34a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b34e:	f000 b831 	b.w	800b3b4 <_close_r>
	...

0800b354 <_write_r>:
 800b354:	b538      	push	{r3, r4, r5, lr}
 800b356:	4d07      	ldr	r5, [pc, #28]	; (800b374 <_write_r+0x20>)
 800b358:	4604      	mov	r4, r0
 800b35a:	4608      	mov	r0, r1
 800b35c:	4611      	mov	r1, r2
 800b35e:	2200      	movs	r2, #0
 800b360:	602a      	str	r2, [r5, #0]
 800b362:	461a      	mov	r2, r3
 800b364:	f7f6 ffa4 	bl	80022b0 <_write>
 800b368:	1c43      	adds	r3, r0, #1
 800b36a:	d102      	bne.n	800b372 <_write_r+0x1e>
 800b36c:	682b      	ldr	r3, [r5, #0]
 800b36e:	b103      	cbz	r3, 800b372 <_write_r+0x1e>
 800b370:	6023      	str	r3, [r4, #0]
 800b372:	bd38      	pop	{r3, r4, r5, pc}
 800b374:	200005b0 	.word	0x200005b0

0800b378 <__assert_func>:
 800b378:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b37a:	4614      	mov	r4, r2
 800b37c:	461a      	mov	r2, r3
 800b37e:	4b09      	ldr	r3, [pc, #36]	; (800b3a4 <__assert_func+0x2c>)
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	4605      	mov	r5, r0
 800b384:	68d8      	ldr	r0, [r3, #12]
 800b386:	b14c      	cbz	r4, 800b39c <__assert_func+0x24>
 800b388:	4b07      	ldr	r3, [pc, #28]	; (800b3a8 <__assert_func+0x30>)
 800b38a:	9100      	str	r1, [sp, #0]
 800b38c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b390:	4906      	ldr	r1, [pc, #24]	; (800b3ac <__assert_func+0x34>)
 800b392:	462b      	mov	r3, r5
 800b394:	f000 f81e 	bl	800b3d4 <fiprintf>
 800b398:	f000 f8e9 	bl	800b56e <abort>
 800b39c:	4b04      	ldr	r3, [pc, #16]	; (800b3b0 <__assert_func+0x38>)
 800b39e:	461c      	mov	r4, r3
 800b3a0:	e7f3      	b.n	800b38a <__assert_func+0x12>
 800b3a2:	bf00      	nop
 800b3a4:	20000024 	.word	0x20000024
 800b3a8:	0800bea5 	.word	0x0800bea5
 800b3ac:	0800beb2 	.word	0x0800beb2
 800b3b0:	0800bee0 	.word	0x0800bee0

0800b3b4 <_close_r>:
 800b3b4:	b538      	push	{r3, r4, r5, lr}
 800b3b6:	4d06      	ldr	r5, [pc, #24]	; (800b3d0 <_close_r+0x1c>)
 800b3b8:	2300      	movs	r3, #0
 800b3ba:	4604      	mov	r4, r0
 800b3bc:	4608      	mov	r0, r1
 800b3be:	602b      	str	r3, [r5, #0]
 800b3c0:	f7f7 fce3 	bl	8002d8a <_close>
 800b3c4:	1c43      	adds	r3, r0, #1
 800b3c6:	d102      	bne.n	800b3ce <_close_r+0x1a>
 800b3c8:	682b      	ldr	r3, [r5, #0]
 800b3ca:	b103      	cbz	r3, 800b3ce <_close_r+0x1a>
 800b3cc:	6023      	str	r3, [r4, #0]
 800b3ce:	bd38      	pop	{r3, r4, r5, pc}
 800b3d0:	200005b0 	.word	0x200005b0

0800b3d4 <fiprintf>:
 800b3d4:	b40e      	push	{r1, r2, r3}
 800b3d6:	b503      	push	{r0, r1, lr}
 800b3d8:	4601      	mov	r1, r0
 800b3da:	ab03      	add	r3, sp, #12
 800b3dc:	4805      	ldr	r0, [pc, #20]	; (800b3f4 <fiprintf+0x20>)
 800b3de:	f853 2b04 	ldr.w	r2, [r3], #4
 800b3e2:	6800      	ldr	r0, [r0, #0]
 800b3e4:	9301      	str	r3, [sp, #4]
 800b3e6:	f7ff fe31 	bl	800b04c <_vfiprintf_r>
 800b3ea:	b002      	add	sp, #8
 800b3ec:	f85d eb04 	ldr.w	lr, [sp], #4
 800b3f0:	b003      	add	sp, #12
 800b3f2:	4770      	bx	lr
 800b3f4:	20000024 	.word	0x20000024

0800b3f8 <_fstat_r>:
 800b3f8:	b538      	push	{r3, r4, r5, lr}
 800b3fa:	4d07      	ldr	r5, [pc, #28]	; (800b418 <_fstat_r+0x20>)
 800b3fc:	2300      	movs	r3, #0
 800b3fe:	4604      	mov	r4, r0
 800b400:	4608      	mov	r0, r1
 800b402:	4611      	mov	r1, r2
 800b404:	602b      	str	r3, [r5, #0]
 800b406:	f7f7 fccc 	bl	8002da2 <_fstat>
 800b40a:	1c43      	adds	r3, r0, #1
 800b40c:	d102      	bne.n	800b414 <_fstat_r+0x1c>
 800b40e:	682b      	ldr	r3, [r5, #0]
 800b410:	b103      	cbz	r3, 800b414 <_fstat_r+0x1c>
 800b412:	6023      	str	r3, [r4, #0]
 800b414:	bd38      	pop	{r3, r4, r5, pc}
 800b416:	bf00      	nop
 800b418:	200005b0 	.word	0x200005b0

0800b41c <_isatty_r>:
 800b41c:	b538      	push	{r3, r4, r5, lr}
 800b41e:	4d06      	ldr	r5, [pc, #24]	; (800b438 <_isatty_r+0x1c>)
 800b420:	2300      	movs	r3, #0
 800b422:	4604      	mov	r4, r0
 800b424:	4608      	mov	r0, r1
 800b426:	602b      	str	r3, [r5, #0]
 800b428:	f7f7 fccb 	bl	8002dc2 <_isatty>
 800b42c:	1c43      	adds	r3, r0, #1
 800b42e:	d102      	bne.n	800b436 <_isatty_r+0x1a>
 800b430:	682b      	ldr	r3, [r5, #0]
 800b432:	b103      	cbz	r3, 800b436 <_isatty_r+0x1a>
 800b434:	6023      	str	r3, [r4, #0]
 800b436:	bd38      	pop	{r3, r4, r5, pc}
 800b438:	200005b0 	.word	0x200005b0

0800b43c <_lseek_r>:
 800b43c:	b538      	push	{r3, r4, r5, lr}
 800b43e:	4d07      	ldr	r5, [pc, #28]	; (800b45c <_lseek_r+0x20>)
 800b440:	4604      	mov	r4, r0
 800b442:	4608      	mov	r0, r1
 800b444:	4611      	mov	r1, r2
 800b446:	2200      	movs	r2, #0
 800b448:	602a      	str	r2, [r5, #0]
 800b44a:	461a      	mov	r2, r3
 800b44c:	f7f7 fcc4 	bl	8002dd8 <_lseek>
 800b450:	1c43      	adds	r3, r0, #1
 800b452:	d102      	bne.n	800b45a <_lseek_r+0x1e>
 800b454:	682b      	ldr	r3, [r5, #0]
 800b456:	b103      	cbz	r3, 800b45a <_lseek_r+0x1e>
 800b458:	6023      	str	r3, [r4, #0]
 800b45a:	bd38      	pop	{r3, r4, r5, pc}
 800b45c:	200005b0 	.word	0x200005b0

0800b460 <__ascii_mbtowc>:
 800b460:	b082      	sub	sp, #8
 800b462:	b901      	cbnz	r1, 800b466 <__ascii_mbtowc+0x6>
 800b464:	a901      	add	r1, sp, #4
 800b466:	b142      	cbz	r2, 800b47a <__ascii_mbtowc+0x1a>
 800b468:	b14b      	cbz	r3, 800b47e <__ascii_mbtowc+0x1e>
 800b46a:	7813      	ldrb	r3, [r2, #0]
 800b46c:	600b      	str	r3, [r1, #0]
 800b46e:	7812      	ldrb	r2, [r2, #0]
 800b470:	1e10      	subs	r0, r2, #0
 800b472:	bf18      	it	ne
 800b474:	2001      	movne	r0, #1
 800b476:	b002      	add	sp, #8
 800b478:	4770      	bx	lr
 800b47a:	4610      	mov	r0, r2
 800b47c:	e7fb      	b.n	800b476 <__ascii_mbtowc+0x16>
 800b47e:	f06f 0001 	mvn.w	r0, #1
 800b482:	e7f8      	b.n	800b476 <__ascii_mbtowc+0x16>

0800b484 <memmove>:
 800b484:	4288      	cmp	r0, r1
 800b486:	b510      	push	{r4, lr}
 800b488:	eb01 0402 	add.w	r4, r1, r2
 800b48c:	d902      	bls.n	800b494 <memmove+0x10>
 800b48e:	4284      	cmp	r4, r0
 800b490:	4623      	mov	r3, r4
 800b492:	d807      	bhi.n	800b4a4 <memmove+0x20>
 800b494:	1e43      	subs	r3, r0, #1
 800b496:	42a1      	cmp	r1, r4
 800b498:	d008      	beq.n	800b4ac <memmove+0x28>
 800b49a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b49e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b4a2:	e7f8      	b.n	800b496 <memmove+0x12>
 800b4a4:	4402      	add	r2, r0
 800b4a6:	4601      	mov	r1, r0
 800b4a8:	428a      	cmp	r2, r1
 800b4aa:	d100      	bne.n	800b4ae <memmove+0x2a>
 800b4ac:	bd10      	pop	{r4, pc}
 800b4ae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b4b2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b4b6:	e7f7      	b.n	800b4a8 <memmove+0x24>

0800b4b8 <__malloc_lock>:
 800b4b8:	4801      	ldr	r0, [pc, #4]	; (800b4c0 <__malloc_lock+0x8>)
 800b4ba:	f7fe bf58 	b.w	800a36e <__retarget_lock_acquire_recursive>
 800b4be:	bf00      	nop
 800b4c0:	200005a4 	.word	0x200005a4

0800b4c4 <__malloc_unlock>:
 800b4c4:	4801      	ldr	r0, [pc, #4]	; (800b4cc <__malloc_unlock+0x8>)
 800b4c6:	f7fe bf53 	b.w	800a370 <__retarget_lock_release_recursive>
 800b4ca:	bf00      	nop
 800b4cc:	200005a4 	.word	0x200005a4

0800b4d0 <_realloc_r>:
 800b4d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b4d4:	4680      	mov	r8, r0
 800b4d6:	4614      	mov	r4, r2
 800b4d8:	460e      	mov	r6, r1
 800b4da:	b921      	cbnz	r1, 800b4e6 <_realloc_r+0x16>
 800b4dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b4e0:	4611      	mov	r1, r2
 800b4e2:	f7ff bbb9 	b.w	800ac58 <_malloc_r>
 800b4e6:	b92a      	cbnz	r2, 800b4f4 <_realloc_r+0x24>
 800b4e8:	f7ff fb4a 	bl	800ab80 <_free_r>
 800b4ec:	4625      	mov	r5, r4
 800b4ee:	4628      	mov	r0, r5
 800b4f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b4f4:	f000 f842 	bl	800b57c <_malloc_usable_size_r>
 800b4f8:	4284      	cmp	r4, r0
 800b4fa:	4607      	mov	r7, r0
 800b4fc:	d802      	bhi.n	800b504 <_realloc_r+0x34>
 800b4fe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b502:	d812      	bhi.n	800b52a <_realloc_r+0x5a>
 800b504:	4621      	mov	r1, r4
 800b506:	4640      	mov	r0, r8
 800b508:	f7ff fba6 	bl	800ac58 <_malloc_r>
 800b50c:	4605      	mov	r5, r0
 800b50e:	2800      	cmp	r0, #0
 800b510:	d0ed      	beq.n	800b4ee <_realloc_r+0x1e>
 800b512:	42bc      	cmp	r4, r7
 800b514:	4622      	mov	r2, r4
 800b516:	4631      	mov	r1, r6
 800b518:	bf28      	it	cs
 800b51a:	463a      	movcs	r2, r7
 800b51c:	f7fd f902 	bl	8008724 <memcpy>
 800b520:	4631      	mov	r1, r6
 800b522:	4640      	mov	r0, r8
 800b524:	f7ff fb2c 	bl	800ab80 <_free_r>
 800b528:	e7e1      	b.n	800b4ee <_realloc_r+0x1e>
 800b52a:	4635      	mov	r5, r6
 800b52c:	e7df      	b.n	800b4ee <_realloc_r+0x1e>
	...

0800b530 <_read_r>:
 800b530:	b538      	push	{r3, r4, r5, lr}
 800b532:	4d07      	ldr	r5, [pc, #28]	; (800b550 <_read_r+0x20>)
 800b534:	4604      	mov	r4, r0
 800b536:	4608      	mov	r0, r1
 800b538:	4611      	mov	r1, r2
 800b53a:	2200      	movs	r2, #0
 800b53c:	602a      	str	r2, [r5, #0]
 800b53e:	461a      	mov	r2, r3
 800b540:	f7f7 fc06 	bl	8002d50 <_read>
 800b544:	1c43      	adds	r3, r0, #1
 800b546:	d102      	bne.n	800b54e <_read_r+0x1e>
 800b548:	682b      	ldr	r3, [r5, #0]
 800b54a:	b103      	cbz	r3, 800b54e <_read_r+0x1e>
 800b54c:	6023      	str	r3, [r4, #0]
 800b54e:	bd38      	pop	{r3, r4, r5, pc}
 800b550:	200005b0 	.word	0x200005b0

0800b554 <__ascii_wctomb>:
 800b554:	b149      	cbz	r1, 800b56a <__ascii_wctomb+0x16>
 800b556:	2aff      	cmp	r2, #255	; 0xff
 800b558:	bf85      	ittet	hi
 800b55a:	238a      	movhi	r3, #138	; 0x8a
 800b55c:	6003      	strhi	r3, [r0, #0]
 800b55e:	700a      	strbls	r2, [r1, #0]
 800b560:	f04f 30ff 	movhi.w	r0, #4294967295
 800b564:	bf98      	it	ls
 800b566:	2001      	movls	r0, #1
 800b568:	4770      	bx	lr
 800b56a:	4608      	mov	r0, r1
 800b56c:	4770      	bx	lr

0800b56e <abort>:
 800b56e:	b508      	push	{r3, lr}
 800b570:	2006      	movs	r0, #6
 800b572:	f000 f833 	bl	800b5dc <raise>
 800b576:	2001      	movs	r0, #1
 800b578:	f7f7 fbe0 	bl	8002d3c <_exit>

0800b57c <_malloc_usable_size_r>:
 800b57c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b580:	1f18      	subs	r0, r3, #4
 800b582:	2b00      	cmp	r3, #0
 800b584:	bfbc      	itt	lt
 800b586:	580b      	ldrlt	r3, [r1, r0]
 800b588:	18c0      	addlt	r0, r0, r3
 800b58a:	4770      	bx	lr

0800b58c <_raise_r>:
 800b58c:	291f      	cmp	r1, #31
 800b58e:	b538      	push	{r3, r4, r5, lr}
 800b590:	4604      	mov	r4, r0
 800b592:	460d      	mov	r5, r1
 800b594:	d904      	bls.n	800b5a0 <_raise_r+0x14>
 800b596:	2316      	movs	r3, #22
 800b598:	6003      	str	r3, [r0, #0]
 800b59a:	f04f 30ff 	mov.w	r0, #4294967295
 800b59e:	bd38      	pop	{r3, r4, r5, pc}
 800b5a0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b5a2:	b112      	cbz	r2, 800b5aa <_raise_r+0x1e>
 800b5a4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b5a8:	b94b      	cbnz	r3, 800b5be <_raise_r+0x32>
 800b5aa:	4620      	mov	r0, r4
 800b5ac:	f000 f830 	bl	800b610 <_getpid_r>
 800b5b0:	462a      	mov	r2, r5
 800b5b2:	4601      	mov	r1, r0
 800b5b4:	4620      	mov	r0, r4
 800b5b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b5ba:	f000 b817 	b.w	800b5ec <_kill_r>
 800b5be:	2b01      	cmp	r3, #1
 800b5c0:	d00a      	beq.n	800b5d8 <_raise_r+0x4c>
 800b5c2:	1c59      	adds	r1, r3, #1
 800b5c4:	d103      	bne.n	800b5ce <_raise_r+0x42>
 800b5c6:	2316      	movs	r3, #22
 800b5c8:	6003      	str	r3, [r0, #0]
 800b5ca:	2001      	movs	r0, #1
 800b5cc:	e7e7      	b.n	800b59e <_raise_r+0x12>
 800b5ce:	2400      	movs	r4, #0
 800b5d0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b5d4:	4628      	mov	r0, r5
 800b5d6:	4798      	blx	r3
 800b5d8:	2000      	movs	r0, #0
 800b5da:	e7e0      	b.n	800b59e <_raise_r+0x12>

0800b5dc <raise>:
 800b5dc:	4b02      	ldr	r3, [pc, #8]	; (800b5e8 <raise+0xc>)
 800b5de:	4601      	mov	r1, r0
 800b5e0:	6818      	ldr	r0, [r3, #0]
 800b5e2:	f7ff bfd3 	b.w	800b58c <_raise_r>
 800b5e6:	bf00      	nop
 800b5e8:	20000024 	.word	0x20000024

0800b5ec <_kill_r>:
 800b5ec:	b538      	push	{r3, r4, r5, lr}
 800b5ee:	4d07      	ldr	r5, [pc, #28]	; (800b60c <_kill_r+0x20>)
 800b5f0:	2300      	movs	r3, #0
 800b5f2:	4604      	mov	r4, r0
 800b5f4:	4608      	mov	r0, r1
 800b5f6:	4611      	mov	r1, r2
 800b5f8:	602b      	str	r3, [r5, #0]
 800b5fa:	f7f7 fb8f 	bl	8002d1c <_kill>
 800b5fe:	1c43      	adds	r3, r0, #1
 800b600:	d102      	bne.n	800b608 <_kill_r+0x1c>
 800b602:	682b      	ldr	r3, [r5, #0]
 800b604:	b103      	cbz	r3, 800b608 <_kill_r+0x1c>
 800b606:	6023      	str	r3, [r4, #0]
 800b608:	bd38      	pop	{r3, r4, r5, pc}
 800b60a:	bf00      	nop
 800b60c:	200005b0 	.word	0x200005b0

0800b610 <_getpid_r>:
 800b610:	f7f7 bb7c 	b.w	8002d0c <_getpid>

0800b614 <_init>:
 800b614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b616:	bf00      	nop
 800b618:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b61a:	bc08      	pop	{r3}
 800b61c:	469e      	mov	lr, r3
 800b61e:	4770      	bx	lr

0800b620 <_fini>:
 800b620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b622:	bf00      	nop
 800b624:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b626:	bc08      	pop	{r3}
 800b628:	469e      	mov	lr, r3
 800b62a:	4770      	bx	lr
